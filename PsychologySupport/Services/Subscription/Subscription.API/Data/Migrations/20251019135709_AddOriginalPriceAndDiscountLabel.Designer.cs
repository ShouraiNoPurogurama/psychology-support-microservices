// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Subscription.API.Data;

#nullable disable

namespace Subscription.API.Data.Migrations
{
    [DbContext(typeof(SubscriptionDbContext))]
    [Migration("20251019135709_AddOriginalPriceAndDiscountLabel")]
    partial class AddOriginalPriceAndDiscountLabel
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("public")
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Subscription.API.ServicePackages.Models.ServicePackage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("DiscountLabel")
                        .HasColumnType("text")
                        .HasColumnName("discount_label");

                    b.Property<int>("DurationDays")
                        .HasColumnType("integer")
                        .HasColumnName("duration_days");

                    b.Property<Guid>("ImageId")
                        .HasColumnType("uuid")
                        .HasColumnName("image_id");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<DateTimeOffset?>("LastModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text")
                        .HasColumnName("last_modified_by");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<decimal>("OriginalPrice")
                        .HasColumnType("numeric")
                        .HasColumnName("original_price");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric")
                        .HasColumnName("price");

                    b.HasKey("Id")
                        .HasName("pk_service_packages");

                    b.ToTable("service_packages", "public");
                });

            modelBuilder.Entity("Subscription.API.UserSubscriptions.Models.UserSubscription", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset>("EndDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("end_date");

                    b.Property<decimal>("FinalPrice")
                        .HasColumnType("numeric")
                        .HasColumnName("final_price");

                    b.Property<Guid?>("GiftId")
                        .HasColumnType("uuid")
                        .HasColumnName("gift_id");

                    b.Property<DateTimeOffset?>("LastModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text")
                        .HasColumnName("last_modified_by");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uuid")
                        .HasColumnName("patient_id");

                    b.Property<Guid?>("PromoCodeId")
                        .HasColumnType("uuid")
                        .HasColumnName("promo_code_id");

                    b.Property<Guid>("ServicePackageId")
                        .HasColumnType("uuid")
                        .HasColumnName("service_package_id");

                    b.Property<DateTimeOffset>("StartDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_date");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("VARCHAR(20)")
                        .HasColumnName("status");

                    b.HasKey("Id")
                        .HasName("pk_user_subscriptions");

                    b.HasIndex("ServicePackageId")
                        .HasDatabaseName("ix_user_subscriptions_service_package_id");

                    b.ToTable("user_subscriptions", "public");
                });

            modelBuilder.Entity("Subscription.API.UserSubscriptions.Models.UserSubscription", b =>
                {
                    b.HasOne("Subscription.API.ServicePackages.Models.ServicePackage", "ServicePackage")
                        .WithMany()
                        .HasForeignKey("ServicePackageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_user_subscriptions_service_packages_service_package_id");

                    b.Navigation("ServicePackage");
                });
#pragma warning restore 612, 618
        }
    }
}
