// <auto-generated />
using System;
using Billing.API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Billing.API.Data.Migrations
{
    [DbContext(typeof(BillingDbContext))]
    [Migration("20250909104154_Update_IdempotencyKey")]
    partial class Update_IdempotencyKey
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Billing.API.Models.IdempotencyKey", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expires_at");

                    b.Property<Guid>("Key")
                        .HasColumnType("uuid")
                        .HasColumnName("key");

                    b.Property<string>("RequestHash")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("request_hash");

                    b.Property<string>("ResponsePayload")
                        .HasColumnType("jsonb")
                        .HasColumnName("response_payload");

                    b.HasKey("Id")
                        .HasName("idempotency_keys_pkey");

                    b.HasIndex(new[] { "Key" }, "idempotency_keys_key_key")
                        .IsUnique()
                        .HasDatabaseName("ix_idempotency_keys_key");

                    b.ToTable("idempotency_keys", (string)null);
                });

            modelBuilder.Entity("Billing.API.Models.Invoice", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<decimal>("Amount")
                        .HasPrecision(15, 2)
                        .HasColumnType("numeric(15,2)")
                        .HasColumnName("amount");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("code");

                    b.Property<DateTimeOffset?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("IssuedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("issued_at");

                    b.Property<DateTimeOffset?>("LastModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text")
                        .HasColumnName("last_modified_by");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid")
                        .HasColumnName("order_id");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("status")
                        .HasDefaultValueSql("'Issued'::character varying");

                    b.Property<Guid>("SubjectRef")
                        .HasColumnType("uuid")
                        .HasColumnName("subject_ref");

                    b.HasKey("Id")
                        .HasName("invoices_pkey");

                    b.HasIndex("OrderId")
                        .HasDatabaseName("ix_invoices_order_id");

                    b.HasIndex(new[] { "Code" }, "invoices_code_key")
                        .IsUnique()
                        .HasDatabaseName("ix_invoices_code");

                    b.ToTable("invoices", (string)null);
                });

            modelBuilder.Entity("Billing.API.Models.InvoiceItem", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<decimal?>("DiscountAmount")
                        .HasPrecision(15, 2)
                        .HasColumnType("numeric(15,2)")
                        .HasColumnName("discount_amount");

                    b.Property<Guid>("InvoiceSnapshotId")
                        .HasColumnType("uuid")
                        .HasColumnName("invoice_snapshot_id");

                    b.Property<string>("ItemType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("item_type");

                    b.Property<DateTimeOffset?>("LastModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text")
                        .HasColumnName("last_modified_by");

                    b.Property<string>("ProductCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("product_code");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("product_name");

                    b.Property<string>("PromoCode")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("promo_code");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer")
                        .HasColumnName("quantity");

                    b.Property<decimal>("TotalAmount")
                        .HasPrecision(15, 2)
                        .HasColumnType("numeric(15,2)")
                        .HasColumnName("total_amount");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("unit");

                    b.Property<decimal>("UnitPrice")
                        .HasPrecision(15, 2)
                        .HasColumnType("numeric(15,2)")
                        .HasColumnName("unit_price");

                    b.HasKey("Id")
                        .HasName("invoice_items_pkey");

                    b.HasIndex("InvoiceSnapshotId")
                        .HasDatabaseName("ix_invoice_items_invoice_snapshot_id");

                    b.ToTable("invoice_items", (string)null);
                });

            modelBuilder.Entity("Billing.API.Models.InvoiceSnapshot", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("AliasInfo")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("alias_info");

                    b.Property<DateTimeOffset?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("currency");

                    b.Property<Guid>("InvoiceId")
                        .HasColumnType("uuid")
                        .HasColumnName("invoice_id");

                    b.Property<DateTimeOffset?>("LastModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text")
                        .HasColumnName("last_modified_by");

                    b.Property<string>("OrderType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("order_type");

                    b.Property<decimal?>("TaxAmount")
                        .HasPrecision(15, 2)
                        .HasColumnType("numeric(15,2)")
                        .HasColumnName("tax_amount");

                    b.Property<decimal>("TotalAmount")
                        .HasPrecision(15, 2)
                        .HasColumnType("numeric(15,2)")
                        .HasColumnName("total_amount");

                    b.Property<decimal?>("TotalDiscountAmount")
                        .HasPrecision(15, 2)
                        .HasColumnType("numeric(15,2)")
                        .HasColumnName("total_discount_amount");

                    b.HasKey("Id")
                        .HasName("invoice_snapshots_pkey");

                    b.HasIndex(new[] { "InvoiceId" }, "invoice_snapshots_invoice_id_key")
                        .IsUnique()
                        .HasDatabaseName("ix_invoice_snapshots_invoice_id");

                    b.ToTable("invoice_snapshots", (string)null);
                });

            modelBuilder.Entity("Billing.API.Models.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<decimal>("Amount")
                        .HasPrecision(15, 2)
                        .HasColumnType("numeric(15,2)")
                        .HasColumnName("amount");

                    b.Property<DateTimeOffset?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("currency");

                    b.Property<Guid?>("IdempotencyKeyId")
                        .HasColumnType("uuid")
                        .HasColumnName("idempotency_key_id");

                    b.Property<Guid?>("InvoiceId")
                        .HasColumnType("uuid")
                        .HasColumnName("invoice_id");

                    b.Property<DateTimeOffset?>("LastModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text")
                        .HasColumnName("last_modified_by");

                    b.Property<string>("OrderType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("order_type");

                    b.Property<Guid?>("PaymentId")
                        .HasColumnType("uuid")
                        .HasColumnName("payment_id");

                    b.Property<string>("ProductCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("product_code");

                    b.Property<string>("PromoCode")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("promo_code");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("status")
                        .HasDefaultValueSql("'Pending'::character varying");

                    b.Property<Guid>("SubjectRef")
                        .HasColumnType("uuid")
                        .HasColumnName("subject_ref");

                    b.HasKey("Id")
                        .HasName("orders_pkey");

                    b.HasIndex("IdempotencyKeyId")
                        .HasDatabaseName("ix_orders_idempotency_key_id");

                    b.ToTable("orders", (string)null);
                });

            modelBuilder.Entity("Billing.API.Models.OutboxMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("AggregateId")
                        .HasColumnType("uuid")
                        .HasColumnName("aggregate_id");

                    b.Property<string>("AggregateType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("aggregate_type");

                    b.Property<DateTimeOffset?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<string>("EventType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("event_type");

                    b.Property<DateTimeOffset?>("LastModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text")
                        .HasColumnName("last_modified_by");

                    b.Property<DateTime>("OccurredOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("occurred_on")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Payload")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("payload");

                    b.Property<DateTime?>("ProcessedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("processed_on");

                    b.HasKey("Id")
                        .HasName("outbox_messages_pkey");

                    b.ToTable("outbox_messages", (string)null);
                });

            modelBuilder.Entity("Billing.API.Models.Invoice", b =>
                {
                    b.HasOne("Billing.API.Models.Order", "Order")
                        .WithMany("Invoices")
                        .HasForeignKey("OrderId")
                        .IsRequired()
                        .HasConstraintName("invoices_order_id_fkey");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Billing.API.Models.InvoiceItem", b =>
                {
                    b.HasOne("Billing.API.Models.InvoiceSnapshot", "InvoiceSnapshot")
                        .WithMany("InvoiceItems")
                        .HasForeignKey("InvoiceSnapshotId")
                        .IsRequired()
                        .HasConstraintName("invoice_items_invoice_snapshot_id_fkey");

                    b.Navigation("InvoiceSnapshot");
                });

            modelBuilder.Entity("Billing.API.Models.InvoiceSnapshot", b =>
                {
                    b.HasOne("Billing.API.Models.Invoice", "Invoice")
                        .WithOne("InvoiceSnapshot")
                        .HasForeignKey("Billing.API.Models.InvoiceSnapshot", "InvoiceId")
                        .IsRequired()
                        .HasConstraintName("invoice_snapshots_invoice_id_fkey");

                    b.Navigation("Invoice");
                });

            modelBuilder.Entity("Billing.API.Models.Order", b =>
                {
                    b.HasOne("Billing.API.Models.IdempotencyKey", "IdempotencyKey")
                        .WithMany("Orders")
                        .HasForeignKey("IdempotencyKeyId")
                        .HasConstraintName("orders_idempotency_key_id_fkey");

                    b.Navigation("IdempotencyKey");
                });

            modelBuilder.Entity("Billing.API.Models.IdempotencyKey", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Billing.API.Models.Invoice", b =>
                {
                    b.Navigation("InvoiceSnapshot");
                });

            modelBuilder.Entity("Billing.API.Models.InvoiceSnapshot", b =>
                {
                    b.Navigation("InvoiceItems");
                });

            modelBuilder.Entity("Billing.API.Models.Order", b =>
                {
                    b.Navigation("Invoices");
                });
#pragma warning restore 612, 618
        }
    }
}
