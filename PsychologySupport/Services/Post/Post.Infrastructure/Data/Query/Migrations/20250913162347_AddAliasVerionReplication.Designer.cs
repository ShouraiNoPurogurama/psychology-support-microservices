// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Post.Infrastructure.Data.Query;

#nullable disable

namespace Post.Infrastructure.Data.Query.Migrations
{
    [DbContext(typeof(QueryDbContext))]
    [Migration("20250913162347_AddAliasVerionReplication")]
    partial class AddAliasVerionReplication
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("query")
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Post.Application.ReadModels.AliasVersionReplica", b =>
                {
                    b.Property<Guid>("AliasId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("alias_id");

                    b.Property<Guid>("CurrentVersionId")
                        .HasColumnType("uuid")
                        .HasColumnName("current_version_id");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("label");

                    b.Property<DateTimeOffset>("LastSyncedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_synced_at");

                    b.Property<DateTimeOffset>("ValidFrom")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("valid_from");

                    b.HasKey("AliasId")
                        .HasName("pk_alias_version_replica");

                    b.ToTable("alias_version_replica", "query");
                });

            modelBuilder.Entity("Post.Application.ReadModels.EmotionTagReplica", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("display_name");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<DateTimeOffset>("LastSyncedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_synced_at");

                    b.Property<Guid?>("MediaId")
                        .HasColumnType("uuid")
                        .HasColumnName("media_id");

                    b.HasKey("Id")
                        .HasName("pk_emotion_tag_replicas");

                    b.HasIndex(new[] { "Code" }, "unq_EmotionTagReplica_Code")
                        .IsUnique()
                        .HasDatabaseName("ix_emotion_tag_replicas_code");

                    b.ToTable("emotion_tag_replicas", "query");
                });

            modelBuilder.Entity("Post.Application.ReadModels.UserOwnedTagReplica", b =>
                {
                    b.Property<Guid>("SubjectRef")
                        .HasColumnType("uuid")
                        .HasColumnName("subject_ref");

                    b.Property<Guid>("EmotionTagId")
                        .HasColumnType("uuid")
                        .HasColumnName("emotion_tag_id");

                    b.Property<DateTimeOffset>("LastSyncedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_synced_at");

                    b.HasKey("SubjectRef", "EmotionTagId")
                        .HasName("pk_user_owned_tag_replicas");

                    b.ToTable("user_owned_tag_replicas", "query");
                });
#pragma warning restore 612, 618
        }
    }
}
