// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Post.Infrastructure.Data;

#nullable disable

namespace Post.Infrastructure.Data.Migrations
{
    [DbContext(typeof(PostDbContext))]
    [Migration("20250906153733_CorrectAuditableMetadata")]
    partial class CorrectAuditableMetadata
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Post.Domain.Models.CategoryTag", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<string>("Color")
                        .HasColumnType("text")
                        .HasColumnName("color");

                    b.Property<DateTimeOffset?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("CreatedByAliasId")
                        .HasColumnType("text")
                        .HasColumnName("created_by_alias_id");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("display_name");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<DateTimeOffset?>("LastModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified");

                    b.Property<string>("LastModifiedByAliasId")
                        .HasColumnType("text")
                        .HasColumnName("last_modified_by_alias_id");

                    b.Property<int>("SortOrder")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("sort_order");

                    b.Property<string>("UnicodeCodepoint")
                        .HasColumnType("text")
                        .HasColumnName("unicode_codepoint");

                    b.HasKey("Id")
                        .HasName("category_tags_pkey");

                    b.HasIndex(new[] { "Code" }, "category_tags_code_key")
                        .IsUnique()
                        .HasDatabaseName("ix_category_tags_code");

                    b.ToTable("category_tags", (string)null);
                });

            modelBuilder.Entity("Post.Domain.Models.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("AuthorAliasId")
                        .HasColumnType("uuid")
                        .HasColumnName("author_alias_id");

                    b.Property<Guid>("AuthorAliasVersionId")
                        .HasColumnType("uuid")
                        .HasColumnName("author_alias_version_id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<DateTimeOffset?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("CreatedByAliasId")
                        .HasColumnType("text")
                        .HasColumnName("created_by_alias_id");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("DeletedByAliasId")
                        .HasColumnType("text")
                        .HasColumnName("deleted_by_alias_id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<int>("Level")
                        .HasColumnType("integer")
                        .HasColumnName("level");

                    b.Property<string>("ModerationStatus")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasColumnName("moderation_status")
                        .HasDefaultValueSql("'pending'::text");

                    b.Property<Guid?>("ParentCommentId")
                        .HasColumnType("uuid")
                        .HasColumnName("parent_comment_id");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("path");

                    b.Property<Guid>("PostId")
                        .HasColumnType("uuid")
                        .HasColumnName("post_id");

                    b.HasKey("Id")
                        .HasName("comments_pkey");

                    b.HasIndex(new[] { "PostId", "CreatedAt", "Id" }, "ix_comments_post_created")
                        .IsDescending(false, true, true)
                        .HasDatabaseName("ix_comments_post_id_created_at_id")
                        .HasFilter("((deleted_at IS NULL) AND (moderation_status = 'approved'::text))");

                    b.HasIndex(new[] { "PostId", "Path" }, "ix_comments_post_path")
                        .HasDatabaseName("ix_comments_post_id_path");

                    b.ToTable("comments", (string)null);
                });

            modelBuilder.Entity("Post.Domain.Models.EmotionTag", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<string>("Color")
                        .HasColumnType("text")
                        .HasColumnName("color");

                    b.Property<DateTimeOffset?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("CreatedByAliasId")
                        .HasColumnType("text")
                        .HasColumnName("created_by_alias_id");

                    b.Property<Guid?>("DigitalGoodId")
                        .HasColumnType("uuid")
                        .HasColumnName("digital_good_id");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("display_name");

                    b.Property<string>("Icon")
                        .HasColumnType("text")
                        .HasColumnName("icon");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<DateTimeOffset?>("LastModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified");

                    b.Property<string>("LastModifiedByAliasId")
                        .HasColumnType("text")
                        .HasColumnName("last_modified_by_alias_id");

                    b.Property<Guid?>("MediaId")
                        .HasColumnType("uuid")
                        .HasColumnName("media_id");

                    b.Property<int>("SortOrder")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("sort_order");

                    b.Property<string>("Topic")
                        .HasColumnType("text")
                        .HasColumnName("topic");

                    b.Property<string>("UnicodeCodepoint")
                        .HasColumnType("text")
                        .HasColumnName("unicode_codepoint");

                    b.HasKey("Id")
                        .HasName("emotion_tags_pkey");

                    b.HasIndex(new[] { "Code" }, "emotion_tags_code_key")
                        .IsUnique()
                        .HasDatabaseName("ix_emotion_tags_code");

                    b.ToTable("emotion_tags", (string)null);
                });

            modelBuilder.Entity("Post.Domain.Models.GiftsAttach", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<Guid>("GiftId")
                        .HasColumnType("uuid")
                        .HasColumnName("gift_id");

                    b.Property<string>("Message")
                        .HasColumnType("text")
                        .HasColumnName("message");

                    b.Property<Guid>("SenderAliasId")
                        .HasColumnType("uuid")
                        .HasColumnName("sender_alias_id");

                    b.Property<Guid>("SenderAliasVersionId")
                        .HasColumnType("uuid")
                        .HasColumnName("sender_alias_version_id");

                    b.Property<Guid>("TargetId")
                        .HasColumnType("uuid")
                        .HasColumnName("target_id");

                    b.Property<string>("TargetType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("target_type");

                    b.HasKey("Id")
                        .HasName("gifts_attach_pkey");

                    b.HasIndex(new[] { "TargetType", "TargetId", "CreatedAt" }, "ix_gifts_target")
                        .IsDescending(false, false, true)
                        .HasDatabaseName("ix_gifts_attach_target_type_target_id_created_at")
                        .HasFilter("(deleted_at IS NULL)");

                    b.ToTable("gifts_attach", (string)null);
                });

            modelBuilder.Entity("Post.Domain.Models.IdempotencyKey", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("CreatedByAliasId")
                        .HasColumnType("text")
                        .HasColumnName("created_by_alias_id");

                    b.Property<Guid>("Key")
                        .HasColumnType("uuid")
                        .HasColumnName("key");

                    b.Property<byte[]>("RequestFingerprint")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("request_fingerprint");

                    b.HasKey("Id")
                        .HasName("idempotency_keys_pkey");

                    b.HasIndex(new[] { "Key" }, "idempotency_keys_idempotency_key")
                        .IsUnique()
                        .HasDatabaseName("ix_idempotency_keys_key");

                    b.ToTable("idempotency_keys", (string)null);
                });

            modelBuilder.Entity("Post.Domain.Models.OutboxMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<DateTimeOffset?>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedByAliasId")
                        .HasColumnType("text")
                        .HasColumnName("created_by_alias_id");

                    b.Property<DateTimeOffset?>("LastModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified");

                    b.Property<string>("LastModifiedByAliasId")
                        .HasColumnType("text")
                        .HasColumnName("last_modified_by_alias_id");

                    b.Property<DateTime>("OccuredOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("occured_on");

                    b.Property<DateTime?>("ProcessedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("processed_on");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("outbox_messages_pkey");

                    b.HasIndex(new[] { "OccuredOn" }, "ix_outbox_pending")
                        .HasDatabaseName("ix_outbox_messages_occured_on")
                        .HasFilter("(processed_on IS NULL)");

                    b.HasIndex(new[] { "ProcessedOn" }, "ix_outbox_processed")
                        .HasDatabaseName("ix_outbox_messages_processed_on")
                        .HasFilter("(processed_on IS NOT NULL)");

                    b.ToTable("outbox_messages", (string)null);
                });

            modelBuilder.Entity("Post.Domain.Models.Post", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("AuthorAliasId")
                        .HasColumnType("uuid")
                        .HasColumnName("author_alias_id");

                    b.Property<Guid>("AuthorAliasVersionId")
                        .HasColumnType("uuid")
                        .HasColumnName("author_alias_version_id");

                    b.Property<int>("CommentCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("comment_count");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<DateTimeOffset?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("CreatedByAliasId")
                        .HasColumnType("text")
                        .HasColumnName("created_by_alias_id");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("DeletedByAliasId")
                        .HasColumnType("text")
                        .HasColumnName("deleted_by_alias_id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("ModerationPolicyVersion")
                        .HasColumnType("text")
                        .HasColumnName("moderation_policy_version");

                    b.PrimitiveCollection<List<string>>("ModerationReasons")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text[]")
                        .HasColumnName("moderation_reasons")
                        .HasDefaultValueSql("'{}'::text[]");

                    b.Property<string>("ModerationStatus")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasColumnName("moderation_status")
                        .HasDefaultValueSql("'pending'::text");

                    b.Property<int>("ReactionCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("reaction_count");

                    b.Property<string>("Title")
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<string>("Visibility")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("visibility");

                    b.HasKey("Id")
                        .HasName("posts_pkey");

                    b.HasIndex(new[] { "AuthorAliasId", "CreatedAt" }, "ix_posts_author")
                        .IsDescending(false, true)
                        .HasDatabaseName("ix_posts_author_alias_id_created_at")
                        .HasFilter("(deleted_at IS NULL)");

                    b.HasIndex(new[] { "CreatedAt", "Id" }, "ix_posts_list")
                        .IsDescending()
                        .HasDatabaseName("ix_posts_created_at_id")
                        .HasFilter("((deleted_at IS NULL) AND (moderation_status = 'approved'::text))");

                    b.ToTable("posts", (string)null);
                });

            modelBuilder.Entity("Post.Domain.Models.PostCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("CategoryTagId")
                        .HasColumnType("uuid")
                        .HasColumnName("category_tag_id");

                    b.Property<DateTimeOffset?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("CreatedByAliasId")
                        .HasColumnType("text")
                        .HasColumnName("created_by_alias_id");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("DeletedByAliasId")
                        .HasColumnType("text")
                        .HasColumnName("deleted_by_alias_id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<Guid>("PostId")
                        .HasColumnType("uuid")
                        .HasColumnName("post_id");

                    b.HasKey("Id")
                        .HasName("post_categories_pkey");

                    b.HasIndex(new[] { "PostId" }, "ix_post_categories_post")
                        .HasDatabaseName("ix_post_categories_post_id")
                        .HasFilter("(deleted_at IS NULL)");

                    b.HasIndex(new[] { "CategoryTagId" }, "ix_post_categories_tag")
                        .HasDatabaseName("ix_post_categories_category_tag_id")
                        .HasFilter("(deleted_at IS NULL)");

                    b.HasIndex(new[] { "PostId", "CategoryTagId" }, "ux_post_categories_unique")
                        .IsUnique()
                        .HasDatabaseName("ix_post_categories_post_id_category_tag_id")
                        .HasFilter("(deleted_at IS NULL)");

                    b.ToTable("post_categories", (string)null);
                });

            modelBuilder.Entity("Post.Domain.Models.PostCounterDelta", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<short>("Delta")
                        .HasColumnType("smallint")
                        .HasColumnName("delta");

                    b.Property<string>("Kind")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("kind");

                    b.Property<DateTime>("OccuredAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("occured_at")
                        .HasDefaultValueSql("now()");

                    b.Property<Guid>("PostId")
                        .HasColumnType("uuid")
                        .HasColumnName("post_id");

                    b.Property<bool>("Processed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("processed");

                    b.HasKey("Id")
                        .HasName("post_counter_deltas_pkey");

                    b.HasIndex(new[] { "Processed", "OccuredAt" }, "ix_counter_deltas_unprocessed")
                        .HasDatabaseName("ix_post_counter_deltas_processed_occured_at");

                    b.ToTable("post_counter_deltas", (string)null);
                });

            modelBuilder.Entity("Post.Domain.Models.PostEmotion", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("CreatedByAliasId")
                        .HasColumnType("text")
                        .HasColumnName("created_by_alias_id");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("DeletedByAliasId")
                        .HasColumnType("text")
                        .HasColumnName("deleted_by_alias_id");

                    b.Property<Guid>("EmotionTagId")
                        .HasColumnType("uuid")
                        .HasColumnName("emotion_tag_id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<Guid>("PostId")
                        .HasColumnType("uuid")
                        .HasColumnName("post_id");

                    b.HasKey("Id")
                        .HasName("post_emotions_pkey");

                    b.HasIndex(new[] { "PostId" }, "ix_post_emotions_post")
                        .HasDatabaseName("ix_post_emotions_post_id")
                        .HasFilter("(deleted_at IS NULL)");

                    b.HasIndex(new[] { "EmotionTagId" }, "ix_post_emotions_tag")
                        .HasDatabaseName("ix_post_emotions_emotion_tag_id")
                        .HasFilter("(deleted_at IS NULL)");

                    b.HasIndex(new[] { "PostId", "EmotionTagId" }, "ux_post_emotions_unique")
                        .IsUnique()
                        .HasDatabaseName("ix_post_emotions_post_id_emotion_tag_id")
                        .HasFilter("(deleted_at IS NULL)");

                    b.ToTable("post_emotions", (string)null);
                });

            modelBuilder.Entity("Post.Domain.Models.PostMedia", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("CreatedByAliasId")
                        .HasColumnType("text")
                        .HasColumnName("created_by_alias_id");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("DeletedByAliasId")
                        .HasColumnType("text")
                        .HasColumnName("deleted_by_alias_id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<Guid>("MediaId")
                        .HasColumnType("uuid")
                        .HasColumnName("media_id");

                    b.Property<int?>("Position")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("position");

                    b.Property<Guid>("PostId")
                        .HasColumnType("uuid")
                        .HasColumnName("post_id");

                    b.HasKey("Id")
                        .HasName("post_media_pkey");

                    b.HasIndex(new[] { "PostId", "Position" }, "ix_post_media_post")
                        .HasDatabaseName("ix_post_media_post_id_position");

                    b.ToTable("post_media", (string)null);
                });

            modelBuilder.Entity("Post.Domain.Models.Reaction", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("AuthorAliasId")
                        .HasColumnType("uuid")
                        .HasColumnName("author_alias_id");

                    b.Property<Guid>("AuthorAliasVersionId")
                        .HasColumnType("uuid")
                        .HasColumnName("author_alias_version_id");

                    b.Property<DateTimeOffset?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("CreatedByAliasId")
                        .HasColumnType("text")
                        .HasColumnName("created_by_alias_id");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("DeletedByAliasId")
                        .HasColumnType("text")
                        .HasColumnName("deleted_by_alias_id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("ReactionType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("reaction_type");

                    b.Property<Guid>("TargetId")
                        .HasColumnType("uuid")
                        .HasColumnName("target_id");

                    b.Property<string>("TargetType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("target_type");

                    b.HasKey("Id")
                        .HasName("reactions_pkey");

                    b.HasIndex(new[] { "TargetType", "TargetId", "CreatedAt" }, "ix_reactions_target")
                        .IsDescending(false, false, true)
                        .HasDatabaseName("ix_reactions_target_type_target_id_created_at")
                        .HasFilter("(deleted_at IS NULL)");

                    b.HasIndex(new[] { "TargetType", "TargetId", "AuthorAliasId", "ReactionType" }, "ux_reactions_unique")
                        .IsUnique()
                        .HasDatabaseName("ix_reactions_target_type_target_id_author_alias_id_reaction_ty")
                        .HasFilter("(deleted_at IS NULL)");

                    b.ToTable("reactions", (string)null);
                });
#pragma warning restore 612, 618
        }
    }
}
