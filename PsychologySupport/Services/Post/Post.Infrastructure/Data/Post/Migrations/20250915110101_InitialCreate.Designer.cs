// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Post.Infrastructure.Data.Post;

#nullable disable

namespace Post.Infrastructure.Data.Post.Migrations
{
    [DbContext(typeof(PostDbContext))]
    [Migration("20250915110101_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("post")
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Post.Domain.Aggregates.CommentAggregate.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset?>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedByAliasId")
                        .HasColumnType("text")
                        .HasColumnName("created_by_alias_id");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("DeletedByAliasId")
                        .HasColumnType("text")
                        .HasColumnName("deleted_by_alias_id");

                    b.Property<DateTime>("EditedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("edited_at");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<DateTimeOffset?>("LastModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified");

                    b.Property<string>("LastModifiedByAliasId")
                        .HasColumnType("text")
                        .HasColumnName("last_modified_by_alias_id");

                    b.Property<Guid>("PostId")
                        .HasColumnType("uuid")
                        .HasColumnName("post_id");

                    b.Property<int>("ReactionCount")
                        .HasColumnType("integer")
                        .HasColumnName("reaction_count");

                    b.Property<int>("ReplyCount")
                        .HasColumnType("integer")
                        .HasColumnName("reply_count");

                    b.HasKey("Id")
                        .HasName("pk_comments");

                    b.ToTable("comments", "post");
                });

            modelBuilder.Entity("Post.Domain.Aggregates.PostAggregate.Post", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset?>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedByAliasId")
                        .HasColumnType("text")
                        .HasColumnName("created_by_alias_id");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("DeletedByAliasId")
                        .HasColumnType("text")
                        .HasColumnName("deleted_by_alias_id");

                    b.Property<DateTime?>("EditedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("edited_at");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<DateTimeOffset?>("LastModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified");

                    b.Property<string>("LastModifiedByAliasId")
                        .HasColumnType("text")
                        .HasColumnName("last_modified_by_alias_id");

                    b.Property<DateTime>("PublishedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("published_at");

                    b.Property<string>("Visibility")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("visibility");

                    b.HasKey("Id")
                        .HasName("pk_posts");

                    b.ToTable("posts", "post");
                });

            modelBuilder.Entity("Post.Domain.Aggregates.PostAggregate.PostCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("AssignedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("assigned_at");

                    b.Property<Guid>("CategoryTagId")
                        .HasColumnType("uuid")
                        .HasColumnName("category_tag_id");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("DeletedByAliasId")
                        .HasColumnType("text")
                        .HasColumnName("deleted_by_alias_id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<Guid>("PostId")
                        .HasColumnType("uuid")
                        .HasColumnName("post_id");

                    b.HasKey("Id")
                        .HasName("pk_post_categories");

                    b.HasIndex("PostId")
                        .HasDatabaseName("ix_post_categories_post_id");

                    b.ToTable("post_categories", "post");
                });

            modelBuilder.Entity("Post.Domain.Aggregates.PostAggregate.PostEmotion", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("AssignedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("assigned_at");

                    b.Property<double>("Confidence")
                        .HasPrecision(3, 2)
                        .HasColumnType("double precision")
                        .HasColumnName("confidence");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("DeletedByAliasId")
                        .HasColumnType("text")
                        .HasColumnName("deleted_by_alias_id");

                    b.Property<Guid>("EmotionTagId")
                        .HasColumnType("uuid")
                        .HasColumnName("emotion_tag_id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<Guid>("PostId")
                        .HasColumnType("uuid")
                        .HasColumnName("post_id");

                    b.HasKey("Id")
                        .HasName("pk_post_emotions");

                    b.HasIndex("PostId")
                        .HasDatabaseName("ix_post_emotions_post_id");

                    b.ToTable("post_emotions", "post");
                });

            modelBuilder.Entity("Post.Domain.Aggregates.PostAggregate.PostMedia", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("AltText")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("alt_text");

                    b.Property<string>("Caption")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("caption");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("DeletedByAliasId")
                        .HasColumnType("text")
                        .HasColumnName("deleted_by_alias_id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<Guid>("MediaId")
                        .HasColumnType("uuid")
                        .HasColumnName("media_id");

                    b.Property<int?>("Position")
                        .HasColumnType("integer")
                        .HasColumnName("position");

                    b.Property<Guid>("PostId")
                        .HasColumnType("uuid")
                        .HasColumnName("post_id");

                    b.HasKey("Id")
                        .HasName("pk_post_media");

                    b.HasIndex("PostId")
                        .HasDatabaseName("ix_post_media_post_id");

                    b.ToTable("post_media", "post");
                });

            modelBuilder.Entity("Post.Domain.Aggregates.ReactionAggregate.Reaction", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset?>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedByAliasId")
                        .HasColumnType("text")
                        .HasColumnName("created_by_alias_id");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("DeletedByAliasId")
                        .HasColumnType("text")
                        .HasColumnName("deleted_by_alias_id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<DateTimeOffset?>("LastModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified");

                    b.Property<string>("LastModifiedByAliasId")
                        .HasColumnType("text")
                        .HasColumnName("last_modified_by_alias_id");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_at");

                    b.Property<DateTime>("ReactedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("reacted_at");

                    b.HasKey("Id")
                        .HasName("pk_reactions");

                    b.ToTable("reactions", "post");
                });

            modelBuilder.Entity("Post.Domain.Aggregates.CommentAggregate.Comment", b =>
                {
                    b.OwnsOne("Post.Domain.Aggregates.PostAggregate.ValueObjects.AuthorInfo", "Author", b1 =>
                        {
                            b1.Property<Guid>("CommentId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<Guid>("AliasId")
                                .HasColumnType("uuid")
                                .HasColumnName("author_alias_id");

                            b1.Property<Guid?>("AliasVersionId")
                                .HasColumnType("uuid")
                                .HasColumnName("author_alias_version_id");

                            b1.HasKey("CommentId");

                            b1.ToTable("comments", "post");

                            b1.WithOwner()
                                .HasForeignKey("CommentId")
                                .HasConstraintName("fk_comments_comments_id");
                        });

                    b.OwnsOne("Post.Domain.Aggregates.PostAggregate.ValueObjects.ModerationInfo", "Moderation", b1 =>
                        {
                            b1.Property<Guid>("CommentId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<DateTimeOffset?>("ModeratedAt")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("moderated_at");

                            b1.Property<string>("PolicyVersion")
                                .HasColumnType("text")
                                .HasColumnName("policy_version");

                            b1.Property<string>("Reasons")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("moderation_reasons");

                            b1.Property<string>("Status")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("moderation_status");

                            b1.HasKey("CommentId");

                            b1.ToTable("comments", "post");

                            b1.WithOwner()
                                .HasForeignKey("CommentId")
                                .HasConstraintName("fk_comments_comments_id");
                        });

                    b.OwnsOne("Post.Domain.Aggregates.CommentAggregate.ValueObjects.CommentContent", "Content", b1 =>
                        {
                            b1.Property<Guid>("CommentId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<int>("CharacterCount")
                                .HasColumnType("integer")
                                .HasColumnName("character_count");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(2000)
                                .HasColumnType("character varying(2000)")
                                .HasColumnName("content");

                            b1.Property<int>("WordCount")
                                .HasColumnType("integer")
                                .HasColumnName("word_count");

                            b1.HasKey("CommentId");

                            b1.ToTable("comments", "post");

                            b1.WithOwner()
                                .HasForeignKey("CommentId")
                                .HasConstraintName("fk_comments_comments_id");
                        });

                    b.OwnsOne("Post.Domain.Aggregates.CommentAggregate.ValueObjects.CommentHierarchy", "Hierarchy", b1 =>
                        {
                            b1.Property<Guid>("CommentId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<int>("Level")
                                .HasColumnType("integer")
                                .HasColumnName("level");

                            b1.Property<Guid?>("ParentCommentId")
                                .HasColumnType("uuid")
                                .HasColumnName("parent_comment_id");

                            b1.Property<string>("Path")
                                .IsRequired()
                                .HasMaxLength(1000)
                                .HasColumnType("character varying(1000)")
                                .HasColumnName("path");

                            b1.HasKey("CommentId");

                            b1.ToTable("comments", "post");

                            b1.WithOwner()
                                .HasForeignKey("CommentId")
                                .HasConstraintName("fk_comments_comments_id");
                        });

                    b.Navigation("Author")
                        .IsRequired();

                    b.Navigation("Content")
                        .IsRequired();

                    b.Navigation("Hierarchy")
                        .IsRequired();

                    b.Navigation("Moderation")
                        .IsRequired();
                });

            modelBuilder.Entity("Post.Domain.Aggregates.PostAggregate.Post", b =>
                {
                    b.OwnsOne("Post.Domain.Aggregates.PostAggregate.ValueObjects.AuthorInfo", "Author", b1 =>
                        {
                            b1.Property<Guid>("PostId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<Guid>("AliasId")
                                .HasColumnType("uuid")
                                .HasColumnName("author_alias_id");

                            b1.Property<Guid?>("AliasVersionId")
                                .HasColumnType("uuid")
                                .HasColumnName("author_alias_version_id");

                            b1.HasKey("PostId");

                            b1.ToTable("posts", "post");

                            b1.WithOwner()
                                .HasForeignKey("PostId")
                                .HasConstraintName("fk_posts_posts_id");
                        });

                    b.OwnsOne("Post.Domain.Aggregates.PostAggregate.ValueObjects.ModerationInfo", "Moderation", b1 =>
                        {
                            b1.Property<Guid>("PostId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<DateTimeOffset?>("ModeratedAt")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("moderated_at");

                            b1.Property<string>("PolicyVersion")
                                .HasColumnType("text")
                                .HasColumnName("policy_version");

                            b1.Property<string>("Reasons")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("moderation_reasons");

                            b1.Property<string>("Status")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("moderation_status");

                            b1.HasKey("PostId");

                            b1.ToTable("posts", "post");

                            b1.WithOwner()
                                .HasForeignKey("PostId")
                                .HasConstraintName("fk_posts_posts_id");
                        });

                    b.OwnsOne("Post.Domain.Aggregates.PostAggregate.ValueObjects.PostContent", "Content", b1 =>
                        {
                            b1.Property<Guid>("PostId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<int>("CharacterCount")
                                .HasColumnType("integer")
                                .HasColumnName("character_count");

                            b1.Property<string>("Title")
                                .HasMaxLength(200)
                                .HasColumnType("character varying(200)")
                                .HasColumnName("title");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(10000)
                                .HasColumnType("character varying(10000)")
                                .HasColumnName("content");

                            b1.Property<int>("WordCount")
                                .HasColumnType("integer")
                                .HasColumnName("word_count");

                            b1.HasKey("PostId");

                            b1.ToTable("posts", "post");

                            b1.WithOwner()
                                .HasForeignKey("PostId")
                                .HasConstraintName("fk_posts_posts_id");
                        });

                    b.OwnsOne("Post.Domain.Aggregates.PostAggregate.ValueObjects.PostMetrics", "Metrics", b1 =>
                        {
                            b1.Property<Guid>("PostId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<int>("CommentCount")
                                .HasColumnType("integer")
                                .HasColumnName("comment_count");

                            b1.Property<int>("ReactionCount")
                                .HasColumnType("integer")
                                .HasColumnName("reaction_count");

                            b1.Property<int>("ShareCount")
                                .HasColumnType("integer")
                                .HasColumnName("share_count");

                            b1.Property<int>("ViewCount")
                                .HasColumnType("integer")
                                .HasColumnName("view_count");

                            b1.HasKey("PostId");

                            b1.ToTable("posts", "post");

                            b1.WithOwner()
                                .HasForeignKey("PostId")
                                .HasConstraintName("fk_posts_posts_id");
                        });

                    b.Navigation("Author")
                        .IsRequired();

                    b.Navigation("Content")
                        .IsRequired();

                    b.Navigation("Metrics")
                        .IsRequired();

                    b.Navigation("Moderation")
                        .IsRequired();
                });

            modelBuilder.Entity("Post.Domain.Aggregates.PostAggregate.PostCategory", b =>
                {
                    b.HasOne("Post.Domain.Aggregates.PostAggregate.Post", null)
                        .WithMany("Categories")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_post_categories_posts_post_id");
                });

            modelBuilder.Entity("Post.Domain.Aggregates.PostAggregate.PostEmotion", b =>
                {
                    b.HasOne("Post.Domain.Aggregates.PostAggregate.Post", null)
                        .WithMany("Emotions")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_post_emotions_posts_post_id");
                });

            modelBuilder.Entity("Post.Domain.Aggregates.PostAggregate.PostMedia", b =>
                {
                    b.HasOne("Post.Domain.Aggregates.PostAggregate.Post", null)
                        .WithMany("Media")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_post_media_posts_post_id");
                });

            modelBuilder.Entity("Post.Domain.Aggregates.ReactionAggregate.Reaction", b =>
                {
                    b.OwnsOne("Post.Domain.Aggregates.PostAggregate.ValueObjects.AuthorInfo", "Author", b1 =>
                        {
                            b1.Property<Guid>("ReactionId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<Guid>("AliasId")
                                .HasColumnType("uuid")
                                .HasColumnName("author_alias_id");

                            b1.Property<Guid?>("AliasVersionId")
                                .HasColumnType("uuid")
                                .HasColumnName("author_alias_version_id");

                            b1.HasKey("ReactionId");

                            b1.ToTable("reactions", "post");

                            b1.WithOwner()
                                .HasForeignKey("ReactionId")
                                .HasConstraintName("fk_reactions_reactions_id");
                        });

                    b.OwnsOne("Post.Domain.Aggregates.ReactionAggregate.ValueObjects.ReactionTarget", "Target", b1 =>
                        {
                            b1.Property<Guid>("ReactionId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<Guid>("TargetId")
                                .HasColumnType("uuid")
                                .HasColumnName("target_id");

                            b1.Property<string>("TargetType")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)")
                                .HasColumnName("target_type");

                            b1.HasKey("ReactionId");

                            b1.ToTable("reactions", "post");

                            b1.WithOwner()
                                .HasForeignKey("ReactionId")
                                .HasConstraintName("fk_reactions_reactions_id");
                        });

                    b.OwnsOne("Post.Domain.Aggregates.ReactionAggregate.ValueObjects.ReactionType", "Type", b1 =>
                        {
                            b1.Property<Guid>("ReactionId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("Code")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)")
                                .HasColumnName("reaction_code");

                            b1.Property<string>("Emoji")
                                .HasMaxLength(10)
                                .HasColumnType("character varying(10)")
                                .HasColumnName("reaction_emoji");

                            b1.Property<int>("Weight")
                                .HasColumnType("integer")
                                .HasColumnName("reaction_weight");

                            b1.HasKey("ReactionId");

                            b1.ToTable("reactions", "post");

                            b1.WithOwner()
                                .HasForeignKey("ReactionId")
                                .HasConstraintName("fk_reactions_reactions_id");
                        });

                    b.Navigation("Author")
                        .IsRequired();

                    b.Navigation("Target")
                        .IsRequired();

                    b.Navigation("Type")
                        .IsRequired();
                });

            modelBuilder.Entity("Post.Domain.Aggregates.PostAggregate.Post", b =>
                {
                    b.Navigation("Categories");

                    b.Navigation("Emotions");

                    b.Navigation("Media");
                });
#pragma warning restore 612, 618
        }
    }
}
