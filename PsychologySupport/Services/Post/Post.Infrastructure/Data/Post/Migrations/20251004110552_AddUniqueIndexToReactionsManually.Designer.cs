// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Post.Infrastructure.Data.Post;

#nullable disable

namespace Post.Infrastructure.Data.Post.Migrations
{
    [DbContext(typeof(PostDbContext))]
    [Migration("20251004110552_AddUniqueIndexToReactionsManually")]
    partial class AddUniqueIndexToReactionsManually
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("post")
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Post.Domain.Aggregates.CategoryTags.CategoryTag", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<string>("Color")
                        .HasColumnType("text")
                        .HasColumnName("color");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid>("CreatedByAliasId")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by_alias_id");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("display_name");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<DateTimeOffset?>("LastModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified");

                    b.Property<Guid?>("LastModifiedByAliasId")
                        .HasColumnType("uuid")
                        .HasColumnName("last_modified_by_alias_id");

                    b.Property<int>("SortOrder")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("sort_order");

                    b.Property<string>("UnicodeCodepoint")
                        .HasColumnType("text")
                        .HasColumnName("unicode_codepoint");

                    b.HasKey("Id")
                        .HasName("pk_category_tags");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasDatabaseName("ux_category_tags_code");

                    b.ToTable("category_tags", "post");
                });

            modelBuilder.Entity("Post.Domain.Aggregates.Comments.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid>("CreatedByAliasId")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by_alias_id");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("DeletedByAliasId")
                        .HasColumnType("text")
                        .HasColumnName("deleted_by_alias_id");

                    b.Property<DateTimeOffset>("EditedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("edited_at");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<DateTimeOffset?>("LastModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified");

                    b.Property<Guid?>("LastModifiedByAliasId")
                        .HasColumnType("uuid")
                        .HasColumnName("last_modified_by_alias_id");

                    b.Property<Guid>("PostId")
                        .HasColumnType("uuid")
                        .HasColumnName("post_id");

                    b.Property<int>("ReactionCount")
                        .HasColumnType("integer")
                        .HasColumnName("reaction_count");

                    b.Property<int>("ReplyCount")
                        .HasColumnType("integer")
                        .HasColumnName("reply_count");

                    b.HasKey("Id")
                        .HasName("pk_comments");

                    b.HasIndex("PostId", "CreatedAt")
                        .HasDatabaseName("ix_comments_post_created");

                    b.ToTable("comments", "post");
                });

            modelBuilder.Entity("Post.Domain.Aggregates.Gifts.GiftAttach", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<long>("Amount")
                        .HasColumnType("bigint")
                        .HasColumnName("amount");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid>("CreatedByAliasId")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by_alias_id");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("DeletedByAliasId")
                        .HasColumnType("text")
                        .HasColumnName("deleted_by_alias_id");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<DateTimeOffset?>("LastModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified");

                    b.Property<Guid?>("LastModifiedByAliasId")
                        .HasColumnType("uuid")
                        .HasColumnName("last_modified_by_alias_id");

                    b.Property<string>("Message")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("message");

                    b.Property<DateTimeOffset>("SentAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("sent_at");

                    b.HasKey("Id")
                        .HasName("pk_gift_attaches");

                    b.ToTable("gift_attaches", "post");
                });

            modelBuilder.Entity("Post.Domain.Aggregates.Idempotency.IdempotencyKey", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<Guid>("CreatedByAliasId")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by_alias_id");

                    b.Property<DateTimeOffset?>("ExpiresAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expires_at");

                    b.Property<Guid>("Key")
                        .HasColumnType("uuid")
                        .HasColumnName("key");

                    b.Property<string>("RequestHash")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("request_hash");

                    b.Property<string>("ResponsePayload")
                        .HasColumnType("text")
                        .HasColumnName("response_payload");

                    b.HasKey("Id")
                        .HasName("idempotency_keys_pkey");

                    b.HasIndex(new[] { "Key" }, "idempotency_keys_idempotency_key")
                        .IsUnique()
                        .HasDatabaseName("ix_idempotency_keys_key");

                    b.ToTable("idempotency_keys", "post");
                });

            modelBuilder.Entity("Post.Domain.Aggregates.OutboxMessages.OutboxMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<DateTimeOffset>("OccurredOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("occurred_on");

                    b.Property<DateTimeOffset?>("ProcessedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("processed_on");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("outbox_messages_pkey");

                    b.HasIndex(new[] { "OccurredOn" }, "ix_outbox_pending")
                        .HasDatabaseName("ix_outbox_messages_occurred_on")
                        .HasFilter("(processed_on IS NULL)");

                    b.HasIndex(new[] { "ProcessedOn" }, "ix_outbox_processed")
                        .HasDatabaseName("ix_outbox_messages_processed_on")
                        .HasFilter("(processed_on IS NOT NULL)");

                    b.ToTable("outbox_messages", "post");
                });

            modelBuilder.Entity("Post.Domain.Aggregates.Posts.Post", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid>("CreatedByAliasId")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by_alias_id");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("DeletedByAliasId")
                        .HasColumnType("text")
                        .HasColumnName("deleted_by_alias_id");

                    b.Property<DateTimeOffset?>("EditedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("edited_at");

                    b.Property<bool>("IsAbandonmentEventEmitted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_abandonment_event_emitted");

                    b.Property<bool>("IsCommentsLocked")
                        .HasColumnType("boolean")
                        .HasColumnName("is_comments_locked");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<DateTimeOffset?>("LastModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified");

                    b.Property<Guid?>("LastModifiedByAliasId")
                        .HasColumnType("uuid")
                        .HasColumnName("last_modified_by_alias_id");

                    b.Property<DateTimeOffset>("PublishedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("published_at");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("Creating")
                        .HasColumnName("status");

                    b.Property<string>("Visibility")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("Draft")
                        .HasColumnName("visibility");

                    b.HasKey("Id")
                        .HasName("pk_posts");

                    b.HasIndex("Visibility", "CreatedAt")
                        .HasDatabaseName("ix_posts_feed_vis_created");

                    b.ToTable("posts", "post");
                });

            modelBuilder.Entity("Post.Domain.Aggregates.Posts.PostCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("AssignedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("assigned_at");

                    b.Property<Guid>("CategoryTagId")
                        .HasColumnType("uuid")
                        .HasColumnName("category_tag_id");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("DeletedByAliasId")
                        .HasColumnType("text")
                        .HasColumnName("deleted_by_alias_id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<Guid>("PostId")
                        .HasColumnType("uuid")
                        .HasColumnName("post_id");

                    b.HasKey("Id")
                        .HasName("pk_post_categories");

                    b.HasIndex("CategoryTagId")
                        .HasDatabaseName("ix_post_categories_category_tag_id");

                    b.HasIndex("PostId")
                        .HasDatabaseName("ix_post_categories_post_id");

                    b.ToTable("post_categories", "post");
                });

            modelBuilder.Entity("Post.Domain.Aggregates.Posts.PostCounterDelta", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("CounterType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("counter_type");

                    b.Property<short>("Delta")
                        .HasColumnType("smallint")
                        .HasColumnName("delta");

                    b.Property<bool>("IsProcessed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_processed");

                    b.Property<DateTimeOffset>("OccurredAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("occurred_at");

                    b.Property<Guid>("PostId")
                        .HasColumnType("uuid")
                        .HasColumnName("post_id");

                    b.HasKey("Id")
                        .HasName("pk_post_counter_delta");

                    b.HasIndex("OccurredAt")
                        .HasDatabaseName("ix_pcd_pending_time")
                        .HasFilter("(is_processed = false)");

                    b.HasIndex("PostId", "CounterType", "OccurredAt")
                        .HasDatabaseName("ix_pcd_post_kind_time");

                    b.ToTable("post_counter_delta", "post");
                });

            modelBuilder.Entity("Post.Domain.Aggregates.Posts.PostEmotion", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("AssignedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("assigned_at");

                    b.Property<double>("Confidence")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(3, 2)
                        .HasColumnType("double precision")
                        .HasDefaultValue(1.0)
                        .HasColumnName("confidence");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("DeletedByAliasId")
                        .HasColumnType("text")
                        .HasColumnName("deleted_by_alias_id");

                    b.Property<Guid>("EmotionTagId")
                        .HasColumnType("uuid")
                        .HasColumnName("emotion_tag_id");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<Guid>("PostId")
                        .HasColumnType("uuid")
                        .HasColumnName("post_id");

                    b.HasKey("Id")
                        .HasName("pk_post_emotions");

                    b.HasIndex("PostId")
                        .HasDatabaseName("ix_post_emotions_post_id");

                    b.ToTable("post_emotions", "post");
                });

            modelBuilder.Entity("Post.Domain.Aggregates.Posts.PostMedia", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("AltText")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("alt_text");

                    b.Property<string>("Caption")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("caption");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("DeletedByAliasId")
                        .HasColumnType("text")
                        .HasColumnName("deleted_by_alias_id");

                    b.Property<bool>("IsCover")
                        .HasColumnType("boolean")
                        .HasColumnName("is_cover");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<Guid>("MediaId")
                        .HasColumnType("uuid")
                        .HasColumnName("media_id");

                    b.Property<string>("MediaUrl")
                        .HasColumnType("text")
                        .HasColumnName("media_url");

                    b.Property<int?>("Position")
                        .HasColumnType("integer")
                        .HasColumnName("position");

                    b.Property<Guid>("PostId")
                        .HasColumnType("uuid")
                        .HasColumnName("post_id");

                    b.HasKey("Id")
                        .HasName("pk_post_media");

                    b.HasIndex("PostId")
                        .HasDatabaseName("ix_post_media_post_id");

                    b.ToTable("post_media", "post");
                });

            modelBuilder.Entity("Post.Domain.Aggregates.Reaction.Reaction", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid>("CreatedByAliasId")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by_alias_id");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("DeletedByAliasId")
                        .HasColumnType("text")
                        .HasColumnName("deleted_by_alias_id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<DateTimeOffset?>("LastModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified");

                    b.Property<Guid?>("LastModifiedByAliasId")
                        .HasColumnType("uuid")
                        .HasColumnName("last_modified_by_alias_id");

                    b.Property<DateTimeOffset?>("ModifiedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_at");

                    b.Property<DateTimeOffset>("ReactedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("reacted_at");

                    b.HasKey("Id")
                        .HasName("pk_reactions");

                    b.ToTable("reactions", "post");
                });

            modelBuilder.Entity("Post.Domain.Aggregates.Comments.Comment", b =>
                {
                    b.OwnsOne("Post.Domain.Aggregates.Posts.ValueObjects.AuthorInfo", "Author", b1 =>
                        {
                            b1.Property<Guid>("CommentId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<Guid>("AliasId")
                                .HasColumnType("uuid")
                                .HasColumnName("author_alias_id");

                            b1.Property<Guid>("AliasVersionId")
                                .HasColumnType("uuid")
                                .HasColumnName("author_alias_version_id");

                            b1.HasKey("CommentId");

                            b1.ToTable("comments", "post");

                            b1.WithOwner()
                                .HasForeignKey("CommentId")
                                .HasConstraintName("fk_comments_comments_id");
                        });

                    b.OwnsOne("Post.Domain.Aggregates.Posts.ValueObjects.ModerationInfo", "Moderation", b1 =>
                        {
                            b1.Property<Guid>("CommentId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<DateTimeOffset?>("ModeratedAt")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("moderated_at");

                            b1.Property<string>("PolicyVersion")
                                .HasColumnType("text")
                                .HasColumnName("policy_version");

                            b1.Property<string>("Reasons")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("moderation_reasons");

                            b1.Property<string>("Status")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("moderation_status");

                            b1.HasKey("CommentId");

                            b1.ToTable("comments", "post");

                            b1.WithOwner()
                                .HasForeignKey("CommentId")
                                .HasConstraintName("fk_comments_comments_id");
                        });

                    b.OwnsOne("Post.Domain.Aggregates.Comments.ValueObjects.CommentContent", "Content", b1 =>
                        {
                            b1.Property<Guid>("CommentId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<int>("CharacterCount")
                                .HasColumnType("integer")
                                .HasColumnName("character_count");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(2000)
                                .HasColumnType("character varying(2000)")
                                .HasColumnName("content");

                            b1.Property<int>("WordCount")
                                .HasColumnType("integer")
                                .HasColumnName("word_count");

                            b1.HasKey("CommentId");

                            b1.ToTable("comments", "post");

                            b1.WithOwner()
                                .HasForeignKey("CommentId")
                                .HasConstraintName("fk_comments_comments_id");
                        });

                    b.OwnsOne("Post.Domain.Aggregates.Comments.ValueObjects.CommentHierarchy", "Hierarchy", b1 =>
                        {
                            b1.Property<Guid>("CommentId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<int>("Level")
                                .HasColumnType("integer")
                                .HasColumnName("level");

                            b1.Property<Guid?>("ParentCommentId")
                                .HasColumnType("uuid")
                                .HasColumnName("parent_comment_id");

                            b1.Property<string>("Path")
                                .IsRequired()
                                .HasMaxLength(1000)
                                .HasColumnType("character varying(1000)")
                                .HasColumnName("path");

                            b1.HasKey("CommentId");

                            b1.ToTable("comments", "post");

                            b1.WithOwner()
                                .HasForeignKey("CommentId")
                                .HasConstraintName("fk_comments_comments_id");
                        });

                    b.Navigation("Author")
                        .IsRequired();

                    b.Navigation("Content")
                        .IsRequired();

                    b.Navigation("Hierarchy")
                        .IsRequired();

                    b.Navigation("Moderation")
                        .IsRequired();
                });

            modelBuilder.Entity("Post.Domain.Aggregates.Gifts.GiftAttach", b =>
                {
                    b.OwnsOne("Post.Domain.Aggregates.Posts.ValueObjects.AuthorInfo", "Sender", b1 =>
                        {
                            b1.Property<Guid>("GiftAttachId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<Guid>("AliasId")
                                .HasColumnType("uuid")
                                .HasColumnName("sender_alias_id");

                            b1.Property<Guid>("AliasVersionId")
                                .HasColumnType("uuid")
                                .HasColumnName("sender_alias_version_id");

                            b1.HasKey("GiftAttachId");

                            b1.ToTable("gift_attaches", "post");

                            b1.WithOwner()
                                .HasForeignKey("GiftAttachId")
                                .HasConstraintName("fk_gift_attaches_gift_attaches_id");
                        });

                    b.OwnsOne("Post.Domain.Aggregates.Gifts.ValueObjects.GiftInfo", "Info", b1 =>
                        {
                            b1.Property<Guid>("GiftAttachId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<Guid>("GiftId")
                                .HasColumnType("uuid")
                                .HasColumnName("gift_id");

                            b1.HasKey("GiftAttachId");

                            b1.ToTable("gift_attaches", "post");

                            b1.WithOwner()
                                .HasForeignKey("GiftAttachId")
                                .HasConstraintName("fk_gift_attaches_gift_attaches_id");
                        });

                    b.OwnsOne("Post.Domain.Aggregates.Gifts.ValueObjects.GiftTarget", "Target", b1 =>
                        {
                            b1.Property<Guid>("GiftAttachId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<Guid>("TargetId")
                                .HasColumnType("uuid")
                                .HasColumnName("target_id");

                            b1.Property<string>("TargetType")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)")
                                .HasColumnName("target_type");

                            b1.HasKey("GiftAttachId");

                            b1.ToTable("gift_attaches", "post");

                            b1.WithOwner()
                                .HasForeignKey("GiftAttachId")
                                .HasConstraintName("fk_gift_attaches_gift_attaches_id");
                        });

                    b.Navigation("Info")
                        .IsRequired();

                    b.Navigation("Sender")
                        .IsRequired();

                    b.Navigation("Target")
                        .IsRequired();
                });

            modelBuilder.Entity("Post.Domain.Aggregates.Posts.Post", b =>
                {
                    b.OwnsOne("Post.Domain.Aggregates.Posts.ValueObjects.AuthorInfo", "Author", b1 =>
                        {
                            b1.Property<Guid>("PostId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<Guid>("AliasId")
                                .HasColumnType("uuid")
                                .HasColumnName("author_alias_id");

                            b1.Property<Guid>("AliasVersionId")
                                .HasColumnType("uuid")
                                .HasColumnName("author_alias_version_id");

                            b1.HasKey("PostId");

                            b1.ToTable("posts", "post");

                            b1.WithOwner()
                                .HasForeignKey("PostId")
                                .HasConstraintName("fk_posts_posts_id");
                        });

                    b.OwnsOne("Post.Domain.Aggregates.Posts.ValueObjects.ModerationInfo", "Moderation", b1 =>
                        {
                            b1.Property<Guid>("PostId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<DateTimeOffset?>("ModeratedAt")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("moderated_at");

                            b1.Property<string>("PolicyVersion")
                                .HasColumnType("text")
                                .HasColumnName("policy_version");

                            b1.Property<string>("Reasons")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("moderation_reasons");

                            b1.Property<string>("Status")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("moderation_status");

                            b1.HasKey("PostId");

                            b1.ToTable("posts", "post");

                            b1.WithOwner()
                                .HasForeignKey("PostId")
                                .HasConstraintName("fk_posts_posts_id");
                        });

                    b.OwnsOne("Post.Domain.Aggregates.Posts.ValueObjects.PostContent", "Content", b1 =>
                        {
                            b1.Property<Guid>("PostId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<int>("CharacterCount")
                                .HasColumnType("integer")
                                .HasColumnName("character_count");

                            b1.Property<string>("Title")
                                .HasMaxLength(200)
                                .HasColumnType("character varying(200)")
                                .HasColumnName("title");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(10000)
                                .HasColumnType("character varying(10000)")
                                .HasColumnName("content");

                            b1.Property<int>("WordCount")
                                .HasColumnType("integer")
                                .HasColumnName("word_count");

                            b1.HasKey("PostId");

                            b1.ToTable("posts", "post");

                            b1.WithOwner()
                                .HasForeignKey("PostId")
                                .HasConstraintName("fk_posts_posts_id");
                        });

                    b.OwnsOne("Post.Domain.Aggregates.Posts.ValueObjects.PostMetrics", "Metrics", b1 =>
                        {
                            b1.Property<Guid>("PostId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<int>("CommentCount")
                                .HasColumnType("integer")
                                .HasColumnName("comment_count");

                            b1.Property<int>("ReactionCount")
                                .HasColumnType("integer")
                                .HasColumnName("reaction_count");

                            b1.Property<int>("ShareCount")
                                .HasColumnType("integer")
                                .HasColumnName("share_count");

                            b1.Property<int>("ViewCount")
                                .HasColumnType("integer")
                                .HasColumnName("view_count");

                            b1.HasKey("PostId");

                            b1.ToTable("posts", "post");

                            b1.WithOwner()
                                .HasForeignKey("PostId")
                                .HasConstraintName("fk_posts_posts_id");
                        });

                    b.Navigation("Author")
                        .IsRequired();

                    b.Navigation("Content")
                        .IsRequired();

                    b.Navigation("Metrics")
                        .IsRequired();

                    b.Navigation("Moderation")
                        .IsRequired();
                });

            modelBuilder.Entity("Post.Domain.Aggregates.Posts.PostCategory", b =>
                {
                    b.HasOne("Post.Domain.Aggregates.CategoryTags.CategoryTag", "CategoryTag")
                        .WithMany()
                        .HasForeignKey("CategoryTagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_post_categories_category_tags_category_tag_id");

                    b.HasOne("Post.Domain.Aggregates.Posts.Post", null)
                        .WithMany("Categories")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_post_categories_posts_post_id");

                    b.Navigation("CategoryTag");
                });

            modelBuilder.Entity("Post.Domain.Aggregates.Posts.PostEmotion", b =>
                {
                    b.HasOne("Post.Domain.Aggregates.Posts.Post", null)
                        .WithMany("Emotions")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_post_emotions_posts_post_id");
                });

            modelBuilder.Entity("Post.Domain.Aggregates.Posts.PostMedia", b =>
                {
                    b.HasOne("Post.Domain.Aggregates.Posts.Post", null)
                        .WithMany("Media")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_post_media_posts_post_id");
                });

            modelBuilder.Entity("Post.Domain.Aggregates.Reaction.Reaction", b =>
                {
                    b.OwnsOne("Post.Domain.Aggregates.Posts.ValueObjects.AuthorInfo", "Author", b1 =>
                        {
                            b1.Property<Guid>("ReactionId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<Guid>("AliasId")
                                .HasColumnType("uuid")
                                .HasColumnName("author_alias_id");

                            b1.Property<Guid>("AliasVersionId")
                                .HasColumnType("uuid")
                                .HasColumnName("author_alias_version_id");

                            b1.HasKey("ReactionId");

                            b1.ToTable("reactions", "post");

                            b1.WithOwner()
                                .HasForeignKey("ReactionId")
                                .HasConstraintName("fk_reactions_reactions_id");
                        });

                    b.OwnsOne("Post.Domain.Aggregates.Reaction.ValueObjects.ReactionTarget", "Target", b1 =>
                        {
                            b1.Property<Guid>("ReactionId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<Guid>("TargetId")
                                .HasColumnType("uuid")
                                .HasColumnName("target_id");

                            b1.Property<string>("TargetType")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)")
                                .HasColumnName("target_type");

                            b1.HasKey("ReactionId");

                            b1.ToTable("reactions", "post");

                            b1.WithOwner()
                                .HasForeignKey("ReactionId")
                                .HasConstraintName("fk_reactions_reactions_id");
                        });

                    b.OwnsOne("Post.Domain.Aggregates.Reaction.ValueObjects.ReactionType", "Type", b1 =>
                        {
                            b1.Property<Guid>("ReactionId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("Code")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)")
                                .HasColumnName("reaction_code");

                            b1.Property<string>("Emoji")
                                .HasMaxLength(10)
                                .HasColumnType("character varying(10)")
                                .HasColumnName("reaction_emoji");

                            b1.Property<int>("Weight")
                                .HasColumnType("integer")
                                .HasColumnName("reaction_weight");

                            b1.HasKey("ReactionId");

                            b1.ToTable("reactions", "post");

                            b1.WithOwner()
                                .HasForeignKey("ReactionId")
                                .HasConstraintName("fk_reactions_reactions_id");
                        });

                    b.Navigation("Author")
                        .IsRequired();

                    b.Navigation("Target")
                        .IsRequired();

                    b.Navigation("Type")
                        .IsRequired();
                });

            modelBuilder.Entity("Post.Domain.Aggregates.Posts.Post", b =>
                {
                    b.Navigation("Categories");

                    b.Navigation("Emotions");

                    b.Navigation("Media");
                });
#pragma warning restore 612, 618
        }
    }
}
