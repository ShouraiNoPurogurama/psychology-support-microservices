// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Profile.API.Data.Pii;

#nullable disable

namespace Profile.API.Data.Pii.Migrations
{
    [DbContext(typeof(PiiDbContext))]
    [Migration("20250914123402_MappingIdToSubjectRef")]
    partial class MappingIdToSubjectRef
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("pii")
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "pii", "citext");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Profile.API.Models.Pii.AliasOwnerMap", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("AliasId")
                        .HasColumnType("uuid")
                        .HasColumnName("alias_id");

                    b.Property<DateTimeOffset?>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<Guid>("SubjectRef")
                        .HasColumnType("uuid")
                        .HasColumnName("subject_ref");

                    b.HasKey("Id")
                        .HasName("alias_owner_map_pkey");

                    b.HasIndex("SubjectRef")
                        .IsUnique()
                        .HasDatabaseName("ix_alias_owner_map_subject_ref");

                    b.HasIndex(new[] { "AliasId" }, "ix_alias_owner_map_alias_id")
                        .IsUnique()
                        .HasDatabaseName("ix_alias_owner_map_alias_id");

                    b.ToTable("alias_owner_map", "pii");
                });

            modelBuilder.Entity("Profile.API.Models.Pii.PatientOwnerMap", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset?>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<Guid>("PatientProfileId")
                        .HasColumnType("uuid")
                        .HasColumnName("patient_profile_id");

                    b.Property<Guid>("SubjectRef")
                        .HasColumnType("uuid")
                        .HasColumnName("subject_ref");

                    b.HasKey("Id")
                        .HasName("patient_owner_map_pkey");

                    b.HasIndex("SubjectRef")
                        .IsUnique()
                        .HasDatabaseName("ix_patient_owner_map_subject_ref");

                    b.HasIndex(new[] { "PatientProfileId" }, "ix_patient_owner_map_patient_profile_id")
                        .IsUnique()
                        .HasDatabaseName("ix_patient_owner_map_patient_profile_id");

                    b.ToTable("patient_owner_map", "pii");
                });

            modelBuilder.Entity("Profile.API.Models.Pii.PersonProfile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("subject_ref");

                    b.Property<DateOnly?>("BirthDate")
                        .HasColumnType("date")
                        .HasColumnName("birth_date");

                    b.Property<DateTimeOffset?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("full_name");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("Else")
                        .HasColumnName("gender");

                    b.Property<DateTimeOffset?>("LastModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text")
                        .HasColumnName("last_modified_by");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.ComplexProperty<Dictionary<string, object>>("ContactInfo", "Profile.API.Models.Pii.PersonProfile.ContactInfo#ContactInfo", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Address")
                                .HasColumnType("text")
                                .HasColumnName("address");

                            b1.Property<string>("Email")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("email");

                            b1.Property<string>("PhoneNumber")
                                .HasColumnType("text")
                                .HasColumnName("phone_number");
                        });

                    b.HasKey("Id")
                        .HasName("pk_person_profiles");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasDatabaseName("ix_person_profiles_user_id");

                    b.ToTable("person_profiles", "pii");
                });

            modelBuilder.Entity("Profile.API.Models.Pii.AliasOwnerMap", b =>
                {
                    b.HasOne("Profile.API.Models.Pii.PersonProfile", "PersonProfile")
                        .WithOne("AliasOwnerMap")
                        .HasForeignKey("Profile.API.Models.Pii.AliasOwnerMap", "SubjectRef")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_alias_owner_map_person_profiles_subject_ref");

                    b.Navigation("PersonProfile");
                });

            modelBuilder.Entity("Profile.API.Models.Pii.PatientOwnerMap", b =>
                {
                    b.HasOne("Profile.API.Models.Pii.PersonProfile", null)
                        .WithOne()
                        .HasForeignKey("Profile.API.Models.Pii.PatientOwnerMap", "SubjectRef")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_patient_owner_map_person_profiles_subject_ref");
                });

            modelBuilder.Entity("Profile.API.Models.Pii.PersonProfile", b =>
                {
                    b.Navigation("AliasOwnerMap");
                });
#pragma warning restore 612, 618
        }
    }
}
