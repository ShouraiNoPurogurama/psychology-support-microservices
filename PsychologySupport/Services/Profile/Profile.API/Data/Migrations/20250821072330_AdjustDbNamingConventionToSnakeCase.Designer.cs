// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Profile.API.Data;

#nullable disable

namespace Profile.API.Data.Migrations
{
    [DbContext(typeof(ProfileDbContext))]
    [Migration("20250821072330_AdjustDbNamingConventionToSnakeCase")]
    partial class AdjustDbNamingConventionToSnakeCase
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("public")
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DoctorProfileSpecialty", b =>
                {
                    b.Property<Guid>("DoctorProfilesId")
                        .HasColumnType("uuid")
                        .HasColumnName("doctor_profiles_id");

                    b.Property<Guid>("SpecialtiesId")
                        .HasColumnType("uuid")
                        .HasColumnName("specialties_id");

                    b.HasKey("DoctorProfilesId", "SpecialtiesId")
                        .HasName("pk_doctor_profile_specialty");

                    b.HasIndex("SpecialtiesId")
                        .HasDatabaseName("ix_doctor_profile_specialty_specialties_id");

                    b.ToTable("doctor_profile_specialty", "public");
                });

            modelBuilder.Entity("MedicalHistoryPhysicalSymptom", b =>
                {
                    b.Property<Guid>("MedicalHistoriesId")
                        .HasColumnType("uuid")
                        .HasColumnName("medical_histories_id");

                    b.Property<Guid>("PhysicalSymptomsId")
                        .HasColumnType("uuid")
                        .HasColumnName("physical_symptoms_id");

                    b.HasKey("MedicalHistoriesId", "PhysicalSymptomsId")
                        .HasName("pk_medical_history_physical_symptom");

                    b.HasIndex("PhysicalSymptomsId")
                        .HasDatabaseName("ix_medical_history_physical_symptom_physical_symptoms_id");

                    b.ToTable("medical_history_physical_symptom", "public");
                });

            modelBuilder.Entity("MedicalHistorySpecificMentalDisorder", b =>
                {
                    b.Property<Guid>("MedicalHistoriesId")
                        .HasColumnType("uuid")
                        .HasColumnName("medical_histories_id");

                    b.Property<Guid>("SpecificMentalDisordersId")
                        .HasColumnType("uuid")
                        .HasColumnName("specific_mental_disorders_id");

                    b.HasKey("MedicalHistoriesId", "SpecificMentalDisordersId")
                        .HasName("pk_medical_history_specific_mental_disorder");

                    b.HasIndex("SpecificMentalDisordersId")
                        .HasDatabaseName("ix_medical_history_specific_mental_disorder_specific_mental_di");

                    b.ToTable("medical_history_specific_mental_disorder", "public");
                });

            modelBuilder.Entity("MedicalRecordSpecificMentalDisorder", b =>
                {
                    b.Property<Guid>("MedicalRecordsId")
                        .HasColumnType("uuid")
                        .HasColumnName("medical_records_id");

                    b.Property<Guid>("SpecificMentalDisordersId")
                        .HasColumnType("uuid")
                        .HasColumnName("specific_mental_disorders_id");

                    b.HasKey("MedicalRecordsId", "SpecificMentalDisordersId")
                        .HasName("pk_medical_record_specific_mental_disorder");

                    b.HasIndex("SpecificMentalDisordersId")
                        .HasDatabaseName("ix_medical_record_specific_mental_disorder_specific_mental_dis");

                    b.ToTable("medical_record_specific_mental_disorder", "public");
                });

            modelBuilder.Entity("Profile.API.DoctorProfiles.Models.DoctorProfile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Bio")
                        .HasColumnType("text")
                        .HasColumnName("bio");

                    b.Property<DateTimeOffset?>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("full_name");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("Gender");

                    b.Property<DateTimeOffset?>("LastModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text")
                        .HasColumnName("last_modified_by");

                    b.Property<string>("Qualifications")
                        .HasColumnType("text")
                        .HasColumnName("qualifications");

                    b.Property<float>("Rating")
                        .HasColumnType("real")
                        .HasColumnName("rating");

                    b.Property<int>("TotalReviews")
                        .HasColumnType("integer")
                        .HasColumnName("total_reviews");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<int>("YearsOfExperience")
                        .HasColumnType("integer")
                        .HasColumnName("years_of_experience");

                    b.ComplexProperty<Dictionary<string, object>>("ContactInfo", "Profile.API.DoctorProfiles.Models.DoctorProfile.ContactInfo#ContactInfo", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Address")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("Address");

                            b1.Property<string>("Email")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("Email");

                            b1.Property<string>("PhoneNumber")
                                .HasColumnType("text")
                                .HasColumnName("PhoneNumber");
                        });

                    b.HasKey("Id")
                        .HasName("pk_doctor_profiles");

                    b.ToTable("doctor_profiles", "public");
                });

            modelBuilder.Entity("Profile.API.DoctorProfiles.Models.Specialty", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_specialties");

                    b.ToTable("specialties", "public");
                });

            modelBuilder.Entity("Profile.API.MentalDisorders.Models.MentalDisorder", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset?>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<DateTimeOffset?>("LastModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text")
                        .HasColumnName("last_modified_by");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_mental_disorders");

                    b.ToTable("mental_disorders", "public");
                });

            modelBuilder.Entity("Profile.API.MentalDisorders.Models.SpecificMentalDisorder", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<Guid>("MentalDisorderId")
                        .HasColumnType("uuid")
                        .HasColumnName("mental_disorder_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_specific_mental_disorders");

                    b.HasIndex("MentalDisorderId")
                        .HasDatabaseName("ix_specific_mental_disorders_mental_disorder_id");

                    b.ToTable("specific_mental_disorders", "public");
                });

            modelBuilder.Entity("Profile.API.PatientProfiles.Models.Industry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset?>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("IndustryName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("industry_name");

                    b.Property<DateTimeOffset?>("LastModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text")
                        .HasColumnName("last_modified_by");

                    b.HasKey("Id")
                        .HasName("pk_industries");

                    b.ToTable("industries", "public");
                });

            modelBuilder.Entity("Profile.API.PatientProfiles.Models.Job", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset?>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<string>("EducationLevel")
                        .IsRequired()
                        .HasColumnType("VARCHAR(30)")
                        .HasColumnName("education_level");

                    b.Property<Guid>("IndustryId")
                        .HasColumnType("uuid")
                        .HasColumnName("industry_id");

                    b.Property<string>("JobTitle")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("job_title");

                    b.Property<DateTimeOffset?>("LastModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text")
                        .HasColumnName("last_modified_by");

                    b.HasKey("Id")
                        .HasName("pk_jobs");

                    b.HasIndex("IndustryId")
                        .HasDatabaseName("ix_jobs_industry_id");

                    b.ToTable("jobs", "public");
                });

            modelBuilder.Entity("Profile.API.PatientProfiles.Models.MedicalHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset?>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<DateTimeOffset>("DiagnosedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("diagnosed_at");

                    b.Property<DateTimeOffset?>("LastModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text")
                        .HasColumnName("last_modified_by");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uuid")
                        .HasColumnName("patient_id");

                    b.HasKey("Id")
                        .HasName("pk_medical_histories");

                    b.HasIndex("PatientId")
                        .IsUnique()
                        .HasDatabaseName("ix_medical_histories_patient_id");

                    b.ToTable("medical_histories", "public");
                });

            modelBuilder.Entity("Profile.API.PatientProfiles.Models.MedicalRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset?>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<Guid>("DoctorProfileId")
                        .HasColumnType("uuid")
                        .HasColumnName("doctor_profile_id");

                    b.Property<DateTimeOffset?>("LastModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text")
                        .HasColumnName("last_modified_by");

                    b.Property<Guid?>("MedicalHistoryId")
                        .HasColumnType("uuid")
                        .HasColumnName("medical_history_id");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("notes");

                    b.Property<Guid>("PatientProfileId")
                        .HasColumnType("uuid")
                        .HasColumnName("patient_profile_id");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("VARCHAR(20)")
                        .HasColumnName("status");

                    b.HasKey("Id")
                        .HasName("pk_medical_records");

                    b.HasIndex("DoctorProfileId")
                        .HasDatabaseName("ix_medical_records_doctor_profile_id");

                    b.HasIndex("MedicalHistoryId")
                        .HasDatabaseName("ix_medical_records_medical_history_id");

                    b.HasIndex("PatientProfileId")
                        .HasDatabaseName("ix_medical_records_patient_profile_id");

                    b.ToTable("medical_records", "public");
                });

            modelBuilder.Entity("Profile.API.PatientProfiles.Models.PatientProfile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Allergies")
                        .HasColumnType("text")
                        .HasColumnName("allergies");

                    b.Property<DateOnly?>("BirthDate")
                        .HasColumnType("date")
                        .HasColumnName("birth_date");

                    b.Property<DateTimeOffset?>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("full_name");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Gender");

                    b.Property<bool>("IsProfileCompleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_profile_completed");

                    b.Property<Guid?>("JobId")
                        .HasColumnType("uuid")
                        .HasColumnName("job_id");

                    b.Property<DateTimeOffset?>("LastModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text")
                        .HasColumnName("last_modified_by");

                    b.Property<Guid?>("MedicalHistoryId")
                        .HasColumnType("uuid")
                        .HasColumnName("medical_history_id");

                    b.Property<string>("PersonalityTraits")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("PersonalityTraits");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.ComplexProperty<Dictionary<string, object>>("ContactInfo", "Profile.API.PatientProfiles.Models.PatientProfile.ContactInfo#ContactInfo", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Address")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("Address");

                            b1.Property<string>("Email")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("Email");

                            b1.Property<string>("PhoneNumber")
                                .HasColumnType("text")
                                .HasColumnName("PhoneNumber");
                        });

                    b.HasKey("Id")
                        .HasName("pk_patient_profiles");

                    b.HasIndex("JobId")
                        .HasDatabaseName("ix_patient_profiles_job_id");

                    b.ToTable("patient_profiles", "public");
                });

            modelBuilder.Entity("Profile.API.PatientProfiles.Models.PhysicalSymptom", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_physical_symptoms");

                    b.ToTable("physical_symptoms", "public");
                });

            modelBuilder.Entity("DoctorProfileSpecialty", b =>
                {
                    b.HasOne("Profile.API.DoctorProfiles.Models.DoctorProfile", null)
                        .WithMany()
                        .HasForeignKey("DoctorProfilesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_doctor_profile_specialty_doctor_profiles_doctor_profiles_id");

                    b.HasOne("Profile.API.DoctorProfiles.Models.Specialty", null)
                        .WithMany()
                        .HasForeignKey("SpecialtiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_doctor_profile_specialty_specialties_specialties_id");
                });

            modelBuilder.Entity("MedicalHistoryPhysicalSymptom", b =>
                {
                    b.HasOne("Profile.API.PatientProfiles.Models.MedicalHistory", null)
                        .WithMany()
                        .HasForeignKey("MedicalHistoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_medical_history_physical_symptom_medical_histories_medical_");

                    b.HasOne("Profile.API.PatientProfiles.Models.PhysicalSymptom", null)
                        .WithMany()
                        .HasForeignKey("PhysicalSymptomsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_medical_history_physical_symptom_physical_symptoms_physical");
                });

            modelBuilder.Entity("MedicalHistorySpecificMentalDisorder", b =>
                {
                    b.HasOne("Profile.API.PatientProfiles.Models.MedicalHistory", null)
                        .WithMany()
                        .HasForeignKey("MedicalHistoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_medical_history_specific_mental_disorder_medical_histories_");

                    b.HasOne("Profile.API.MentalDisorders.Models.SpecificMentalDisorder", null)
                        .WithMany()
                        .HasForeignKey("SpecificMentalDisordersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_medical_history_specific_mental_disorder_specific_mental_di");
                });

            modelBuilder.Entity("MedicalRecordSpecificMentalDisorder", b =>
                {
                    b.HasOne("Profile.API.PatientProfiles.Models.MedicalRecord", null)
                        .WithMany()
                        .HasForeignKey("MedicalRecordsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_medical_record_specific_mental_disorder_medical_records_med");

                    b.HasOne("Profile.API.MentalDisorders.Models.SpecificMentalDisorder", null)
                        .WithMany()
                        .HasForeignKey("SpecificMentalDisordersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_medical_record_specific_mental_disorder_specific_mental_dis");
                });

            modelBuilder.Entity("Profile.API.MentalDisorders.Models.SpecificMentalDisorder", b =>
                {
                    b.HasOne("Profile.API.MentalDisorders.Models.MentalDisorder", "MentalDisorder")
                        .WithMany("SpecificMentalDisorders")
                        .HasForeignKey("MentalDisorderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_specific_mental_disorders_mental_disorders_mental_disorder_");

                    b.Navigation("MentalDisorder");
                });

            modelBuilder.Entity("Profile.API.PatientProfiles.Models.Job", b =>
                {
                    b.HasOne("Profile.API.PatientProfiles.Models.Industry", "Industry")
                        .WithMany("Jobs")
                        .HasForeignKey("IndustryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_jobs_industries_industry_id");

                    b.Navigation("Industry");
                });

            modelBuilder.Entity("Profile.API.PatientProfiles.Models.MedicalHistory", b =>
                {
                    b.HasOne("Profile.API.PatientProfiles.Models.PatientProfile", null)
                        .WithOne("MedicalHistory")
                        .HasForeignKey("Profile.API.PatientProfiles.Models.MedicalHistory", "PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_medical_histories_patient_profiles_patient_id");
                });

            modelBuilder.Entity("Profile.API.PatientProfiles.Models.MedicalRecord", b =>
                {
                    b.HasOne("Profile.API.DoctorProfiles.Models.DoctorProfile", "DoctorProfile")
                        .WithMany("MedicalRecords")
                        .HasForeignKey("DoctorProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_medical_records_doctor_profiles_doctor_profile_id");

                    b.HasOne("Profile.API.PatientProfiles.Models.MedicalHistory", "MedicalHistory")
                        .WithMany()
                        .HasForeignKey("MedicalHistoryId")
                        .HasConstraintName("fk_medical_records_medical_histories_medical_history_id");

                    b.HasOne("Profile.API.PatientProfiles.Models.PatientProfile", "PatientProfile")
                        .WithMany("MedicalRecords")
                        .HasForeignKey("PatientProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_medical_records_patient_profiles_patient_profile_id");

                    b.Navigation("DoctorProfile");

                    b.Navigation("MedicalHistory");

                    b.Navigation("PatientProfile");
                });

            modelBuilder.Entity("Profile.API.PatientProfiles.Models.PatientProfile", b =>
                {
                    b.HasOne("Profile.API.PatientProfiles.Models.Job", "Job")
                        .WithMany()
                        .HasForeignKey("JobId")
                        .HasConstraintName("fk_patient_profiles_jobs_job_id");

                    b.Navigation("Job");
                });

            modelBuilder.Entity("Profile.API.DoctorProfiles.Models.DoctorProfile", b =>
                {
                    b.Navigation("MedicalRecords");
                });

            modelBuilder.Entity("Profile.API.MentalDisorders.Models.MentalDisorder", b =>
                {
                    b.Navigation("SpecificMentalDisorders");
                });

            modelBuilder.Entity("Profile.API.PatientProfiles.Models.Industry", b =>
                {
                    b.Navigation("Jobs");
                });

            modelBuilder.Entity("Profile.API.PatientProfiles.Models.PatientProfile", b =>
                {
                    b.Navigation("MedicalHistory");

                    b.Navigation("MedicalRecords");
                });
#pragma warning restore 612, 618
        }
    }
}
