// <auto-generated />
using System;
using LifeStyles.API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace LifeStyles.API.Data.Migrations
{
    [DbContext(typeof(LifeStylesDbContext))]
    [Migration("20250821091945_AdjustDbNamingConventionToSnakeCase")]
    partial class AdjustDbNamingConventionToSnakeCase
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("public")
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("FoodActivityFoodCategory", b =>
                {
                    b.Property<Guid>("FoodActivitiesId")
                        .HasColumnType("uuid")
                        .HasColumnName("food_activities_id");

                    b.Property<Guid>("FoodCategoriesId")
                        .HasColumnType("uuid")
                        .HasColumnName("food_categories_id");

                    b.HasKey("FoodActivitiesId", "FoodCategoriesId")
                        .HasName("pk_food_activity_food_category");

                    b.HasIndex("FoodCategoriesId")
                        .HasDatabaseName("ix_food_activity_food_category_food_categories_id");

                    b.ToTable("food_activity_food_category", "public");
                });

            modelBuilder.Entity("FoodActivityFoodNutrient", b =>
                {
                    b.Property<Guid>("FoodActivitiesId")
                        .HasColumnType("uuid")
                        .HasColumnName("food_activities_id");

                    b.Property<Guid>("FoodNutrientsId")
                        .HasColumnType("uuid")
                        .HasColumnName("food_nutrients_id");

                    b.HasKey("FoodActivitiesId", "FoodNutrientsId")
                        .HasName("pk_food_activity_food_nutrient");

                    b.HasIndex("FoodNutrientsId")
                        .HasDatabaseName("ix_food_activity_food_nutrient_food_nutrients_id");

                    b.ToTable("food_activity_food_nutrient", "public");
                });

            modelBuilder.Entity("LifeStyles.API.Models.Emotion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("description");

                    b.Property<string>("IconUrl")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("icon_url");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_emotions");

                    b.ToTable("emotions", "public");
                });

            modelBuilder.Entity("LifeStyles.API.Models.EmotionSelection", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("EmotionCheckpointId")
                        .HasColumnType("uuid")
                        .HasColumnName("emotion_checkpoint_id");

                    b.Property<Guid>("EmotionId")
                        .HasColumnType("uuid")
                        .HasColumnName("emotion_id");

                    b.Property<int?>("Intensity")
                        .HasColumnType("integer")
                        .HasColumnName("intensity");

                    b.Property<int?>("Rank")
                        .HasColumnType("integer")
                        .HasColumnName("rank");

                    b.HasKey("Id")
                        .HasName("pk_emotion_selections");

                    b.HasIndex("EmotionCheckpointId")
                        .HasDatabaseName("ix_emotion_selections_emotion_checkpoint_id");

                    b.HasIndex("EmotionId")
                        .HasDatabaseName("ix_emotion_selections_emotion_id");

                    b.ToTable("emotion_selections", "public");
                });

            modelBuilder.Entity("LifeStyles.API.Models.EntertainmentActivity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("ImpactLevel")
                        .IsRequired()
                        .HasColumnType("VARCHAR(20)")
                        .HasColumnName("impact_level");

                    b.Property<string>("IntensityLevel")
                        .IsRequired()
                        .HasColumnType("VARCHAR(20)")
                        .HasColumnName("intensity_level");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_entertainment_activities");

                    b.ToTable("entertainment_activities", "public");
                });

            modelBuilder.Entity("LifeStyles.API.Models.FoodActivity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("IntensityLevel")
                        .IsRequired()
                        .HasColumnType("VARCHAR(20)")
                        .HasColumnName("intensity_level");

                    b.Property<string>("MealTime")
                        .IsRequired()
                        .HasColumnType("VARCHAR(20)")
                        .HasColumnName("meal_time");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_food_activities");

                    b.ToTable("food_activities", "public");
                });

            modelBuilder.Entity("LifeStyles.API.Models.FoodCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_food_categories");

                    b.ToTable("food_categories", "public");
                });

            modelBuilder.Entity("LifeStyles.API.Models.FoodNutrient", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_food_nutrients");

                    b.ToTable("food_nutrients", "public");
                });

            modelBuilder.Entity("LifeStyles.API.Models.ImprovementGoal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_improvement_goals");

                    b.ToTable("improvement_goals", "public");
                });

            modelBuilder.Entity("LifeStyles.API.Models.LifestyleLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("AvailableTimePerDay")
                        .IsRequired()
                        .HasColumnType("VARCHAR(20)")
                        .HasColumnName("available_time_per_day");

                    b.Property<string>("ExerciseFrequency")
                        .IsRequired()
                        .HasColumnType("VARCHAR(20)")
                        .HasColumnName("exercise_frequency");

                    b.Property<DateTimeOffset>("LogDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("log_date");

                    b.Property<Guid>("PatientProfileId")
                        .HasColumnType("uuid")
                        .HasColumnName("patient_profile_id");

                    b.Property<string>("SleepHours")
                        .IsRequired()
                        .HasColumnType("VARCHAR(20)")
                        .HasColumnName("sleep_hours");

                    b.HasKey("Id")
                        .HasName("pk_lifestyle_logs");

                    b.ToTable("lifestyle_logs", "public");
                });

            modelBuilder.Entity("LifeStyles.API.Models.PatientEmotionCheckpoint", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("LogDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("log_date");

                    b.Property<Guid>("PatientProfileId")
                        .HasColumnType("uuid")
                        .HasColumnName("patient_profile_id");

                    b.HasKey("Id")
                        .HasName("pk_patient_emotion_checkpoints");

                    b.ToTable("patient_emotion_checkpoints", "public");
                });

            modelBuilder.Entity("LifeStyles.API.Models.PatientEntertainmentActivity", b =>
                {
                    b.Property<Guid>("PatientProfileId")
                        .HasColumnType("uuid")
                        .HasColumnName("patient_profile_id");

                    b.Property<Guid>("EntertainmentActivityId")
                        .HasColumnType("uuid")
                        .HasColumnName("entertainment_activity_id");

                    b.Property<string>("PreferenceLevel")
                        .IsRequired()
                        .HasColumnType("VARCHAR(20)")
                        .HasColumnName("preference_level");

                    b.HasKey("PatientProfileId", "EntertainmentActivityId")
                        .HasName("pk_patient_entertainment_activities");

                    b.ToTable("patient_entertainment_activities", "public");
                });

            modelBuilder.Entity("LifeStyles.API.Models.PatientFoodActivity", b =>
                {
                    b.Property<Guid>("PatientProfileId")
                        .HasColumnType("uuid")
                        .HasColumnName("patient_profile_id");

                    b.Property<Guid>("FoodActivityId")
                        .HasColumnType("uuid")
                        .HasColumnName("food_activity_id");

                    b.Property<string>("PreferenceLevel")
                        .IsRequired()
                        .HasColumnType("VARCHAR(20)")
                        .HasColumnName("preference_level");

                    b.HasKey("PatientProfileId", "FoodActivityId")
                        .HasName("pk_patient_food_activities");

                    b.ToTable("patient_food_activities", "public");
                });

            modelBuilder.Entity("LifeStyles.API.Models.PatientImprovementGoal", b =>
                {
                    b.Property<Guid>("PatientProfileId")
                        .HasColumnType("uuid")
                        .HasColumnName("patient_profile_id");

                    b.Property<Guid>("GoalId")
                        .HasColumnType("uuid")
                        .HasColumnName("goal_id");

                    b.Property<DateTimeOffset>("AssignedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("assigned_at");

                    b.HasKey("PatientProfileId", "GoalId")
                        .HasName("pk_patient_improvement_goals");

                    b.HasIndex("GoalId")
                        .HasDatabaseName("ix_patient_improvement_goals_goal_id");

                    b.ToTable("patient_improvement_goals", "public");
                });

            modelBuilder.Entity("LifeStyles.API.Models.PatientPhysicalActivity", b =>
                {
                    b.Property<Guid>("PatientProfileId")
                        .HasColumnType("uuid")
                        .HasColumnName("patient_profile_id");

                    b.Property<Guid>("PhysicalActivityId")
                        .HasColumnType("uuid")
                        .HasColumnName("physical_activity_id");

                    b.Property<string>("PreferenceLevel")
                        .IsRequired()
                        .HasColumnType("VARCHAR(20)")
                        .HasColumnName("preference_level");

                    b.HasKey("PatientProfileId", "PhysicalActivityId")
                        .HasName("pk_patient_physical_activities");

                    b.ToTable("patient_physical_activities", "public");
                });

            modelBuilder.Entity("LifeStyles.API.Models.PatientTherapeuticActivity", b =>
                {
                    b.Property<Guid>("PatientProfileId")
                        .HasColumnType("uuid")
                        .HasColumnName("patient_profile_id");

                    b.Property<Guid>("TherapeuticActivityId")
                        .HasColumnType("uuid")
                        .HasColumnName("therapeutic_activity_id");

                    b.Property<string>("PreferenceLevel")
                        .IsRequired()
                        .HasColumnType("VARCHAR(20)")
                        .HasColumnName("preference_level");

                    b.HasKey("PatientProfileId", "TherapeuticActivityId")
                        .HasName("pk_patient_therapeutic_activities");

                    b.ToTable("patient_therapeutic_activities", "public");
                });

            modelBuilder.Entity("LifeStyles.API.Models.PhysicalActivity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("ImpactLevel")
                        .IsRequired()
                        .HasColumnType("VARCHAR(20)")
                        .HasColumnName("impact_level");

                    b.Property<string>("IntensityLevel")
                        .IsRequired()
                        .HasColumnType("VARCHAR(20)")
                        .HasColumnName("intensity_level");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_physical_activities");

                    b.ToTable("physical_activities", "public");
                });

            modelBuilder.Entity("LifeStyles.API.Models.TherapeuticActivity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("ImpactLevel")
                        .IsRequired()
                        .HasColumnType("VARCHAR(20)")
                        .HasColumnName("impact_level");

                    b.Property<string>("Instructions")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("instructions");

                    b.Property<string>("IntensityLevel")
                        .IsRequired()
                        .HasColumnType("VARCHAR(20)")
                        .HasColumnName("intensity_level");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<Guid>("TherapeuticTypeId")
                        .HasColumnType("uuid")
                        .HasColumnName("therapeutic_type_id");

                    b.HasKey("Id")
                        .HasName("pk_therapeutic_activities");

                    b.HasIndex("TherapeuticTypeId")
                        .HasDatabaseName("ix_therapeutic_activities_therapeutic_type_id");

                    b.ToTable("therapeutic_activities", "public");
                });

            modelBuilder.Entity("LifeStyles.API.Models.TherapeuticType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_therapeutic_types");

                    b.ToTable("therapeutic_types", "public");
                });

            modelBuilder.Entity("FoodActivityFoodCategory", b =>
                {
                    b.HasOne("LifeStyles.API.Models.FoodActivity", null)
                        .WithMany()
                        .HasForeignKey("FoodActivitiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_food_activity_food_category_food_activities_food_activities");

                    b.HasOne("LifeStyles.API.Models.FoodCategory", null)
                        .WithMany()
                        .HasForeignKey("FoodCategoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_food_activity_food_category_food_categories_food_categories");
                });

            modelBuilder.Entity("FoodActivityFoodNutrient", b =>
                {
                    b.HasOne("LifeStyles.API.Models.FoodActivity", null)
                        .WithMany()
                        .HasForeignKey("FoodActivitiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_food_activity_food_nutrient_food_activities_food_activities");

                    b.HasOne("LifeStyles.API.Models.FoodNutrient", null)
                        .WithMany()
                        .HasForeignKey("FoodNutrientsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_food_activity_food_nutrient_food_nutrients_food_nutrients_id");
                });

            modelBuilder.Entity("LifeStyles.API.Models.EmotionSelection", b =>
                {
                    b.HasOne("LifeStyles.API.Models.PatientEmotionCheckpoint", "EmotionCheckpoint")
                        .WithMany("EmotionSelections")
                        .HasForeignKey("EmotionCheckpointId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_emotion_selections_patient_emotion_checkpoints_emotion_chec");

                    b.HasOne("LifeStyles.API.Models.Emotion", "Emotion")
                        .WithMany("EmotionSelections")
                        .HasForeignKey("EmotionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_emotion_selections_emotions_emotion_id");

                    b.Navigation("Emotion");

                    b.Navigation("EmotionCheckpoint");
                });

            modelBuilder.Entity("LifeStyles.API.Models.PatientImprovementGoal", b =>
                {
                    b.HasOne("LifeStyles.API.Models.ImprovementGoal", "Goal")
                        .WithMany("PatientImprovementGoals")
                        .HasForeignKey("GoalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_patient_improvement_goals_improvement_goals_goal_id");

                    b.Navigation("Goal");
                });

            modelBuilder.Entity("LifeStyles.API.Models.TherapeuticActivity", b =>
                {
                    b.HasOne("LifeStyles.API.Models.TherapeuticType", "TherapeuticType")
                        .WithMany()
                        .HasForeignKey("TherapeuticTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_therapeutic_activities_therapeutic_types_therapeutic_type_id");

                    b.Navigation("TherapeuticType");
                });

            modelBuilder.Entity("LifeStyles.API.Models.Emotion", b =>
                {
                    b.Navigation("EmotionSelections");
                });

            modelBuilder.Entity("LifeStyles.API.Models.ImprovementGoal", b =>
                {
                    b.Navigation("PatientImprovementGoals");
                });

            modelBuilder.Entity("LifeStyles.API.Models.PatientEmotionCheckpoint", b =>
                {
                    b.Navigation("EmotionSelections");
                });
#pragma warning restore 612, 618
        }
    }
}
