// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Scheduling.API.Data;

#nullable disable

namespace Scheduling.API.Data.Migrations
{
    [DbContext(typeof(SchedulingDbContext))]
    [Migration("20250821092040_AdjustDbNamingConventionToSnakeCase")]
    partial class AdjustDbNamingConventionToSnakeCase
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Scheduling.API.Models.Booking", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("BookingCode")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("booking_code");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date")
                        .HasColumnName("date");

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uuid")
                        .HasColumnName("doctor_id");

                    b.Property<int>("Duration")
                        .HasColumnType("integer")
                        .HasColumnName("duration");

                    b.Property<Guid?>("GiftCodeId")
                        .HasColumnType("uuid")
                        .HasColumnName("gift_code_id");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uuid")
                        .HasColumnName("patient_id");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric")
                        .HasColumnName("price");

                    b.Property<Guid?>("PromoCodeId")
                        .HasColumnType("uuid")
                        .HasColumnName("promo_code_id");

                    b.Property<TimeOnly>("StartTime")
                        .HasColumnType("time without time zone")
                        .HasColumnName("start_time");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("VARCHAR(20)")
                        .HasColumnName("status");

                    b.HasKey("Id")
                        .HasName("pk_bookings");

                    b.ToTable("bookings", (string)null);
                });

            modelBuilder.Entity("Scheduling.API.Models.DoctorAvailability", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date")
                        .HasColumnName("date");

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uuid")
                        .HasColumnName("doctor_id");

                    b.Property<TimeOnly>("StartTime")
                        .HasColumnType("time without time zone")
                        .HasColumnName("start_time");

                    b.HasKey("Id")
                        .HasName("pk_doctor_availabilities");

                    b.ToTable("doctor_availabilities", (string)null);
                });

            modelBuilder.Entity("Scheduling.API.Models.DoctorSlotDuration", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uuid")
                        .HasColumnName("doctor_id");

                    b.Property<int>("SlotDuration")
                        .HasColumnType("integer")
                        .HasColumnName("slot_duration");

                    b.Property<int>("SlotsPerDay")
                        .HasColumnType("integer")
                        .HasColumnName("slots_per_day");

                    b.HasKey("Id")
                        .HasName("pk_doctor_slot_durations");

                    b.ToTable("doctor_slot_durations", (string)null);
                });

            modelBuilder.Entity("Scheduling.API.Models.Schedule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("DoctorId")
                        .HasColumnType("uuid")
                        .HasColumnName("doctor_id");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("end_date");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uuid")
                        .HasColumnName("patient_id");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_date");

                    b.HasKey("Id")
                        .HasName("pk_schedules");

                    b.ToTable("schedules", (string)null);
                });

            modelBuilder.Entity("Scheduling.API.Models.ScheduleActivity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("DateNumber")
                        .HasColumnType("integer")
                        .HasColumnName("date_number");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Duration")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("duration");

                    b.Property<Guid?>("EntertainmentActivityId")
                        .HasColumnType("uuid")
                        .HasColumnName("entertainment_activity_id");

                    b.Property<Guid?>("FoodActivityId")
                        .HasColumnType("uuid")
                        .HasColumnName("food_activity_id");

                    b.Property<Guid?>("PhysicalActivityId")
                        .HasColumnType("uuid")
                        .HasColumnName("physical_activity_id");

                    b.Property<Guid>("SessionId")
                        .HasColumnType("uuid")
                        .HasColumnName("session_id");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("VARCHAR(20)")
                        .HasColumnName("status");

                    b.Property<Guid?>("TherapeuticActivityId")
                        .HasColumnType("uuid")
                        .HasColumnName("therapeutic_activity_id");

                    b.Property<DateTime>("TimeRange")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("time_range");

                    b.HasKey("Id")
                        .HasName("pk_schedule_activities");

                    b.HasIndex("SessionId")
                        .HasDatabaseName("ix_schedule_activities_session_id");

                    b.ToTable("schedule_activities", (string)null);
                });

            modelBuilder.Entity("Scheduling.API.Models.ScheduleFeedback", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Content")
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<DateTime>("FeedbackDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("feedback_date");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uuid")
                        .HasColumnName("patient_id");

                    b.Property<int>("Rating")
                        .HasColumnType("integer")
                        .HasColumnName("rating");

                    b.Property<Guid>("ScheduleId")
                        .HasColumnType("uuid")
                        .HasColumnName("schedule_id");

                    b.HasKey("Id")
                        .HasName("pk_schedule_feedbacks");

                    b.HasIndex("ScheduleId")
                        .HasDatabaseName("ix_schedule_feedbacks_schedule_id");

                    b.ToTable("schedule_feedbacks", (string)null);
                });

            modelBuilder.Entity("Scheduling.API.Models.Session", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("end_date");

                    b.Property<int>("Order")
                        .HasColumnType("integer")
                        .HasColumnName("order");

                    b.Property<string>("Purpose")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("purpose");

                    b.Property<Guid>("ScheduleId")
                        .HasColumnType("uuid")
                        .HasColumnName("schedule_id");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_date");

                    b.HasKey("Id")
                        .HasName("pk_sessions");

                    b.HasIndex("ScheduleId")
                        .HasDatabaseName("ix_sessions_schedule_id");

                    b.ToTable("sessions", (string)null);
                });

            modelBuilder.Entity("Scheduling.API.Models.TimeSlotTemplate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("DayOfWeek")
                        .HasColumnType("integer")
                        .HasColumnName("day_of_week");

                    b.Property<TimeOnly>("EndTime")
                        .HasColumnType("time without time zone")
                        .HasColumnName("end_time");

                    b.Property<TimeOnly>("StartTime")
                        .HasColumnType("time without time zone")
                        .HasColumnName("start_time");

                    b.HasKey("Id")
                        .HasName("pk_time_slot_templates");

                    b.ToTable("time_slot_templates", (string)null);
                });

            modelBuilder.Entity("Scheduling.API.Models.ScheduleActivity", b =>
                {
                    b.HasOne("Scheduling.API.Models.Session", null)
                        .WithMany("Activities")
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_schedule_activities_sessions_session_id");
                });

            modelBuilder.Entity("Scheduling.API.Models.ScheduleFeedback", b =>
                {
                    b.HasOne("Scheduling.API.Models.Schedule", null)
                        .WithMany("Feedbacks")
                        .HasForeignKey("ScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_schedule_feedbacks_schedules_schedule_id");
                });

            modelBuilder.Entity("Scheduling.API.Models.Session", b =>
                {
                    b.HasOne("Scheduling.API.Models.Schedule", null)
                        .WithMany("Sessions")
                        .HasForeignKey("ScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_sessions_schedules_schedule_id");
                });

            modelBuilder.Entity("Scheduling.API.Models.Schedule", b =>
                {
                    b.Navigation("Feedbacks");

                    b.Navigation("Sessions");
                });

            modelBuilder.Entity("Scheduling.API.Models.Session", b =>
                {
                    b.Navigation("Activities");
                });
#pragma warning restore 612, 618
        }
    }
}
