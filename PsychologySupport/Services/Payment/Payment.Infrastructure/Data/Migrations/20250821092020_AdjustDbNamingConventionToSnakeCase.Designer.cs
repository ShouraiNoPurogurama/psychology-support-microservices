// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Payment.Infrastructure.Data;

#nullable disable

namespace Payment.Infrastructure.Data.Migrations
{
    [DbContext(typeof(PaymentDbContext))]
    [Migration("20250821092020_AdjustDbNamingConventionToSnakeCase")]
    partial class AdjustDbNamingConventionToSnakeCase
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Payment.Domain.Models.Payment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("BookingId")
                        .HasColumnType("uuid")
                        .HasColumnName("booking_id");

                    b.Property<DateTimeOffset?>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset?>("LastModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text")
                        .HasColumnName("last_modified_by");

                    b.Property<Guid>("PatientProfileId")
                        .HasColumnType("uuid")
                        .HasColumnName("patient_profile_id");

                    b.Property<long>("PaymentCode")
                        .HasColumnType("bigint")
                        .HasColumnName("payment_code");

                    b.Property<Guid>("PaymentMethodId")
                        .HasColumnType("uuid")
                        .HasColumnName("payment_method_id");

                    b.Property<string>("PaymentType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("payment_type");

                    b.Property<string>("PaymentUrl")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("payment_url");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("Pending")
                        .HasColumnName("status");

                    b.Property<Guid?>("SubscriptionId")
                        .HasColumnType("uuid")
                        .HasColumnName("subscription_id");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("total_amount");

                    b.HasKey("Id")
                        .HasName("pk_payments");

                    b.HasIndex("PaymentMethodId")
                        .HasDatabaseName("ix_payments_payment_method_id");

                    b.ToTable("payments", (string)null);
                });

            modelBuilder.Entity("Payment.Domain.Models.PaymentDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("amount");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("ExternalTransactionCode")
                        .HasColumnType("text")
                        .HasColumnName("external_transaction_code");

                    b.Property<Guid>("PaymentId")
                        .HasColumnType("uuid")
                        .HasColumnName("payment_id");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("Pending")
                        .HasColumnName("status");

                    b.HasKey("Id")
                        .HasName("pk_payment_details");

                    b.HasIndex("PaymentId")
                        .HasDatabaseName("ix_payment_details_payment_id");

                    b.ToTable("payment_details", (string)null);
                });

            modelBuilder.Entity("Payment.Domain.Models.PaymentMethod", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Details")
                        .HasColumnType("text")
                        .HasColumnName("details");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_payment_methods");

                    b.ToTable("payment_methods", (string)null);
                });

            modelBuilder.Entity("Payment.Domain.Models.Payment", b =>
                {
                    b.HasOne("Payment.Domain.Models.PaymentMethod", "PaymentMethod")
                        .WithMany("Payments")
                        .HasForeignKey("PaymentMethodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_payments_payment_methods_payment_method_id");

                    b.Navigation("PaymentMethod");
                });

            modelBuilder.Entity("Payment.Domain.Models.PaymentDetail", b =>
                {
                    b.HasOne("Payment.Domain.Models.Payment", null)
                        .WithMany("PaymentDetails")
                        .HasForeignKey("PaymentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_payment_details_payments_payment_id");
                });

            modelBuilder.Entity("Payment.Domain.Models.Payment", b =>
                {
                    b.Navigation("PaymentDetails");
                });

            modelBuilder.Entity("Payment.Domain.Models.PaymentMethod", b =>
                {
                    b.Navigation("Payments");
                });
#pragma warning restore 612, 618
        }
    }
}
