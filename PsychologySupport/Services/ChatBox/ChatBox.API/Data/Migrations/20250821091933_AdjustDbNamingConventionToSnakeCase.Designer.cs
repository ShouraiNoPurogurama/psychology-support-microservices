// <auto-generated />
using System;
using ChatBox.API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ChatBox.API.Data.Migrations
{
    [DbContext(typeof(ChatBoxDbContext))]
    [Migration("20250821091933_AdjustDbNamingConventionToSnakeCase")]
    partial class AdjustDbNamingConventionToSnakeCase
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("public")
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ChatBox.API.Models.AIChatSession", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<DateTime?>("LastSummarizedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_summarized_at");

                    b.Property<int?>("LastSummarizedIndex")
                        .HasColumnType("integer")
                        .HasColumnName("last_summarized_index");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("PersonaSnapshotJson")
                        .HasColumnType("jsonb")
                        .HasColumnName("PersonaSnapshot");

                    b.Property<string>("Summarization")
                        .HasColumnType("text")
                        .HasColumnName("summarization");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_ai_chat_sessions");

                    b.ToTable("ai_chat_sessions", "public");
                });

            modelBuilder.Entity("ChatBox.API.Models.AIMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("BlockNumber")
                        .HasColumnType("integer")
                        .HasColumnName("block_number");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<bool>("IsRead")
                        .HasColumnType("boolean")
                        .HasColumnName("is_read");

                    b.Property<bool>("SenderIsEmo")
                        .HasColumnType("boolean")
                        .HasColumnName("sender_is_emo");

                    b.Property<Guid?>("SenderUserId")
                        .HasColumnType("uuid")
                        .HasColumnName("sender_user_id");

                    b.Property<Guid>("SessionId")
                        .HasColumnType("uuid")
                        .HasColumnName("session_id");

                    b.HasKey("Id")
                        .HasName("pk_ai_chat_messages");

                    b.HasIndex("SessionId")
                        .HasDatabaseName("ix_ai_chat_messages_session_id");

                    b.ToTable("ai_chat_messages", "public");
                });

            modelBuilder.Entity("ChatBox.API.Models.DoctorPatientBooking", b =>
                {
                    b.Property<Guid>("BookingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("booking_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid>("DoctorUserId")
                        .HasColumnType("uuid")
                        .HasColumnName("doctor_user_id");

                    b.Property<Guid>("PatientUserId")
                        .HasColumnType("uuid")
                        .HasColumnName("patient_user_id");

                    b.HasKey("BookingId")
                        .HasName("pk_doctor_patients");

                    b.ToTable("doctor_patients", "public");
                });

            modelBuilder.Entity("ChatBox.API.Models.Message", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<bool>("IsRead")
                        .HasColumnType("boolean")
                        .HasColumnName("is_read");

                    b.Property<Guid>("ReceiverUserId")
                        .HasColumnType("uuid")
                        .HasColumnName("receiver_user_id");

                    b.Property<Guid>("SenderUserId")
                        .HasColumnType("uuid")
                        .HasColumnName("sender_user_id");

                    b.HasKey("Id")
                        .HasName("pk_messages");

                    b.ToTable("messages", "public");
                });

            modelBuilder.Entity("ChatBox.API.Models.AIMessage", b =>
                {
                    b.HasOne("ChatBox.API.Models.AIChatSession", "Session")
                        .WithMany()
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_ai_chat_messages_ai_chat_sessions_session_id");

                    b.Navigation("Session");
                });
#pragma warning restore 612, 618
        }
    }
}
