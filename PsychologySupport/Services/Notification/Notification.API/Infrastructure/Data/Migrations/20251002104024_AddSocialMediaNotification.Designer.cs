// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Notification.API.Infrastructure.Data;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Notification.API.Data.Migrations
{
    [DbContext(typeof(NotificationDbContext))]
    [Migration("20251002104024_AddSocialMediaNotification")]
    partial class AddSocialMediaNotification
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("public")
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Notification.API.Features.Emails.Models.EmailTrace", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("body");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid>("MessageId")
                        .HasColumnType("uuid")
                        .HasColumnName("message_id");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("subject");

                    b.Property<string>("To")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("to");

                    b.Property<string>("TrackerId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("tracker_id");

                    b.HasKey("Id")
                        .HasName("pk_email_traces");

                    b.ToTable("email_traces", "public");
                });

            modelBuilder.Entity("Notification.API.Features.Notifications.Models.ProcessedIntegrationEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<string>("EventType")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("event_type");

                    b.Property<DateTimeOffset?>("LastModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text")
                        .HasColumnName("last_modified_by");

                    b.Property<DateTimeOffset>("ReceivedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("received_at");

                    b.HasKey("Id")
                        .HasName("pk_processed_integration_events");

                    b.HasIndex("ReceivedAt")
                        .HasDatabaseName("idx_processed_events_received");

                    b.ToTable("processed_integration_events", "public");
                });

            modelBuilder.Entity("Notification.API.Features.Notifications.Models.UserNotification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("ActorAliasId")
                        .HasColumnType("uuid")
                        .HasColumnName("actor_alias_id");

                    b.Property<string>("ActorDisplayName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("actor_display_name");

                    b.Property<Guid?>("CommentId")
                        .HasColumnType("uuid")
                        .HasColumnName("comment_id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<string>("DedupeHash")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("dedupe_hash");

                    b.Property<DateTimeOffset?>("ExpiresAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expires_at");

                    b.Property<Guid?>("FollowId")
                        .HasColumnType("uuid")
                        .HasColumnName("follow_id");

                    b.Property<string>("GroupingKey")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("grouping_key");

                    b.Property<bool>("IsRead")
                        .HasColumnType("boolean")
                        .HasColumnName("is_read");

                    b.Property<DateTimeOffset?>("LastModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text")
                        .HasColumnName("last_modified_by");

                    b.Property<string>("ModerationAction")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("moderation_action");

                    b.Property<Guid?>("PostId")
                        .HasColumnType("uuid")
                        .HasColumnName("post_id");

                    b.Property<Guid?>("ReactionId")
                        .HasColumnType("uuid")
                        .HasColumnName("reaction_id");

                    b.Property<DateTimeOffset?>("ReadAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("read_at");

                    b.Property<Guid>("RecipientAliasId")
                        .HasColumnType("uuid")
                        .HasColumnName("recipient_alias_id");

                    b.Property<string>("Snippet")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("snippet");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.Property<int>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.HasKey("Id")
                        .HasName("pk_user_notifications");

                    b.HasIndex("DedupeHash")
                        .HasDatabaseName("idx_user_notifications_dedupe");

                    b.HasIndex("RecipientAliasId", "CreatedAt")
                        .HasDatabaseName("idx_user_notifications_recipient_created");

                    b.HasIndex("GroupingKey", "RecipientAliasId", "IsRead")
                        .HasDatabaseName("idx_user_notifications_grouping");

                    b.HasIndex("RecipientAliasId", "IsRead", "CreatedAt")
                        .HasDatabaseName("idx_user_notifications_recipient_unread")
                        .HasFilter("is_read = false");

                    b.HasIndex("RecipientAliasId", "Type", "CreatedAt")
                        .HasDatabaseName("idx_user_notifications_recipient_type");

                    b.ToTable("user_notifications", "public");
                });

            modelBuilder.Entity("Notification.API.Features.Preferences.Models.NotificationPreferences", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<bool>("BotEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("bot_enabled");

                    b.Property<bool>("CommentsEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("comments_enabled");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<bool>("FollowsEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("follows_enabled");

                    b.Property<DateTimeOffset?>("LastModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text")
                        .HasColumnName("last_modified_by");

                    b.Property<bool>("MentionsEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("mentions_enabled");

                    b.Property<bool>("ModerationEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("moderation_enabled");

                    b.Property<bool>("ReactionsEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("reactions_enabled");

                    b.Property<bool>("SystemEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("system_enabled");

                    b.HasKey("Id")
                        .HasName("pk_notification_preferences");

                    b.ToTable("notification_preferences", "public");
                });

            modelBuilder.Entity("Notification.API.Infrastructure.Persistence.Models.OutboxMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset?>("LastModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text")
                        .HasColumnName("last_modified_by");

                    b.Property<DateTimeOffset>("OccuredOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("occured_on");

                    b.Property<DateTimeOffset?>("ProcessedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("processed_on");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("pk_outbox_messages");

                    b.ToTable("outbox_messages", "public");
                });
#pragma warning restore 612, 618
        }
    }
}
