// <auto-generated />
using System;
using Alias.API.Data.Public;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Alias.API.Data.Public.Migrations
{
    [DbContext(typeof(PublicDbContext))]
    [Migration("20250825080933_UpdateAudiableEntities")]
    partial class UpdateAudiableEntities
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("public")
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "public", "nickname_source", new[] { "gacha", "custom" });
            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "citext");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Alias.API.Models.Public.Alias", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset?>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<Guid?>("CurrentVersionId")
                        .HasColumnType("uuid")
                        .HasColumnName("current_version_id");

                    b.Property<DateTimeOffset?>("LastModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text")
                        .HasColumnName("last_modified_by");

                    b.HasKey("Id")
                        .HasName("aliases_pkey");

                    b.HasIndex("CurrentVersionId")
                        .HasDatabaseName("ix_aliases_current_version_id");

                    b.ToTable("aliases", "public");
                });

            modelBuilder.Entity("Alias.API.Models.Public.AliasAudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("action");

                    b.Property<Guid>("AliasId")
                        .HasColumnType("uuid")
                        .HasColumnName("alias_id");

                    b.Property<DateTimeOffset?>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<string>("Details")
                        .HasColumnType("jsonb")
                        .HasColumnName("details");

                    b.HasKey("Id")
                        .HasName("alias_audits_pkey");

                    b.HasIndex(new[] { "AliasId" }, "ix_alias_audits_alias")
                        .HasDatabaseName("ix_alias_audits_alias_id");

                    b.ToTable("alias_audits", "public");
                });

            modelBuilder.Entity("Alias.API.Models.Public.AliasVersion", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("AliasId")
                        .HasColumnType("uuid")
                        .HasColumnName("alias_id");

                    b.Property<string>("AliasKey")
                        .IsRequired()
                        .HasColumnType("citext")
                        .HasColumnName("alias_key");

                    b.Property<string>("AliasLabel")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("alias_label");

                    b.Property<DateTimeOffset?>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<string>("NicknameSource")
                        .IsRequired()
                        .HasColumnType("public.nickname_source")
                        .HasColumnName("nickname_source");

                    b.Property<DateTime>("ValidFrom")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("valid_from");

                    b.Property<DateTime?>("ValidTo")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("valid_to");

                    b.HasKey("Id")
                        .HasName("alias_versions_pkey");

                    b.HasIndex(new[] { "AliasId" }, "ix_alias_versions_alias_id")
                        .HasDatabaseName("ix_alias_versions_alias_id");

                    b.HasIndex(new[] { "AliasKey" }, "uniq_alias_key_current")
                        .IsUnique()
                        .HasDatabaseName("ix_alias_versions_alias_key")
                        .HasFilter("(valid_to IS NULL)");

                    b.ToTable("alias_versions", "public");
                });

            modelBuilder.Entity("Alias.API.Models.Public.Alias", b =>
                {
                    b.HasOne("Alias.API.Models.Public.AliasVersion", null)
                        .WithMany()
                        .HasForeignKey("CurrentVersionId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("aliases_current_version_id_fkey");
                });

            modelBuilder.Entity("Alias.API.Models.Public.AliasVersion", b =>
                {
                    b.HasOne("Alias.API.Models.Public.Alias", "Alias")
                        .WithMany("AliasVersions")
                        .HasForeignKey("AliasId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("alias_versions_alias_id_fkey");

                    b.Navigation("Alias");
                });

            modelBuilder.Entity("Alias.API.Models.Public.Alias", b =>
                {
                    b.Navigation("AliasVersions");
                });
#pragma warning restore 612, 618
        }
    }
}
