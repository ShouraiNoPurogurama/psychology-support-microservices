// <auto-generated />
using System;
using Alias.API.Data.Public;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Alias.API.Data.Public.Migrations
{
    [DbContext(typeof(AliasDbContext))]
    [Migration("20251015154419_AddAliasPreference")]
    partial class AddAliasPreference
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "citext");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Alias.API.Aliases.Models.Aliases.Alias", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("AvatarMediaId")
                        .HasColumnType("uuid")
                        .HasColumnName("avatar_media_id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<Guid?>("CurrentVersionId")
                        .HasColumnType("uuid")
                        .HasColumnName("current_version_id");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text")
                        .HasColumnName("deleted_by");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<DateTimeOffset?>("LastModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text")
                        .HasColumnName("last_modified_by");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<DateTimeOffset?>("SuspendedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("suspended_at");

                    b.Property<string>("SuspensionReason")
                        .HasColumnType("text")
                        .HasColumnName("suspension_reason");

                    b.Property<string>("Visibility")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("Public")
                        .HasColumnName("visibility");

                    b.HasKey("Id")
                        .HasName("aliases_pkey");

                    b.ToTable("aliases", (string)null);
                });

            modelBuilder.Entity("Alias.API.Aliases.Models.Aliases.AliasAudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("action");

                    b.Property<Guid>("AliasId")
                        .HasColumnType("uuid")
                        .HasColumnName("alias_id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<string>("Details")
                        .HasColumnType("jsonb")
                        .HasColumnName("details");

                    b.HasKey("Id")
                        .HasName("alias_audits_pkey");

                    b.HasIndex(new[] { "AliasId" }, "ix_alias_audits_alias")
                        .HasDatabaseName("ix_alias_audits_alias_id");

                    b.ToTable("alias_audits", (string)null);
                });

            modelBuilder.Entity("Alias.API.Aliases.Models.Aliases.AliasVersion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("AliasId")
                        .HasColumnType("uuid")
                        .HasColumnName("alias_id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("display_name");

                    b.Property<string>("NicknameSource")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nickname_source");

                    b.Property<string>("SearchKey")
                        .IsRequired()
                        .HasColumnType("citext")
                        .HasColumnName("search_key");

                    b.Property<string>("UniqueKey")
                        .IsRequired()
                        .HasColumnType("citext")
                        .HasColumnName("unique_key");

                    b.Property<DateTimeOffset>("ValidFrom")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("valid_from");

                    b.Property<DateTimeOffset?>("ValidTo")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("valid_to");

                    b.HasKey("Id")
                        .HasName("alias_versions_pkey");

                    b.HasIndex(new[] { "SearchKey" }, "idx_search_key_current")
                        .HasDatabaseName("ix_alias_versions_search_key")
                        .HasFilter("(valid_to IS NULL)");

                    b.HasIndex(new[] { "AliasId" }, "ix_alias_versions_alias_id")
                        .HasDatabaseName("ix_alias_versions_alias_id");

                    b.HasIndex(new[] { "UniqueKey" }, "uniq_unique_key_current")
                        .IsUnique()
                        .HasDatabaseName("ix_alias_versions_unique_key")
                        .HasFilter("(valid_to IS NULL)");

                    b.ToTable("alias_versions", (string)null);
                });

            modelBuilder.Entity("Alias.API.Aliases.Models.Follows.Follow", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<Guid>("FollowedAliasId")
                        .HasColumnType("uuid")
                        .HasColumnName("followed_alias_id");

                    b.Property<DateTimeOffset>("FollowedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("followed_at");

                    b.Property<Guid>("FollowerAliasId")
                        .HasColumnType("uuid")
                        .HasColumnName("follower_alias_id");

                    b.Property<DateTimeOffset?>("LastModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text")
                        .HasColumnName("last_modified_by");

                    b.HasKey("Id")
                        .HasName("follows_pkey");

                    b.HasIndex("FollowerAliasId", "FollowedAliasId")
                        .IsUnique()
                        .HasDatabaseName("uix_follows_follower_followed");

                    b.HasIndex(new[] { "FollowedAliasId" }, "ix_follows_followed_alias_id")
                        .HasDatabaseName("ix_follows_followed_alias_id");

                    b.HasIndex(new[] { "FollowerAliasId" }, "ix_follows_follower_alias_id")
                        .HasDatabaseName("ix_follows_follower_alias_id");

                    b.ToTable("follows", (string)null);
                });

            modelBuilder.Entity("Alias.API.Aliases.Models.Aliases.Alias", b =>
                {
                    b.OwnsOne("Alias.API.Aliases.Models.Aliases.ValueObjects.AliasLabel", "Label", b1 =>
                        {
                            b1.Property<Guid>("AliasId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("SearchKey")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("search_key");

                            b1.Property<string>("UniqueKey")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("unique_key");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("value");

                            b1.HasKey("AliasId");

                            b1.ToTable("aliases");

                            b1.WithOwner()
                                .HasForeignKey("AliasId")
                                .HasConstraintName("fk_aliases_aliases_id");
                        });

                    b.OwnsOne("Alias.API.Aliases.Models.Aliases.ValueObjects.AliasMetadata", "Metadata", b1 =>
                        {
                            b1.Property<Guid>("AliasId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<long>("CommentsCount")
                                .HasColumnType("bigint")
                                .HasColumnName("comments_count");

                            b1.Property<DateTimeOffset>("CreatedAt")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("metadata_created_at");

                            b1.Property<long>("FollowersCount")
                                .HasColumnType("bigint")
                                .HasColumnName("followers_count");

                            b1.Property<long>("FollowingCount")
                                .HasColumnType("bigint")
                                .HasColumnName("following_count");

                            b1.Property<bool>("IsSystemGenerated")
                                .HasColumnType("boolean")
                                .HasColumnName("is_system_generated");

                            b1.Property<DateTimeOffset?>("LastActiveAt")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("last_active_at");

                            b1.Property<long>("PostsCount")
                                .HasColumnType("bigint")
                                .HasColumnName("posts_count");

                            b1.Property<long>("ReactionGivenCount")
                                .HasColumnType("bigint")
                                .HasColumnName("reaction_given_count");

                            b1.Property<long>("ReactionReceivedCount")
                                .HasColumnType("bigint")
                                .HasColumnName("reaction_received_count");

                            b1.Property<long>("SharesCount")
                                .HasColumnType("bigint")
                                .HasColumnName("shares_count");

                            b1.Property<int>("VersionCount")
                                .HasColumnType("integer")
                                .HasColumnName("version_count");

                            b1.HasKey("AliasId");

                            b1.ToTable("aliases");

                            b1.WithOwner()
                                .HasForeignKey("AliasId")
                                .HasConstraintName("fk_aliases_aliases_id");
                        });

                    b.OwnsOne("Alias.API.Aliases.Models.Aliases.ValueObjects.UserPreferences", "Preferences", b1 =>
                        {
                            b1.Property<Guid>("AliasId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("Language")
                                .IsRequired()
                                .ValueGeneratedOnAdd()
                                .HasMaxLength(3)
                                .HasColumnType("character varying(3)")
                                .HasDefaultValue("VI")
                                .HasColumnName("preference_language");

                            b1.Property<bool>("NotificationsEnabled")
                                .HasColumnType("boolean")
                                .HasColumnName("preference_notifications_enabled");

                            b1.Property<string>("Theme")
                                .IsRequired()
                                .ValueGeneratedOnAdd()
                                .HasMaxLength(15)
                                .HasColumnType("character varying(15)")
                                .HasDefaultValue("Light")
                                .HasColumnName("preference_theme");

                            b1.HasKey("AliasId");

                            b1.ToTable("aliases");

                            b1.WithOwner()
                                .HasForeignKey("AliasId")
                                .HasConstraintName("fk_aliases_aliases_id");
                        });

                    b.Navigation("Label")
                        .IsRequired();

                    b.Navigation("Metadata")
                        .IsRequired();

                    b.Navigation("Preferences")
                        .IsRequired();
                });

            modelBuilder.Entity("Alias.API.Aliases.Models.Aliases.AliasAudit", b =>
                {
                    b.HasOne("Alias.API.Aliases.Models.Aliases.Alias", null)
                        .WithMany("AuditRecords")
                        .HasForeignKey("AliasId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_alias_audits_aliases_alias_id");
                });

            modelBuilder.Entity("Alias.API.Aliases.Models.Aliases.AliasVersion", b =>
                {
                    b.HasOne("Alias.API.Aliases.Models.Aliases.Alias", null)
                        .WithMany("Versions")
                        .HasForeignKey("AliasId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_alias_versions_aliases_alias_id");
                });

            modelBuilder.Entity("Alias.API.Aliases.Models.Follows.Follow", b =>
                {
                    b.HasOne("Alias.API.Aliases.Models.Aliases.Alias", null)
                        .WithMany()
                        .HasForeignKey("FollowedAliasId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_follows_followed_alias");

                    b.HasOne("Alias.API.Aliases.Models.Aliases.Alias", null)
                        .WithMany()
                        .HasForeignKey("FollowerAliasId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_follows_follower_alias");
                });

            modelBuilder.Entity("Alias.API.Aliases.Models.Aliases.Alias", b =>
                {
                    b.Navigation("AuditRecords");

                    b.Navigation("Versions");
                });
#pragma warning restore 612, 618
        }
    }
}
