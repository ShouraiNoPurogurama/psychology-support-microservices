// <auto-generated />
using System;
using Media.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Media.Infrastructure.Data.Migrations
{
    [DbContext(typeof(MediaDbContext))]
    [Migration("20250912133802_UpdateMediaModerationAudit")]
    partial class UpdateMediaModerationAudit
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Media.API.Media.Models.IdempotencyKey", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset?>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expires_at");

                    b.Property<Guid>("Key")
                        .HasColumnType("uuid")
                        .HasColumnName("key");

                    b.Property<string>("RequestHash")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("request_hash");

                    b.Property<string>("ResponsePayload")
                        .HasColumnType("text")
                        .HasColumnName("response_payload");

                    b.HasKey("Id")
                        .HasName("pk_idempotency_keys");

                    b.ToTable("idempotency_keys", (string)null);
                });

            modelBuilder.Entity("Media.API.Media.Models.MediaAsset", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("ChecksumSha256")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("checksum_sha256");

                    b.Property<DateTimeOffset?>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<bool>("ExifRemoved")
                        .HasColumnType("boolean")
                        .HasColumnName("exif_removed");

                    b.Property<int?>("Height")
                        .HasColumnType("integer")
                        .HasColumnName("height");

                    b.Property<bool>("HoldThumbUntilPass")
                        .HasColumnType("boolean")
                        .HasColumnName("hold_thumb_until_pass");

                    b.Property<DateTimeOffset?>("LastModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text")
                        .HasColumnName("last_modified_by");

                    b.Property<DateTime?>("ModerationCheckedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("moderation_checked_at");

                    b.Property<string>("ModerationPolicyVersion")
                        .HasColumnType("text")
                        .HasColumnName("moderation_policy_version");

                    b.Property<decimal?>("ModerationScore")
                        .HasColumnType("numeric")
                        .HasColumnName("moderation_score");

                    b.Property<string>("ModerationStatus")
                        .HasColumnType("text")
                        .HasColumnName("moderation_status");

                    b.Property<string>("Phash64")
                        .HasColumnType("text")
                        .HasColumnName("phash64");

                    b.Property<string>("RawModerationJson")
                        .HasColumnType("text")
                        .HasColumnName("raw_moderation_json");

                    b.Property<long>("SourceBytes")
                        .HasColumnType("bigint")
                        .HasColumnName("source_bytes");

                    b.Property<string>("SourceMime")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("source_mime");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("VARCHAR(20)")
                        .HasColumnName("state");

                    b.Property<int?>("Width")
                        .HasColumnType("integer")
                        .HasColumnName("width");

                    b.HasKey("Id")
                        .HasName("pk_media_assets");

                    b.ToTable("media_assets", (string)null);
                });

            modelBuilder.Entity("Media.API.Media.Models.MediaModerationAudit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset?>("CheckedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("checked_at");

                    b.Property<DateTimeOffset?>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset?>("LastModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text")
                        .HasColumnName("last_modified_by");

                    b.Property<Guid>("MediaId")
                        .HasColumnType("uuid")
                        .HasColumnName("media_id");

                    b.Property<string>("PolicyVersion")
                        .HasColumnType("text")
                        .HasColumnName("policy_version");

                    b.Property<string>("RawJson")
                        .HasColumnType("text")
                        .HasColumnName("raw_json");

                    b.Property<decimal?>("Score")
                        .HasColumnType("numeric")
                        .HasColumnName("score");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("VARCHAR(20)")
                        .HasColumnName("status");

                    b.HasKey("Id")
                        .HasName("pk_media_moderation_audits");

                    b.HasIndex("MediaId")
                        .HasDatabaseName("ix_media_moderation_audits_media_id");

                    b.ToTable("media_moderation_audits", (string)null);
                });

            modelBuilder.Entity("Media.API.Media.Models.MediaOwner", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset?>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset?>("LastModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text")
                        .HasColumnName("last_modified_by");

                    b.Property<Guid>("MediaId")
                        .HasColumnType("uuid")
                        .HasColumnName("media_id");

                    b.Property<Guid>("MediaOwnerId")
                        .HasColumnType("uuid")
                        .HasColumnName("media_owner_id");

                    b.Property<string>("MediaOwnerType")
                        .IsRequired()
                        .HasColumnType("VARCHAR(20)")
                        .HasColumnName("media_owner_type");

                    b.HasKey("Id")
                        .HasName("pk_media_owners");

                    b.HasIndex("MediaId")
                        .HasDatabaseName("ix_media_owners_media_id");

                    b.ToTable("media_owners", (string)null);
                });

            modelBuilder.Entity("Media.API.Media.Models.MediaProcessingJob", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("Attempt")
                        .HasColumnType("integer")
                        .HasColumnName("attempt");

                    b.Property<DateTimeOffset?>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<string>("ErrorMessage")
                        .HasColumnType("text")
                        .HasColumnName("error_message");

                    b.Property<string>("JobType")
                        .IsRequired()
                        .HasColumnType("VARCHAR(20)")
                        .HasColumnName("job_type");

                    b.Property<DateTimeOffset?>("LastModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text")
                        .HasColumnName("last_modified_by");

                    b.Property<Guid>("MediaId")
                        .HasColumnType("uuid")
                        .HasColumnName("media_id");

                    b.Property<DateTime?>("NextRetryAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("next_retry_at");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("VARCHAR(20)")
                        .HasColumnName("status");

                    b.HasKey("Id")
                        .HasName("pk_media_processing_jobs");

                    b.HasIndex("MediaId")
                        .HasDatabaseName("ix_media_processing_jobs_media_id");

                    b.ToTable("media_processing_jobs", (string)null);
                });

            modelBuilder.Entity("Media.API.Media.Models.MediaVariant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("BucketKey")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("bucket_key");

                    b.Property<long>("Bytes")
                        .HasColumnType("bigint")
                        .HasColumnName("bytes");

                    b.Property<string>("CdnUrl")
                        .HasColumnType("text")
                        .HasColumnName("cdn_url");

                    b.Property<DateTimeOffset?>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<string>("Format")
                        .IsRequired()
                        .HasColumnType("VARCHAR(20)")
                        .HasColumnName("format");

                    b.Property<int>("Height")
                        .HasColumnType("integer")
                        .HasColumnName("height");

                    b.Property<DateTimeOffset?>("LastModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text")
                        .HasColumnName("last_modified_by");

                    b.Property<Guid>("MediaId")
                        .HasColumnType("uuid")
                        .HasColumnName("media_id");

                    b.Property<string>("VariantType")
                        .IsRequired()
                        .HasColumnType("VARCHAR(20)")
                        .HasColumnName("variant_type");

                    b.Property<int>("Width")
                        .HasColumnType("integer")
                        .HasColumnName("width");

                    b.HasKey("Id")
                        .HasName("pk_media_variants");

                    b.HasIndex("MediaId")
                        .HasDatabaseName("ix_media_variants_media_id");

                    b.ToTable("media_variants", (string)null);
                });

            modelBuilder.Entity("Media.API.Media.Models.OutboxMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("AggregateId")
                        .HasColumnType("uuid")
                        .HasColumnName("aggregate_id");

                    b.Property<DateTimeOffset?>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<string>("EventType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("event_type");

                    b.Property<DateTimeOffset?>("LastModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text")
                        .HasColumnName("last_modified_by");

                    b.Property<DateTime>("OccurredOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("occurred_on");

                    b.Property<string>("Payload")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("payload");

                    b.Property<DateTime?>("ProcessedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("processed_on");

                    b.HasKey("Id")
                        .HasName("pk_outbox_messages");

                    b.ToTable("outbox_messages", (string)null);
                });

            modelBuilder.Entity("Media.API.Media.Models.MediaModerationAudit", b =>
                {
                    b.HasOne("Media.API.Media.Models.MediaAsset", "Media")
                        .WithMany("MediaModerationAudits")
                        .HasForeignKey("MediaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_media_moderation_audits_media_assets_media_id");

                    b.Navigation("Media");
                });

            modelBuilder.Entity("Media.API.Media.Models.MediaOwner", b =>
                {
                    b.HasOne("Media.API.Media.Models.MediaAsset", "Media")
                        .WithMany("MediaOwners")
                        .HasForeignKey("MediaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_media_owners_media_assets_media_id");

                    b.Navigation("Media");
                });

            modelBuilder.Entity("Media.API.Media.Models.MediaProcessingJob", b =>
                {
                    b.HasOne("Media.API.Media.Models.MediaAsset", "Media")
                        .WithMany("MediaProcessingJobs")
                        .HasForeignKey("MediaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_media_processing_jobs_media_assets_media_id");

                    b.Navigation("Media");
                });

            modelBuilder.Entity("Media.API.Media.Models.MediaVariant", b =>
                {
                    b.HasOne("Media.API.Media.Models.MediaAsset", "Media")
                        .WithMany("MediaVariants")
                        .HasForeignKey("MediaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_media_variants_media_assets_media_id");

                    b.Navigation("Media");
                });

            modelBuilder.Entity("Media.API.Media.Models.MediaAsset", b =>
                {
                    b.Navigation("MediaModerationAudits");

                    b.Navigation("MediaOwners");

                    b.Navigation("MediaProcessingJobs");

                    b.Navigation("MediaVariants");
                });
#pragma warning restore 612, 618
        }
    }
}
