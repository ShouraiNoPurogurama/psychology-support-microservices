// <auto-generated />
using System;
using Media.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Media.Infrastructure.Data.Migrations
{
    [DbContext(typeof(MediaDbContext))]
    partial class MediaDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("public")
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Media.Domain.Models.IdempotencyKey", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expires_at");

                    b.Property<Guid>("Key")
                        .HasColumnType("uuid")
                        .HasColumnName("key");

                    b.Property<string>("RequestHash")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("request_hash");

                    b.Property<string>("ResponsePayload")
                        .HasColumnType("text")
                        .HasColumnName("response_payload");

                    b.HasKey("Id")
                        .HasName("idempotency_keys_pkey");

                    b.HasIndex(new[] { "Key" }, "idempotency_keys_key")
                        .IsUnique()
                        .HasDatabaseName("ix_idempotency_keys_key");

                    b.HasIndex(new[] { "ExpiresAt" }, "ix_idempotency_keys_expires_at")
                        .HasDatabaseName("ix_idempotency_keys_expires_at");

                    b.ToTable("idempotency_keys", "public");
                });

            modelBuilder.Entity("Media.Domain.Models.MediaAsset", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("deleted_by");

                    b.Property<bool>("ExifRemoved")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("exif_removed");

                    b.Property<bool>("HoldThumbUntilPass")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("hold_thumb_until_pass");

                    b.Property<DateTimeOffset?>("LastModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text")
                        .HasColumnName("last_modified_by");

                    b.Property<string>("Purpose")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("NotSpecified")
                        .HasColumnName("purpose");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("state");

                    b.HasKey("Id")
                        .HasName("pk_media_assets");

                    b.HasIndex("State")
                        .HasDatabaseName("ix_media_assets_state");

                    b.HasIndex("CreatedAt", "State")
                        .HasDatabaseName("ix_media_assets_created_state");

                    b.ToTable("media_assets", "public");
                });

            modelBuilder.Entity("Media.Domain.Models.MediaModerationAudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset?>("CheckedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("checked_at");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset?>("LastModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text")
                        .HasColumnName("last_modified_by");

                    b.Property<Guid>("MediaId")
                        .HasColumnType("uuid")
                        .HasColumnName("media_id");

                    b.Property<string>("PolicyVersion")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("policy_version");

                    b.Property<string>("RawJson")
                        .HasColumnType("text")
                        .HasColumnName("raw_json");

                    b.Property<decimal?>("Score")
                        .HasPrecision(5, 4)
                        .HasColumnType("numeric(5,4)")
                        .HasColumnName("score");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("status");

                    b.HasKey("Id")
                        .HasName("pk_media_moderation_audits");

                    b.HasIndex("CheckedAt")
                        .HasDatabaseName("ix_moderation_audits_checked_at");

                    b.HasIndex("MediaId")
                        .HasDatabaseName("ix_moderation_audits_media_id");

                    b.ToTable("media_moderation_audits", "public");
                });

            modelBuilder.Entity("Media.Domain.Models.MediaOwner", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset?>("LastModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text")
                        .HasColumnName("last_modified_by");

                    b.Property<Guid>("MediaId")
                        .HasColumnType("uuid")
                        .HasColumnName("media_id");

                    b.Property<Guid>("MediaOwnerId")
                        .HasColumnType("uuid")
                        .HasColumnName("media_owner_id");

                    b.Property<string>("MediaOwnerType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("media_owner_type");

                    b.HasKey("Id")
                        .HasName("pk_media_owners");

                    b.HasIndex("MediaOwnerType", "MediaOwnerId")
                        .HasDatabaseName("ix_media_owners_owner");

                    b.HasIndex("MediaId", "MediaOwnerType", "MediaOwnerId")
                        .IsUnique()
                        .HasDatabaseName("ux_media_owners_unique");

                    b.ToTable("media_owners", "public");
                });

            modelBuilder.Entity("Media.Domain.Models.MediaProcessingJob", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("Attempt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("attempt");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<string>("ErrorMessage")
                        .HasColumnType("text")
                        .HasColumnName("error_message");

                    b.Property<string>("JobType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("job_type");

                    b.Property<DateTimeOffset?>("LastModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text")
                        .HasColumnName("last_modified_by");

                    b.Property<Guid>("MediaId")
                        .HasColumnType("uuid")
                        .HasColumnName("media_id");

                    b.Property<DateTime?>("NextRetryAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("next_retry_at");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("status");

                    b.HasKey("Id")
                        .HasName("pk_media_processing_jobs");

                    b.HasIndex("MediaId")
                        .HasDatabaseName("ix_processing_jobs_media_id");

                    b.HasIndex("JobType", "Status")
                        .HasDatabaseName("ix_processing_jobs_type_status");

                    b.HasIndex("Status", "NextRetryAt")
                        .HasDatabaseName("ix_processing_jobs_queue")
                        .HasFilter("status NOT IN ('Succeeded', 'Failed', 'Cancelled')");

                    b.ToTable("media_processing_jobs", "public");
                });

            modelBuilder.Entity("Media.Domain.Models.MediaVariant", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("BucketKey")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("bucket_key");

                    b.Property<long>("Bytes")
                        .HasColumnType("bigint")
                        .HasColumnName("bytes");

                    b.Property<string>("CdnUrl")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("cdn_url");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<string>("Format")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("format");

                    b.Property<int>("Height")
                        .HasColumnType("integer")
                        .HasColumnName("height");

                    b.Property<DateTimeOffset?>("LastModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text")
                        .HasColumnName("last_modified_by");

                    b.Property<Guid>("MediaId")
                        .HasColumnType("uuid")
                        .HasColumnName("media_id");

                    b.Property<string>("VariantType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("variant_type");

                    b.Property<int>("Width")
                        .HasColumnType("integer")
                        .HasColumnName("width");

                    b.HasKey("Id")
                        .HasName("pk_media_variants");

                    b.HasIndex("CdnUrl")
                        .HasDatabaseName("ix_media_variants_cdn_url")
                        .HasFilter("cdn_url IS NOT NULL");

                    b.HasIndex("MediaId")
                        .HasDatabaseName("ix_media_variants_media_id");

                    b.HasIndex("MediaId", "VariantType")
                        .IsUnique()
                        .HasDatabaseName("ux_media_variants_media_type");

                    b.ToTable("media_variants", "public");
                });

            modelBuilder.Entity("Media.Domain.Models.OutboxMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("AggregateId")
                        .HasColumnType("uuid")
                        .HasColumnName("aggregate_id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<string>("EventType")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("event_type");

                    b.Property<DateTimeOffset?>("LastModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text")
                        .HasColumnName("last_modified_by");

                    b.Property<DateTime>("OccurredOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("occurred_on");

                    b.Property<string>("Payload")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("payload");

                    b.Property<DateTime?>("ProcessedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("processed_on");

                    b.HasKey("Id")
                        .HasName("outbox_messages_pkey");

                    b.HasIndex(new[] { "OccurredOn" }, "ix_outbox_pending")
                        .HasDatabaseName("ix_outbox_messages_occurred_on")
                        .HasFilter("processed_on IS NULL");

                    b.HasIndex(new[] { "ProcessedOn" }, "ix_outbox_processed")
                        .HasDatabaseName("ix_outbox_messages_processed_on")
                        .HasFilter("processed_on IS NOT NULL");

                    b.ToTable("outbox_messages", "public");
                });

            modelBuilder.Entity("Media.Domain.Models.MediaAsset", b =>
                {
                    b.OwnsOne("Media.Domain.ValueObjects.MediaChecksum", "Checksum", b1 =>
                        {
                            b1.Property<Guid>("MediaAssetId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("Algorithm")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)")
                                .HasColumnName("checksum_algorithm");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("checksum_value");

                            b1.HasKey("MediaAssetId");

                            b1.ToTable("media_assets", "public");

                            b1.WithOwner()
                                .HasForeignKey("MediaAssetId")
                                .HasConstraintName("fk_media_assets_media_assets_id");
                        });

                    b.OwnsOne("Media.Domain.ValueObjects.MediaContent", "Content", b1 =>
                        {
                            b1.Property<Guid>("MediaAssetId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("MimeType")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("mime_type");

                            b1.Property<string>("Phash64")
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("phash64");

                            b1.Property<long>("SizeInBytes")
                                .HasColumnType("bigint")
                                .HasColumnName("size_in_bytes");

                            b1.HasKey("MediaAssetId");

                            b1.ToTable("media_assets", "public");

                            b1.WithOwner()
                                .HasForeignKey("MediaAssetId")
                                .HasConstraintName("fk_media_assets_media_assets_id");
                        });

                    b.OwnsOne("Media.Domain.ValueObjects.MediaDimensions", "Dimensions", b1 =>
                        {
                            b1.Property<Guid>("MediaAssetId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<long>("AspectRatioDenominator")
                                .HasColumnType("bigint")
                                .HasColumnName("aspect_ratio_denominator");

                            b1.Property<long>("AspectRatioNumerator")
                                .HasColumnType("bigint")
                                .HasColumnName("aspect_ratio_numerator");

                            b1.Property<int>("Height")
                                .HasColumnType("integer")
                                .HasColumnName("height");

                            b1.Property<int>("Width")
                                .HasColumnType("integer")
                                .HasColumnName("width");

                            b1.HasKey("MediaAssetId");

                            b1.ToTable("media_assets", "public");

                            b1.WithOwner()
                                .HasForeignKey("MediaAssetId")
                                .HasConstraintName("fk_media_assets_media_assets_id");
                        });

                    b.OwnsOne("Media.Domain.ValueObjects.MediaModerationInfo", "Moderation", b1 =>
                        {
                            b1.Property<Guid>("MediaAssetId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<DateTime?>("CheckedAt")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("moderation_checked_at");

                            b1.Property<string>("PolicyVersion")
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)")
                                .HasColumnName("moderation_policy_version");

                            b1.Property<string>("RawJson")
                                .HasColumnType("text")
                                .HasColumnName("moderation_raw_json");

                            b1.Property<decimal?>("Score")
                                .HasPrecision(5, 4)
                                .HasColumnType("numeric(5,4)")
                                .HasColumnName("moderation_score");

                            b1.Property<string>("Status")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)")
                                .HasColumnName("moderation_status");

                            b1.HasKey("MediaAssetId");

                            b1.ToTable("media_assets", "public");

                            b1.WithOwner()
                                .HasForeignKey("MediaAssetId")
                                .HasConstraintName("fk_media_assets_media_assets_id");
                        });

                    b.Navigation("Checksum")
                        .IsRequired();

                    b.Navigation("Content")
                        .IsRequired();

                    b.Navigation("Dimensions");

                    b.Navigation("Moderation")
                        .IsRequired();
                });

            modelBuilder.Entity("Media.Domain.Models.MediaModerationAudit", b =>
                {
                    b.HasOne("Media.Domain.Models.MediaAsset", "Media")
                        .WithMany("ModerationAudits")
                        .HasForeignKey("MediaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_media_moderation_audits_media_assets_media_id");

                    b.Navigation("Media");
                });

            modelBuilder.Entity("Media.Domain.Models.MediaOwner", b =>
                {
                    b.HasOne("Media.Domain.Models.MediaAsset", "Media")
                        .WithMany("Owners")
                        .HasForeignKey("MediaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_media_owners_media_assets_media_id");

                    b.Navigation("Media");
                });

            modelBuilder.Entity("Media.Domain.Models.MediaProcessingJob", b =>
                {
                    b.HasOne("Media.Domain.Models.MediaAsset", "Media")
                        .WithMany("ProcessingJobs")
                        .HasForeignKey("MediaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_media_processing_jobs_media_assets_media_id");

                    b.Navigation("Media");
                });

            modelBuilder.Entity("Media.Domain.Models.MediaVariant", b =>
                {
                    b.HasOne("Media.Domain.Models.MediaAsset", "Media")
                        .WithMany("Variants")
                        .HasForeignKey("MediaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_media_variants_media_assets_media_id");

                    b.Navigation("Media");
                });

            modelBuilder.Entity("Media.Domain.Models.MediaAsset", b =>
                {
                    b.Navigation("ModerationAudits");

                    b.Navigation("Owners");

                    b.Navigation("ProcessingJobs");

                    b.Navigation("Variants");
                });
#pragma warning restore 612, 618
        }
    }
}
