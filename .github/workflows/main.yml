# name: Deploy to VPS (Compose Pull+Up + Auto Health)

# on:
#   # T·ª± ƒë·ªông ch·∫°y sau workflow build
#   workflow_run:
#     workflows: [ "Build & Push Microservices (GHCR)" ]
#     types: [ completed ]

#   # N√∫t b·∫•m th·ªß c√¥ng: c√≥ input deploy_all
#   workflow_dispatch:
#     inputs:
#       deploy_all:
#         description: "Deploy t·∫•t c·∫£ services (b·ªè qua detect diff)?"
#         required: false
#         default: "false"
#         type: choice
#         options: ["false", "true"]
#       image_tag:
#         description: "Tag image ƒë·ªÉ deploy (main ho·∫∑c SHA c·ª• th·ªÉ)"
#         required: false
#         default: "main"
#         type: string

# permissions:
#   actions: read
#   contents: read

# jobs:
#   deploy:
#     if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}
#     runs-on: ubuntu-latest
#     steps:
#       - name: Deploy via SSH (detect diff on VPS + selective OR deploy-all)
#         uses: appleboy/ssh-action@master
#         env:
#           # Khi workflow_run: d√πng head_sha c·ªßa run build; khi b·∫•m tay: d√πng input image_tag (m·∫∑c ƒë·ªãnh main)
#           EFFECTIVE_TAG: ${{ github.event_name == 'workflow_run' && github.event.workflow_run.head_sha || inputs.image_tag }}
#           FORCE_ALL: ${{ github.event_name == 'workflow_dispatch' && inputs.deploy_all || 'false' }}
#         with:
#           host: ${{ secrets.VPS_HOST }}
#           username: ${{ secrets.VPS_USERNAME }}
#           password: ${{ secrets.VPS_PASSWORD }}
#           command_timeout: 30m
#           script: |
#             set -euo pipefail

#             WORKDIR="/home/emoease/PsychologySupport"
#             COMPOSE="docker-compose-apis.yml"

#             cd "$WORKDIR"

#             echo "üìù L·∫•y m·ªëc commit c≈© (n·∫øu c√≥)"
#             OLD_COMMIT="$(cat .deploy_commit 2>/dev/null || git rev-parse HEAD)"

#             echo "üìù Git pull main"
#             git reset --hard
#             git pull origin main

#             NEW_COMMIT="$(git rev-parse HEAD)"
#             echo "Diff range: ${OLD_COMMIT}..${NEW_COMMIT}"

#             echo "üîê Login GHCR"
#             echo "${{ secrets.GIT_CONTAINER_REGISTRY_PASSWORD }}" | docker login ghcr.io -u "${{ secrets.GIT_CONTAINER_REGISTRY_USERNAME }}" --password-stdin

#             # ====== Image tag ======
#             NEW_TAG="${EFFECTIVE_TAG:-main}"
#             echo "üìù Set IMAGE_TAG=${NEW_TAG}"
#             cp -f .env ".env.backup.$(date +%s)" || true
#             touch .env
#             set_kv () {
#               local k="$1"; local v="$2"
#               if grep -qE "^${k}=" .env; then
#                 sed -i "s|^${k}=.*|${k}=${v}|" .env
#               else
#                 echo "${k}=${v}" >> .env
#               fi
#             }
#             set_kv IMAGE_TAG "${NEW_TAG}"
#             echo "üìÑ .env hi·ªán t·∫°i:"; cat .env || true

#             # ====== Danh s√°ch services chu·∫©n ======
#             ALL_SERVICES=(
#               "alias.api" "auth.api" "chatbox.api" "feed.api" "media.api"
#               "payment.api" "post.api" "profile.api" "promotion.grpc"
#               "subscription.api" "test.api" "translation.api" "yarpapigateway"
#             )

#             # ====== Ch·∫ø ƒë·ªô deploy-all khi b·∫•m n√∫t ======
#             if [ "${FORCE_ALL}" = "true" ]; then
#               echo "üîò FORCE_ALL=true ‚Üí Deploy ALL services (tag: ${NEW_TAG})"
#               mapfile -t SERVICES < <(printf '%s\n' "${ALL_SERVICES[@]}" | sort)
#             else
#               echo "üßÆ T√≠nh file thay ƒë·ªïi"
#               mapfile -t CHANGED_FILES < <(git diff --name-only --diff-filter=ACMR "${OLD_COMMIT}".."${NEW_COMMIT}" || true)

#               declare -A SVC_SET=()
#               add_svc(){ SVC_SET["$1"]=1; }

#               if [ ${#CHANGED_FILES[@]} -eq 0 ]; then
#                 echo "‚ö†Ô∏è Kh√¥ng c√≥ file thay ƒë·ªïi (c√≥ th·ªÉ l·∫ßn ƒë·∫ßu deploy) ‚Üí deploy all"
#                 for s in "${ALL_SERVICES[@]}"; do add_svc "$s"; done
#               else
#                 for f in "${CHANGED_FILES[@]}"; do
#                   case "$f" in
#                     Services/Alias/Alias.API/*|PsychologySupport/Services/Alias/Alias.API/*)                     add_svc "alias.api" ;;
#                     Services/Auth/Auth.API/*|PsychologySupport/Services/Auth/Auth.API/*)                         add_svc "auth.api" ;;
#                     Services/ChatBox/ChatBox.API/*|PsychologySupport/Services/ChatBox/ChatBox.API/*)             add_svc "chatbox.api" ;;
#                     Services/Feed/Feed.API/*|PsychologySupport/Services/Feed/Feed.API/*)                         add_svc "feed.api" ;;
#                     Services/Media/Media.API/*|PsychologySupport/Services/Media/Media.API/*)                     add_svc "media.api" ;;
#                     Services/Payment/Payment.API/*|PsychologySupport/Services/Payment/Payment.API/*)             add_svc "payment.api" ;;
#                     Services/Post/Post.API/*|PsychologySupport/Services/Post/Post.API/*)                         add_svc "post.api" ;;
#                     Services/Profile/Profile.API/*|PsychologySupport/Services/Profile/Profile.API/*)             add_svc "profile.api" ;;
#                     Services/Promotion/Promotion.Grpc/*|PsychologySupport/Services/Promotion/Promotion.Grpc/*)   add_svc "promotion.grpc" ;;
#                     Services/Subscription/Subscription.API/*|PsychologySupport/Services/Subscription/Subscription.API/*) add_svc "subscription.api" ;;
#                     Services/Test/Test.API/*|PsychologySupport/Services/Test/Test.API/*)                         add_svc "test.api" ;;
#                     Services/Translation/Translation.API/*|PsychologySupport/Services/Translation/Translation.API/*) add_svc "translation.api" ;;
#                     ApiGateways/YarpApiGateway/*|PsychologySupport/ApiGateways/YarpApiGateway/*)                 add_svc "yarpapigateway" ;;
#                     # ƒê·ªông ch·∫°m file n·ªÅn ‚Üí deploy all ƒë·ªÉ an to√†n
#                     Directory.Packages.props|nuget.config|packages.lock.json|.dockerignore|docker-compose-apis.yml|BuildingBlocks/*|BuildingBlocks.Messaging/*|PsychologySupport/BuildingBlocks/*|PsychologySupport/BuildingBlocks.Messaging/*)
#                       for s in "${ALL_SERVICES[@]}"; do add_svc "$s"; done ;;
#                   esac
#                 done
#               fi

#               # N·∫øu v·∫´n r·ªóng (edge-case) ‚Üí deploy all
#               if [ ${#SVC_SET[@]} -eq 0 ]; then
#                 echo "‚ö†Ô∏è Kh√¥ng detect service n√†o ‚Üí deploy all"
#                 for s in "${ALL_SERVICES[@]}"; do add_svc "$s"; done
#               fi

#               mapfile -t SERVICES < <(printf '%s\n' "${!SVC_SET[@]}" | sort)
#             fi

#             echo "üß© S·∫Ω deploy c√°c service:"
#             printf ' - %s\n' "${SERVICES[@]}"

#             echo "üì• Pull + üöÄ Up"
#             for s in "${SERVICES[@]}"; do
#               echo "üì• Pull $s (tag=${NEW_TAG})"
#               docker compose -f "${COMPOSE}" pull "$s" || true
#               echo "üöÄ Up $s"
#               docker compose -f "${COMPOSE}" up -d "$s"
#             done

#             # ====== Health-check cho c√°c service v·ª´a deploy ======
#             get_label() {
#               docker inspect -f '{{ index .Config.Labels "'"$2"'" }}' "$1" 2>/dev/null || true
#             }
#             wait_container_healthy() {
#               local name="$1"; local max_wait=60; local waited=0
#               while true; do
#                 state="$(docker inspect -f '{{if .State.Health}}{{.State.Health.Status}}{{else}}none{{end}}' "$name" 2>/dev/null || echo none)"
#                 if [ "$state" = "healthy" ]; then
#                   echo "‚úÖ $name HEALTHCHECK: healthy"; return 0
#                 fi
#                 if [ "$state" = "none" ]; then return 2; fi
#                 if [ $waited -ge $max_wait ]; then
#                   echo "‚ùå $name HEALTHCHECK timeout"; return 1
#                 fi
#                 sleep 2; waited=$((waited+2))
#                 echo "‚è≥ Waiting $name HEALTHCHECK... ($waited/$max_wait)"
#               done
#             }
#             http_health() {
#               local svc="$1"; local cname="$2"
#               local path="$(get_label "$cname" 'com.emoease.health_path')"
#               local port_override="$(get_label "$cname" 'com.emoease.health_port')"
#               local max_wait=60; local waited=0
#               [ -z "$path" ] && path="/health"
#               local host_port=""
#               if [ -n "$port_override" ]; then
#                 host_port="$port_override"
#               else
#                 host_port="$(docker compose -f "${COMPOSE}" port "$svc" 8080 | head -n1 | awk -F: '{print $NF}')"
#                 if [ -z "$host_port" ]; then
#                   host_port="$(docker compose -f "${COMPOSE}" port "$svc" 80 | head -n1 | awk -F: '{print $NF}')"
#                 fi
#               fi
#               [ -z "$host_port" ] && { echo "‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y host port cho $svc, skip HTTP health."; return 0; }
#               while true; do
#                 if curl -fsS "http://localhost:${host_port}${path}" | grep -q '"status":"Healthy"'; then
#                   echo "‚úÖ $svc HTTP ${path} OK (:${host_port})"; return 0
#                 fi
#                 if [ $waited -ge $max_wait ]; then
#                   echo "‚ùå $svc HTTP health timeout (${path} on :${host_port})"; return 1
#                 fi
#                 sleep 2; waited=$((waited+2))
#                 echo "‚è≥ Waiting $svc HTTP health... ($waited/$max_wait)"
#               done
#             }

#             echo "ü©∫ Health-check c√°c service v·ª´a deploy"
#             for svc in "${SERVICES[@]}"; do
#               cname="$(docker compose -f "${COMPOSE}" ps -q "$svc" | xargs -r docker inspect --format '{{.Name}}' | sed 's#^/##' || true)"
#               [ -z "$cname" ] && { echo "  ‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y container cho $svc, b·ªè qua health."; continue; }
#               skip="$(get_label "$cname" 'com.emoease.health_skip')"
#               if [ "$skip" = "true" ]; then
#                 echo "  Skip health for $svc (label com.emoease.health_skip=true)"; continue
#               fi
#               if wait_container_healthy "$cname"; then
#                 continue
#               elif [ $? -eq 2 ]; then
#                 http_health "$svc" "$cname" || {
#                   echo "‚ùå Health fail on $svc ‚Üí rollback .env (gi·ªØ tag ${NEW_TAG})"
#                   cp -f .env.backup.* .env 2>/dev/null || true
#                   docker compose -f "${COMPOSE}" up -d "$svc"
#                   exit 1
#                 }
#               else
#                 echo "‚ùå Health fail on $svc ‚Üí rollback .env (gi·ªØ tag ${NEW_TAG})"
#                 cp -f .env.backup.* .env 2>/dev/null || true
#                 docker compose -f "${COMPOSE}" up -d "$svc"
#                 exit 1
#               fi
#             done

#             echo "üß≠ Ghi m·ªëc commit m·ªõi"
#             echo "${NEW_COMMIT}" > .deploy_commit

#             echo "üßπ Cleanup dangling"
#             docker image prune -f
