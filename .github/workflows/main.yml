name: Deploy to VPS on push

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  sync-base-secrets:
    uses: ./.github/workflows/sync-secrets.yml
    secrets: inherit

  sync-production-appsettings:
    uses: ./.github/workflows/sync-production-appsettings.yml
    secrets: inherit

  deploy:
    runs-on: ubuntu-latest
    needs: [sync-base-secrets, sync-production-appsettings]
    environment: Production
    steps:
      - name: Build & deploy updated microservices with health check & rollback
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VPS_HOST }}
          command_timeout: 30m
          username: ${{ secrets.VPS_USERNAME }}
          password: ${{ secrets.VPS_PASSWORD }}
          script: |
            set -e

            cd /home/emoease/PsychologySupport

            git reset --hard HEAD
            git pull origin main

            ALL_SERVICES="auth.api chatbox.api image.api lifestyles.api payment.api profile.api promotion.grpc scheduling.api subscription.api test.api translation.api"

            HAS_BUILDING_BLOCKS_CHANGE=$(git diff --name-only HEAD^ HEAD \
              | grep -E '^PsychologySupport/BuildingBlocks/|^PsychologySupport/BuildingBlocks.Messaging/' || true)

            if [ -n "$HAS_BUILDING_BLOCKS_CHANGE" ]; then
              echo "Detected changes in BuildingBlocks or Messaging. All microservices will be rebuilt."
              CHANGED="$ALL_SERVICES"
            else
              CHANGED=$(git diff --name-only HEAD^ HEAD \
                | grep -E '^PsychologySupport/Services/[^/]+/|^PsychologySupport/ApiGateways/[^/]+' \
                | awk -F/ '{
                    if ($1 == "PsychologySupport" && $2 == "Services") {
                      svc = tolower($3);
                      ext = ".api";
                      if (svc == "promotion") ext = ".grpc";
                      print svc ext;
                    } else if ($1 == "PsychologySupport" && $2 == "ApiGateways") {
                      print tolower($3)
                    }
                  }' \
                | grep -v '^notification\.api$' \
                | sort -u)
            fi

            echo "================= DEBUGGING ================="
            echo "*** Changed Microservices: $CHANGED"
            echo "============================================="

            # ----------------- BASH FUNCTIONS -----------------
            build_service() {
              local svc="$1"
              local bake_target="${svc//./_}"
              echo "üî® [$(date +%T)] Building $svc..."
              if docker buildx bake --file docker-compose-apis.yml "$svc"; then
                echo "‚úÖ [$(date +%T)] Build succeeded: $svc"
                return 0
              else
                echo "‚ùå [$(date +%T)] Build failed: $svc"
                return 1
              fi
            }

            up_service() {
              local svc="$1"
              echo "üöÄ [$(date +%T)] Starting $svc..."
              if docker compose -f docker-compose-apis.yml up -d "$svc"; then
                echo "‚úÖ [$(date +%T)] $svc is up and running"
                return 0
              else
                echo "‚ùå [$(date +%T)] Failed to start: $svc"
                return 1
              fi
            }

            get_port() {
              local svc="$1"
              # Get published host port mapped from container port 8080
              if [ "$svc" = "yarpapigateway" ]; then 
                echo 80
              else
                docker compose -f docker-compose-apis.yml port "$svc" 8080 | head -n 1 | cut -d: -f2
              fi
            }

            wait_healthy() {
              local svc="$1"
              local port="$2"
              local max_wait=30
              local waited=0
              while ! curl -fsS "http://localhost:$port/health" | grep -q '"status":"Healthy"'; do
                if [ "$waited" -ge "$max_wait" ]; then
                  echo "‚ùå $svc is not healthy after $max_wait seconds."
                  return 1
                fi
                sleep 2
                waited=$((waited + 2))
                echo "‚è≥ Waiting for $svc to become healthy... ($waited/$max_wait)"
              done
              echo "‚úÖ $svc is healthy!"
              return 0
            }

            rollback_service() {
              local svc="$1"
              local repo=$(echo "$svc" | tr -d '.') #B·ªè d·∫•u ch·∫•m ƒë·ªÉ kh·ªõp v·ªõi t√™n image
              
              echo "üîô Rolling back $repo to previous image."
              docker compose -f docker-compose-apis.yml stop "$svc"
              docker tag "$repo:old" "$repo:latest"
              docker compose -f docker-compose-apis.yml up -d "$svc"
              local port
              port=$(get_port "$svc")
              if wait_healthy "$svc" "$port"; then
                echo "‚ôªÔ∏è Rollback succeeded for $repo!"
              else
                echo "üö® Rollback failed for $repo! Please check manually."
              fi
            }

            # ----------- TAG OLD IMAGE BEFORE BUILDING -------------
            for svc in $CHANGED; do
              IMAGE_REPO=$(echo "$svc" | tr -d '.')
              echo "[DEBUG] Attempting to tag $IMAGE_REPO:latest as $IMAGE_REPO:old"
              echo "[DEBUG] svc=$svc, IMAGE_REPO=$IMAGE_REPO"
              docker images "$IMAGE_REPO"
              if docker images "$IMAGE_REPO:latest" | grep -q latest; then
                docker tag "$IMAGE_REPO:latest" "$IMAGE_REPO:old" || true
                echo "[DEBUG] Tagged $IMAGE_REPO:latest as $IMAGE_REPO:old"
              else
                echo "[WARN] No $IMAGE_REPO:latest image found, skipping tag"
              fi
            done

            # ------------ DUMMY BUILD TO WARM-UP CACHE -------------
            DUMMY_SERVICE=$(echo "$CHANGED" | awk '{print $1}')
            if [ -n "$DUMMY_SERVICE" ]; then
              echo "üî• Dummy build ($DUMMY_SERVICE) to warm-up Docker cache..."
              build_service "$DUMMY_SERVICE"
              echo "üî• Dummy build for $DUMMY_SERVICE completed. Proceeding to parallel builds..."
            fi

            # ------------ PARALLEL BUILD (max 3 at a time) -------------
            COUNT=0
            MAX_PARALLEL=3
            for svc in $CHANGED; do
              (
                build_service "$svc"
              ) &
              COUNT=$((COUNT + 1))
              if [ "$COUNT" -ge "$MAX_PARALLEL" ]; then
                wait
                COUNT=0
              fi
            done
            wait
            echo "=== All builds completed ==="

            # ----------- UP, HEALTH CHECK & ROLLBACK -------------
            for svc in $CHANGED; do
              up_service "$svc"
              port=$(get_port "$svc")
              if [ -z "$port" ]; then
                echo "‚ö†Ô∏è Port not found for $svc, skipping health check."
                continue
              fi

              if [ "$svc" = "promotiongrpc" ]; then 
                echo "$svc has been excluded from Health Check."
              elif wait_healthy "$svc" "$port"; then
                echo "‚úÖ $svc is running and healthy!"
              else
                echo "‚ùå $svc health check failed. Rolling back..."
                rollback_service "$svc"
              fi
            done

            docker image prune -f

            echo "=== All selected services have been updated (health checks & auto-rollback included) ==="
