name: Deploy to VPS (Compose Pull+Up + Auto Health)

on:
  workflow_run:
    workflows: [ "Build & Push Microservices (GHCR)" ]
    types: [ completed ]
  workflow_dispatch:

jobs:
  deploy:
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}
    runs-on: ubuntu-latest
    steps:
      - name: Deploy via SSH
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          password: ${{ secrets.VPS_PASSWORD }}
          command_timeout: 30m
          script: |
            set -euo pipefail

            WORKDIR="/home/emoease/PsychologySupport"
            COMPOSE="docker-compose-apis.yml"
            NEW_TAG="${{ github.sha }}"

            cd "$WORKDIR"

            echo "üîê Login GHCR"
            echo "${{ secrets.GIT_CONTAINER_REGISTRY_PASSWORD }}" | docker login ghcr.io -u "${{ secrets.GIT_CONTAINER_REGISTRY_USERNAME }}" --password-stdin

            echo "üìù Backup .env v√† set IMAGE_TAG=${NEW_TAG}"
            cp -f .env ".env.backup.$(date +%s)" || true
            echo "IMAGE_TAG=${NEW_TAG}" > .env

            echo "üì• Pull images"
            docker compose -f "${COMPOSE}" pull

            echo "üöÄ Up (no-build)"
            docker compose -f "${COMPOSE}" up -d

            # ====== Auto health ======
            # ∆Øu ti√™n: n·∫øu image c√≥ HEALTHCHECK -> ch·ªù .State.Health.Status=healthy
            # Fallback: HTTP GET http://localhost:<published>/health_path
            # Labels h·ªó tr·ª£:
            #   com.emoease.health_skip=true        -> b·ªè qua service
            #   com.emoease.health_path=/custom     -> override path (m·∫∑c ƒë·ªãnh /health)
            #   com.emoease.health_port=XXXX        -> override c·ªïng host n·∫øu c·∫ßn

            get_label() {
              # $1 = containerName, $2 = labelKey
              docker inspect -f '{{ index .Config.Labels "'"$2"'" }}' "$1" 2>/dev/null || true
            }

            wait_container_healthy() {
              # $1 = containerName
              local name="$1"
              local max_wait=60
              local waited=0
              while true; do
                state="$(docker inspect -f '{{if .State.Health}}{{.State.Health.Status}}{{else}}none{{end}}' "$name" 2>/dev/null || echo none)"
                if [ "$state" = "healthy" ]; then
                  echo "‚úÖ $name container HEALTHCHECK: healthy"
                  return 0
                fi
                if [ "$state" = "none" ]; then
                  # Kh√¥ng c√≥ HEALTHCHECK -> caller s·∫Ω fallback HTTP
                  return 2
                fi
                if [ $waited -ge $max_wait ]; then
                  echo "‚ùå $name container HEALTHCHECK timeout"
                  return 1
                fi
                sleep 2; waited=$((waited+2))
                echo "‚è≥ Waiting $name HEALTHCHECK... ($waited/$max_wait)"
              done
            }

            http_health() {
              # $1=serviceName (compose service), $2=containerName
              local svc="$1"; local cname="$2"
              local path="$(get_label "$cname" 'com.emoease.health_path')"
              local port_override="$(get_label "$cname" 'com.emoease.health_port')"
              local max_wait=60
              local waited=0

              [ -z "$path" ] && path="/health"

              # L·∫•y host port: ∆∞u ti√™n label override; n·∫øu kh√¥ng -> th·ª≠ port 8080, r·ªìi 80
              local host_port=""
              if [ -n "$port_override" ]; then
                host_port="$port_override"
              else
                host_port="$(docker compose -f "${COMPOSE}" port "$svc" 8080 | head -n1 | awk -F: '{print $NF}')"
                if [ -z "$host_port" ]; then
                  host_port="$(docker compose -f "${COMPOSE}" port "$svc" 80 | head -n1 | awk -F: '{print $NF}')"
                fi
              fi

              if [ -z "$host_port" ]; then
                echo "‚ö†Ô∏è  Kh√¥ng t√¨m th·∫•y host port cho $svc, skip HTTP health."
                return 0
              fi

              while true; do
                if curl -fsS "http://localhost:${host_port}${path}" | grep -q '"status":"Healthy"'; then
                  echo "‚úÖ $svc HTTP ${path} OK (:${host_port})"
                  return 0
                fi
                if [ $waited -ge $max_wait ]; then
                  echo "‚ùå $svc HTTP health timeout (${path} on :${host_port})"
                  return 1
                fi
                sleep 2; waited=$((waited+2))
                echo "‚è≥ Waiting $svc HTTP health... ($waited/$max_wait)"
              done
            }

            echo "üîé Li·ªát k√™ services t·ª´ compose"
            mapfile -t SERVICES < <(docker compose -f "${COMPOSE}" config --services)

            # N·∫øu mu·ªën b·ªè qua m·ªôt s·ªë service (vd grpc) th√¨ d√°n label com.emoease.health_skip=true trong compose
            for svc in "${SERVICES[@]}"; do
              cname="$(docker compose -f "${COMPOSE}" ps -q "$svc" | xargs -r docker inspect --format '{{.Name}}' | sed 's#^/##' || true)"
              [ -z "$cname" ] && { echo "  Kh√¥ng t√¨m th·∫•y container cho $svc, b·ªè qua."; continue; }

              skip="$(get_label "$cname" 'com.emoease.health_skip')"
              if [ "$skip" = "true" ]; then
                echo "  Skip health for $svc (label com.emoease.health_skip=true)"
                continue
              fi

              # 1) ∆Øu ti√™n ch·ªù HEALTHCHECK n·∫øu c√≥
              if wait_container_healthy "$cname"; then
                continue
              elif [ $? -eq 2 ]; then
                # 2) Fallback HTTP
                if ! http_health "$svc" "$cname"; then
                  echo " Health fail on $svc ‚Üí rollback to√†n c·ª•c .env"
                  cp -f .env.backup.* .env 2>/dev/null || true
                  docker compose -f "${COMPOSE}" up -d
                  exit 1
                fi
              else
                echo " Health fail on $svc ‚Üí rollback to√†n c·ª•c .env"
                cp -f .env.backup.* .env 2>/dev/null || true
                docker compose -f "${COMPOSE}" up -d
                exit 1
              fi
            done

            echo " Cleanup dangling"
            docker image prune -f
            echo "‚úÖ Deploy OK @ ${NEW_TAG}"
