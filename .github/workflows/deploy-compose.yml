name: Deploy to VPS (Compose Pull+Up + Auto Health)

on:
  # T·ª± ƒë·ªông ch·∫°y sau workflow build
  workflow_run:
    workflows: [ "Build & Push Microservices (GHCR)" ]
    types: [ completed ]

  # N√∫t b·∫•m th·ªß c√¥ng: c√≥ input deploy_all
  workflow_dispatch:
    inputs:
      deploy_all:
        description: "Deploy t·∫•t c·∫£ services (b·ªè qua detect diff)?"
        required: false
        default: "false"
        type: choice
        options: ["false", "true"]
      image_tag:
        description: "Tag image ƒë·ªÉ deploy (main ho·∫∑c SHA c·ª• th·ªÉ)"
        required: false
        default: "main"
        type: string

permissions:
  actions: read
  contents: read

jobs:
  deploy:
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}
    runs-on: ubuntu-latest
    steps:
      - name: Deploy via SSH (detect diff on VPS + selective OR deploy-all)
        uses: appleboy/ssh-action@master
        env:
          # Khi workflow_run: d√πng head_sha c·ªßa run build; khi b·∫•m tay: d√πng input image_tag (m·∫∑c ƒë·ªãnh main)
          EFFECTIVE_TAG: ${{ github.event_name == 'workflow_run' && github.event.workflow_run.head_sha || inputs.image_tag }}
          FORCE_ALL: ${{ github.event_name == 'workflow_dispatch' && inputs.deploy_all || 'false' }}
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          password: ${{ secrets.VPS_PASSWORD }}
          command_timeout: 30m
          script: |
            set -euo pipefail

            FORCE_ALL="${FORCE_ALL:-false}"
            NEW_TAG="${EFFECTIVE_TAG:-main}"
            echo "FORCE_ALL=${FORCE_ALL}"
            echo "EFFECTIVE_TAG=${EFFECTIVE_TAG:-<empty>}  ‚Üí NEW_TAG=${NEW_TAG}"

            WORKDIR="/home/emoease/PsychologySupport"
            COMPOSE="docker-compose-apis.yml"

            cd "$WORKDIR"

            echo ""
            echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ DEPLOY (selective) ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
            echo "Repo dir: $(pwd)"
            echo "Event tag: ${NEW_TAG}"
            echo "------------------------------------------------------------------------"

            echo "üìù L·∫•y m·ªëc commit c≈© (n·∫øu c√≥)"
            OLD_COMMIT="$(cat .deploy_commit 2>/dev/null || git rev-parse HEAD)"
            echo "OLD_COMMIT=${OLD_COMMIT}"

            echo "üìù Git pull main"
            git reset --hard
            git pull origin main

            NEW_COMMIT="$(git rev-parse HEAD)"
            echo "NEW_COMMIT=${NEW_COMMIT}"
            echo "Diff range: ${OLD_COMMIT}..${NEW_COMMIT}"
            echo "------------------------------------------------------------------------"

            echo "üîê Login GHCR"
            echo "${{ secrets.GIT_CONTAINER_REGISTRY_PASSWORD }}" | docker login ghcr.io -u "${{ secrets.GIT_CONTAINER_REGISTRY_USERNAME }}" --password-stdin

            # ====== Image tag ======
            NEW_TAG="${EFFECTIVE_TAG:-main}"
            echo "üìù Set IMAGE_TAG=${NEW_TAG}"
            cp -f .env ".env.backup.$(date +%s)" || true
            touch .env
            set_kv () {
              local k="$1"; local v="$2"
              if grep -qE "^${k}=" .env; then
                sed -i "s|^${k}=.*|${k}=${v}|" .env
              else
                echo "${k}=${v}" >> .env
              fi
            }
            set_kv IMAGE_TAG "${NEW_TAG}"
            echo "üìÑ .env hi·ªán t·∫°i:"; cat .env || true
            echo "------------------------------------------------------------------------"

            # ====== Danh s√°ch services chu·∫©n ======
            ALL_SERVICES=(
              "aimoderation.api" "alias.api" "auth.api" "chatbox.api" "digitalgoods.api" "feed.api"
              "media.api" "payment.api" "post.api" "profile.api" "promotion.grpc" "realtimehub.api"
              "subscription.api" "test.api" "translation.api" "yarpapigateway"
            )

            # ====== File n·ªÅn thay ƒë·ªïi ‚Üí deploy all (c√≥ th·ªÉ tinh ch·ªânh) ======
            GLOBAL_DEPS_PATTERNS=(
              "Directory.Packages.props"
              "nuget.config"
              "docker-compose-apis.yml"
              # N·∫øu lock file g√¢y deploy all qu√° nhi·ªÅu, ƒë·ªÉ comment l·∫°i:
              # "packages.lock.json"
              "BuildingBlocks/*"
              "BuildingBlocks.Messaging/*"
              "PsychologySupport/BuildingBlocks/*"
              "PsychologySupport/BuildingBlocks.Messaging/*"
            )

            # ====== Helper: map path ‚Üí service (pattern Post.* gi·ªëng workflow build) ======
            svc_map() {
              local f="$1"
              case "$f" in
                # AIModeration
                Services/AIModeration/AIModeration.*/*|PsychologySupport/Services/AIModeration/AIModeration.*/*) echo "aimoderation.api" ;;

                # Alias
                Services/Alias/Alias.*/*|PsychologySupport/Services/Alias/Alias.*/*) echo "alias.api" ;;

                # Auth
                Services/Auth/Auth.*/*|PsychologySupport/Services/Auth/Auth.*/*) echo "auth.api" ;;

                # ChatBox
                Services/ChatBox/ChatBox.*/*|PsychologySupport/Services/ChatBox/ChatBox.*/*) echo "chatbox.api" ;;

                # DigitalGoods
                Services/DigitalGoods/DigitalGoods.*/*|PsychologySupport/Services/DigitalGoods/DigitalGoods.*/*) echo "digitalgoods.api" ;;

                # Feed
                Services/Feed/Feed.*/*|PsychologySupport/Services/Feed/Feed.*/*) echo "feed.api" ;;

                # Media
                Services/Media/Media.*/*|PsychologySupport/Services/Media/Media.*/*) echo "media.api" ;;

                # RealtimeHub
                Services/RealtimeHub/RealtimeHub.*/*|PsychologySupport/Services/RealtimeHub/RealtimeHub.*/*) echo "realtimehub.api" ;;

                # Payment
                Services/Payment/Payment.*/*|PsychologySupport/Services/Payment/Payment.*/*) echo "payment.api" ;;

                # Post (Domain/Application/Infrastructure/‚Ä¶)
                Services/Post/Post.*/*|PsychologySupport/Services/Post/Post.*/*) echo "post.api" ;;

                # Profile
                Services/Profile/Profile.*/*|PsychologySupport/Services/Profile/Profile.*/*) echo "profile.api" ;;

                # Promotion (gRPC)
                Services/Promotion/Promotion.*/*|PsychologySupport/Services/Promotion/Promotion.*/*) echo "promotion.grpc" ;;

                # Subscription
                Services/Subscription/Subscription.*/*|PsychologySupport/Services/Subscription/Subscription.*/*) echo "subscription.api" ;;

                # Test
                Services/Test/Test.*/*|PsychologySupport/Services/Test/Test.*/*) echo "test.api" ;;

                # Translation
                Services/Translation/Translation.*/*|PsychologySupport/Services/Translation/Translation.*/*) echo "translation.api" ;;

                # YARP gateway
                ApiGateways/YarpApiGateway/*|PsychologySupport/ApiGateways/YarpApiGateway/*) echo "yarpapigateway" ;;

                *) echo "" ;;
              esac
            }

            # ====== Ch·∫ø ƒë·ªô deploy-all khi b·∫•m n√∫t ======
            if [ "${FORCE_ALL}" = "true" ]; then
              echo "üîò FORCE_ALL=true ‚Üí Deploy ALL services (tag: ${NEW_TAG})"
              mapfile -t SERVICES < <(printf '%s\n' "${ALL_SERVICES[@]}" | sort)
            else
              echo "üßÆ T√≠nh file thay ƒë·ªïi tr√™n VPS"
              mapfile -t CHANGED_FILES < <(git diff --name-only --diff-filter=ACMR "${OLD_COMMIT}".."${NEW_COMMIT}" || true)

              echo "Changed files count: ${#CHANGED_FILES[@]}"
              if [ ${#CHANGED_FILES[@]} -gt 0 ]; then
                printf '%s\n' "${CHANGED_FILES[@]}" | awk '{printf "  ‚Ä¢ %s\n", $0}'
              else
                echo "  (no changed files)"
              fi
              echo "------------------------------------------------------------------------"

              # Ki·ªÉm tra global deps
              DEPLOY_ALL_BY_GLOBAL=0
              if [ ${#CHANGED_FILES[@]} -gt 0 ]; then
                for f in "${CHANGED_FILES[@]}"; do
                  for p in "${GLOBAL_DEPS_PATTERNS[@]}"; do
                    case "$p" in
                      *\**)
                        # pattern c√≥ wildcard
                        if [[ "$f" == $p ]]; then DEPLOY_ALL_BY_GLOBAL=1; REASON="$p"; break 2; fi
                        ;;
                      *)
                        if [[ "$f" == "$p" ]]; then DEPLOY_ALL_BY_GLOBAL=1; REASON="$p"; break 2; fi
                        ;;
                    esac
                  done
                done
              fi

              declare -A SVC_SET=()
              add_svc(){ SVC_SET["$1"]=1; }

              if [ ${DEPLOY_ALL_BY_GLOBAL} -eq 1 ]; then
                echo "‚ö†Ô∏è GLOBAL DEPS matched: ${REASON} ‚Üí deploy ALL services"
                for s in "${ALL_SERVICES[@]}"; do add_svc "$s"; done
              else
                echo "Mapping changed files to services:"
                printf "%-70s | %s\n" "File" "Service(+)"
                printf -- "----------------------------------------------------------------------|-----------------\n"
                for f in "${CHANGED_FILES[@]}"; do
                  svc="$(svc_map "$f")"
                  if [ -n "$svc" ]; then add_svc "$svc"; fi
                  printf "%-70s | %s\n" "$f" "${svc:--}"
                done

                # N·∫øu kh√¥ng detect ƒë∆∞·ª£c service n√†o (edge-case: ch·ªânh docs, etc.)
                if [ ${#SVC_SET[@]} -eq 0 ]; then
                  echo "‚ÑπÔ∏è Kh√¥ng detect service n√†o t·ª´ path ‚Üí deploy ALL (an to√†n)."
                  for s in "${ALL_SERVICES[@]}"; do add_svc "$s"; done
                fi
              fi

              mapfile -t SERVICES < <(printf '%s\n' "${!SVC_SET[@]}" | sort)
            fi

            echo "üß© S·∫Ω deploy c√°c service:"
            printf ' - %s\n' "${SERVICES[@]}"
            echo "------------------------------------------------------------------------"

            echo "üì• Pull + üöÄ Up"
            for s in "${SERVICES[@]}"; do
              echo "üì• Pull $s (tag=${NEW_TAG})"
              docker compose --env-file .env -f "${COMPOSE}" pull "$s" || true
              echo "üöÄ Up $s"
              docker compose --env-file .env -f "${COMPOSE}" up -d "$s"
            done

            echo "üß≠ Ghi m·ªëc commit m·ªõi"
            echo "${NEW_COMMIT}" > .deploy_commit

            echo "üßπ Cleanup dangling"
            docker image prune -f

            echo "‚úÖ DONE"
