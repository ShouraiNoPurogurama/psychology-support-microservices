name: Deploy to VPS (Compose Pull+Up + Auto Health)

on:
  workflow_run:
    workflows: [ "Build & Push Microservices (GHCR)" ]
    types: [ completed ]
  workflow_dispatch:

permissions:
  actions: read
  contents: read

jobs:
  deploy:
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}
    runs-on: ubuntu-latest
    steps:
      - name: Download services artifact from triggering run
        if: ${{ github.event_name == 'workflow_run' }}
        uses: actions/download-artifact@v4
        with:
          name: services
          path: ./ci-artifacts
          run-id: ${{ github.event.workflow_run.id }}

      - name: Fallback (manual dispatch) - no artifact available
        if: ${{ github.event_name == 'workflow_dispatch' }}
        run: |
          echo '[]' > ./ci-artifacts/services.json

      - name: Read services list
        id: svc
        shell: bash
        run: |
          set -euo pipefail
          cat ./ci-artifacts/services.json
          # Convert JSON (["a","b"]) -> "a b"
          if ! command -v jq >/dev/null 2>&1; then
            sudo apt-get update -y && sudo apt-get install -y jq
          fi
          SERVICES_SPACE="$(jq -r 'join(" ")' ./ci-artifacts/services.json)"
          echo "services_space=${SERVICES_SPACE}" >> "$GITHUB_OUTPUT"

      - name: Deploy via SSH (selective pull/up)
        uses: appleboy/ssh-action@master
        env:
          # Danh sách service dạng "auth.api yarpapigateway ..."
          SERVICES_SPACE: ${{ steps.svc.outputs.services_space }}
          # Tag image sẽ dùng: head_sha của workflow_run; nếu chạy tay thì dùng github.sha
          NEW_TAG: ${{ github.event_name == 'workflow_run' && github.event.workflow_run.head_sha || github.sha }}
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          password: ${{ secrets.VPS_PASSWORD }}
          command_timeout: 30m
          script: |
            set -euo pipefail
            WORKDIR="/home/emoease/PsychologySupport"
            COMPOSE="docker-compose-apis.yml"
            cd "$WORKDIR"

            echo "📝 Git pull "
            git reset --hard
            git pull origin main

            echo "🔐 Login GHCR"
            echo "${{ secrets.GIT_CONTAINER_REGISTRY_PASSWORD }}" | docker login ghcr.io -u "${{ secrets.GIT_CONTAINER_REGISTRY_USERNAME }}" --password-stdin

            echo "📝 Set IMAGE_TAG=${NEW_TAG}"
            cp -f .env ".env.backup.$(date +%s)" || true
            touch .env
            if grep -qE "^IMAGE_TAG=" .env; then
              sed -i "s|^IMAGE_TAG=.*|IMAGE_TAG=${NEW_TAG}|" .env
            else
              echo "IMAGE_TAG=${NEW_TAG}" >> .env
            fi
            echo "📄 .env hiện tại:"; cat .env || true

            # Parse danh sách service (space-separated -> array)
            SERVICES=()
            if [ -n "${SERVICES_SPACE:-}" ]; then
              read -r -a SERVICES <<< "${SERVICES_SPACE}"
            fi

            if [ ${#SERVICES[@]} -eq 0 ]; then
              echo "⚠️ Không có service nào trong artifact. Dừng mà không deploy gì."
              exit 0
            fi

            echo "🧩 Services sẽ deploy:"
            for s in "${SERVICES[@]}"; do echo " - $s"; done

            echo "📥 Pull + 🚀 Up (chỉ services thay đổi)"
            for s in "${SERVICES[@]}"; do
              echo "📥 Pull $s"
              docker compose -f "${COMPOSE}" pull "$s"
              echo "🚀 Up $s"
              docker compose -f "${COMPOSE}" up -d "$s"
            done

            # ====== (Optional) Health check gọn cho các service vừa up ======
            get_label() {
              docker inspect -f '{{ index .Config.Labels "'"$2"'" }}' "$1" 2>/dev/null || true
            }
            wait_container_healthy() {
              local name="$1"; local max_wait=60; local waited=0
              while true; do
                state="$(docker inspect -f '{{if .State.Health}}{{.State.Health.Status}}{{else}}none{{end}}' "$name" 2>/dev/null || echo none)"
                if [ "$state" = "healthy" ]; then
                  echo "✅ $name HEALTHCHECK: healthy"; return 0
                fi
                if [ "$state" = "none" ]; then return 2; fi
                if [ $waited -ge $max_wait ]; then
                  echo "❌ $name HEALTHCHECK timeout"; return 1
                fi
                sleep 2; waited=$((waited+2))
                echo "⏳ Waiting $name HEALTHCHECK... ($waited/$max_wait)"
              done
            }
            http_health() {
              local svc="$1"; local cname="$2"
              local path="$(get_label "$cname" 'com.emoease.health_path')"
              local port_override="$(get_label "$cname" 'com.emoease.health_port')"
              local max_wait=60; local waited=0
              [ -z "$path" ] && path="/health"
              local host_port=""
              if [ -n "$port_override" ]; then
                host_port="$port_override"
              else
                host_port="$(docker compose -f "${COMPOSE}" port "$svc" 8080 | head -n1 | awk -F: '{print $NF}')"
                if [ -z "$host_port" ]; then
                  host_port="$(docker compose -f "${COMPOSE}" port "$svc" 80 | head -n1 | awk -F: '{print $NF}')"
                fi
              fi
              [ -z "$host_port" ] && { echo "⚠️ Không tìm thấy host port cho $svc, skip HTTP health."; return 0; }
              while true; do
                if curl -fsS "http://localhost:${host_port}${path}" | grep -q '"status":"Healthy"'; then
                  echo "✅ $svc HTTP ${path} OK (:${host_port})"; return 0
                fi
                if [ $waited -ge $max_wait ]; then
                  echo "❌ $svc HTTP health timeout (${path} on :${host_port})"; return 1
                fi
                sleep 2; waited=$((waited+2))
                echo "⏳ Waiting $svc HTTP health... ($waited/$max_wait)"
              done
            }

            echo "🩺 Health-check các service vừa deploy"
            for svc in "${SERVICES[@]}"; do
              cname="$(docker compose -f "${COMPOSE}" ps -q "$svc" | xargs -r docker inspect --format '{{.Name}}' | sed 's#^/##' || true)"
              [ -z "$cname" ] && { echo "  ⚠️ Không tìm thấy container cho $svc, bỏ qua health."; continue; }
              skip="$(get_label "$cname" 'com.emoease.health_skip')"
              if [ "$skip" = "true" ]; then
                echo "  Skip health for $svc (label com.emoease.health_skip=true)"; continue
              fi
              if wait_container_healthy "$cname"; then
                continue
              elif [ $? -eq 2 ]; then
                http_health "$svc" "$cname" || {
                  echo "❌ Health fail on $svc → rollback .env"
                  cp -f .env.backup.* .env 2>/dev/null || true
                  docker compose -f "${COMPOSE}" up -d "$svc"
                  exit 1
                }
              else
                echo "❌ Health fail on $svc → rollback .env"
                cp -f .env.backup.* .env 2>/dev/null || true
                docker compose -f "${COMPOSE}" up -d "$svc"
                exit 1
              fi
            done

            echo "🧹 Cleanup dangling"
            docker image prune -f
