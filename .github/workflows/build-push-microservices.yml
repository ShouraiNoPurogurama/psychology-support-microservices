name: Build & Push Microservices (GHCR)

on:
  push:
    branches: [ main ]
  workflow_dispatch:

concurrency:
  group: build-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  packages: write
  id-token: write

env:
  REGISTRY: ghcr.io
  OWNER: ${{ github.repository_owner }}

jobs:
  # 0) Ch·ªçn runner ∆∞u ti√™n
  pick-runner:
    runs-on: ubuntu-latest
    outputs:
      runs_on: ${{ steps.decide.outputs.runs_on }}
    steps:
      - name: Decide runner (prefer self-hosted "NA Self Hosted Runner")
        id: decide
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.RUNNER_ADMIN_TOKEN }}
          script: |
            const owner = context.repo.owner;
            const repo  = context.repo.repo;

            core.startGroup('üì¶ Fetching runners list from GitHub API');
            const res = await github.rest.actions.listSelfHostedRunnersForRepo({ owner, repo, per_page: 100 });
            core.info(`Raw API status: ${res.status}`);
            core.info(`Raw API response (first 500 chars): ${JSON.stringify(res.data, null, 2).slice(0, 500)}...`);
            core.endGroup();

            const runners = res.data.runners ?? [];
            if (runners.length === 0) core.warning('‚ö†Ô∏è No runners found for this repo.');

            core.startGroup('üìã Runners summary');
            for (const r of runners) {
              const labels = (r.labels||[]).map(l => l.name).join(', ');
              core.info(`‚Üí name="${r.name}", status=${r.status}, busy=${r.busy}, labels=[${labels}]`);
            }
            core.endGroup();

            const target = 'na self hosted runner';
            const wanted = (res.data.runners||[]).find(r => {
              const labels = (r.labels || []).map(l => (l.name || '').toLowerCase());
              const nameLc = (r.name || '').toLowerCase();
              return (labels.includes(target) || nameLc === target) && r.status === 'online' && !r.busy;
            });

            if (wanted) {
              const labelNames = (wanted.labels || []).map(l => l.name).filter(Boolean);
              if (!labelNames.map(s=>s.toLowerCase()).includes('self-hosted')) labelNames.unshift('self-hosted');
              const preferred = labelNames.includes('windows-prod')
                ? ['self-hosted','windows-prod']
                : labelNames;

              core.notice(`‚úÖ Runner selected: ${wanted.name}`);
              core.notice(`üè∑Ô∏è Using labels: [${preferred.join(', ')}]`);
              core.setOutput('runs_on', JSON.stringify(preferred));
            } else {
              const fallback = "ubuntu-latest";
              core.notice(`üåÄ Fallback runner selected: ${fallback}`);
              core.setOutput('runs_on', JSON.stringify(fallback));
            }

      - name: Show decision output
        run: echo "runs_on=${{ steps.decide.outputs.runs_on }}"

  # 1) Detect services (GitHub-hosted ƒë·ªÉ c√≥ bash/apt)
  detect-services:
    runs-on: ubuntu-latest
    needs: pick-runner
    outputs:
      services: ${{ steps.out.outputs.services }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Compute smart diff & map to services (with verbose logs)
        id: out
        shell: bash
        env:
          BEFORE: ${{ github.event.before }}
          EVENT_NAME: ${{ github.event_name }}
        run: |
          set -euo pipefail

          # ==== Config =========================================================
          ALL_SERVICES=(
            "aimoderation.api"
            "alias.api" "auth.api" "chatbox.api" "digitalgoods.api" "feed.api" "media.api" "realtimehub.api"
            "payment.api" "post.api" "profile.api" "promotion.grpc"
            "subscription.api" "test.api" "translation.api" "wellness.api" "yarpapigateway" 
          )

          # Thay ƒë·ªïi c√°c file n√†y ‚Üí build all (tu·ª≥ d·ª± √°n, c√¢n nh·∫Øc b·ªè packages.lock.json)
          GLOBAL_DEPS_PATTERNS=(
            "Directory.Packages.props"
            "nuget.config"
            # "packages.lock.json"
            ".dockerignore"
          )

          echo ""
          echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ DETECT SERVICES (verbose) ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
          echo "Repo: $GITHUB_REPOSITORY"
          echo "Actor: $GITHUB_ACTOR"
          echo "Event: ${EVENT_NAME}"
          echo "SHA:   $GITHUB_SHA"
          echo "------------------------------------------------------------------------"

          git fetch --no-tags --prune origin main >/dev/null 2>&1 || true

          # ==== X√°c ƒë·ªãnh commit base ===========================================
          if [[ -n "${BEFORE:-}" && "${BEFORE}" != "0000000000000000000000000000000000000000" ]]; then
            BASE="${BEFORE}"; BASE_REASON="github.event.before"
          else
            if git rev-parse -q --verify HEAD~1 >/dev/null; then
              BASE="$(git rev-parse HEAD~1)"; BASE_REASON="HEAD~1"
            else
              BASE="$(git merge-base origin/main HEAD)"; BASE_REASON="merge-base origin/main HEAD"
            fi
          fi

          echo "Diff range: ${BASE}..HEAD  (base by: ${BASE_REASON})"
          echo "------------------------------------------------------------------------"

          # ==== L·∫•y danh s√°ch file thay ƒë·ªïi ====================================
          mapfile -t CHANGED_FILES < <(git diff --name-only --diff-filter=ACMR "${BASE}"..HEAD || true)

          echo "Changed files count: ${#CHANGED_FILES[@]}"
          if [[ ${#CHANGED_FILES[@]} -gt 0 ]]; then
            printf '%s\n' "${CHANGED_FILES[@]}" | awk '{printf "  ‚Ä¢ %s\n", $0}'
          else
            echo "  (no changed files)"
          fi
          echo "------------------------------------------------------------------------"

          # ==== Quy·∫øt ƒë·ªãnh BUILD_ALL ===========================================
          BUILD_ALL=0
          BUILD_ALL_REASON=""

          if [[ "${EVENT_NAME}" == "workflow_dispatch" ]]; then
            BUILD_ALL=1; BUILD_ALL_REASON="manual dispatch"
          fi

          if [[ ${#CHANGED_FILES[@]} -eq 0 && $BUILD_ALL -eq 0 ]]; then
            # KH√îNG set BUILD_ALL ·ªü ƒë√¢y n·ªØa ‚Üí ƒë·ªÉ tr·ªëng => skip build
            echo "‚ÑπÔ∏è No changed files ‚Üí will output empty service list."
          fi

          if [[ $BUILD_ALL -eq 0 ]]; then
            for f in "${CHANGED_FILES[@]}"; do
              for p in "${GLOBAL_DEPS_PATTERNS[@]}"; do
                if [[ "$f" == "$p" ]]; then
                  BUILD_ALL=1; BUILD_ALL_REASON="global dep matched: ${p}"; break 2
                fi
              done
            done
          fi

          if [[ $BUILD_ALL -eq 1 ]]; then
            echo "‚ö†Ô∏è BUILD_ALL=1 ‚Üí reason: ${BUILD_ALL_REASON}"
          else
            echo "‚úÖ BUILD_ALL=0 ‚Üí selective build by path mapping"
          fi
          echo "------------------------------------------------------------------------"

          # ==== Helper: map file path ‚Üí service slug ===========================
          svc_map() {
            local f="$1"
            case "$f" in
              # AIModeration
              Services/AIModeration/AIModeration.*/*|PsychologySupport/Services/AIModeration/AIModeration.*/*) echo "aimoderation.api" ;;

              # Alias
              Services/Alias/Alias.*/*|PsychologySupport/Services/Alias/Alias.*/*) echo "alias.api" ;;

              # Auth
              Services/Auth/Auth.*/*|PsychologySupport/Services/Auth/Auth.*/*) echo "auth.api" ;;

              # ChatBox
              Services/ChatBox/ChatBox.*/*|PsychologySupport/Services/ChatBox/ChatBox.*/*) echo "chatbox.api" ;;

              # DigitalGoods
              Services/DigitalGoods/DigitalGoods.*/*|PsychologySupport/Services/DigitalGoods/DigitalGoods.*/*) echo "digitalgoods.api" ;;

              # Feed
              Services/Feed/Feed.*/*|PsychologySupport/Services/Feed/Feed.*/*) echo "feed.api" ;;

              # Media
              Services/Media/Media.*/*|PsychologySupport/Services/Media/Media.*/*) echo "media.api" ;;

              # RealtimeHub
              Services/RealtimeHub/RealtimeHub.*/*|PsychologySupport/Services/RealtimeHub/RealtimeHub.*/*) echo "realtimehub.api" ;;

              # Payment
              Services/Payment/Payment.*/*|PsychologySupport/Services/Payment/Payment.*/*) echo "payment.api" ;;

              # Post  ‚Üê B·ªî SUNG: match Post.Domain / Application / ...
              Services/Post/Post.*/*|PsychologySupport/Services/Post/Post.*/*) echo "post.api" ;;

              # Profile
              Services/Profile/Profile.*/*|PsychologySupport/Services/Profile/Profile.*/*) echo "profile.api" ;;

              # Promotion (gRPC)
              Services/Promotion/Promotion.*/*|PsychologySupport/Services/Promotion/Promotion.*/*) echo "promotion.grpc" ;;

              # Subscription
              Services/Subscription/Subscription.*/*|PsychologySupport/Services/Subscription/Subscription.*/*) echo "subscription.api" ;;

              # Test
              Services/Test/Test.*/*|PsychologySupport/Services/Test/Test.*/*) echo "test.api" ;;

              # Translation
              Services/Translation/Translation.*/*|PsychologySupport/Services/Translation/Translation.*/*) echo "translation.api" ;;

              # Wellness
              Services/Wellness/Wellness.*/*|PsychologySupport/Services/Wellness/Wellness.*/*) echo "wellness.api" ;;

              # YARP gateway
              ApiGateways/YarpApiGateway/*|PsychologySupport/ApiGateways/YarpApiGateway/*) echo "yarpapigateway" ;;

              *) echo "" ;;
            esac
          }

          # ==== Map file ‚Üí service =============================================
          declare -A SVC_SET=()
          add_svc(){ SVC_SET["$1"]=1; }

          if [[ $BUILD_ALL -eq 1 ]]; then
            echo "Adding ALL services to build set:"
            printf '  ‚Ä¢ %s\n' "${ALL_SERVICES[@]}"
            for s in "${ALL_SERVICES[@]}"; do add_svc "$s"; done
          else
            echo "Mapping changed files to services:"
            printf "%-65s | %s\n" "File" "Service(+)"
            printf -- "-------------------------------------------------------------------|-----------------\n"
            for f in "${CHANGED_FILES[@]}"; do
              svc="$(svc_map "$f")"
              if [[ -n "$svc" ]]; then add_svc "$svc"; fi
              printf "%-65s | %s\n" "$f" "${svc:--}"
            done
          fi
          echo "------------------------------------------------------------------------"

          # ==== KH√îNG fallback build-all khi r·ªóng ===============================
          if [[ ${#SVC_SET[@]} -eq 0 ]]; then
            echo "‚ÑπÔ∏è No service matched by path rules ‚Üí output empty list (build job will skip)."
          fi

          # ==== Xu·∫•t k·∫øt qu·∫£ ====================================================
          if ! command -v jq >/dev/null 2>&1; then
            sudo apt-get update -y >/dev/null 2>&1 && sudo apt-get install -y jq >/dev/null 2>&1
          fi

          printf '%s\n' "${!SVC_SET[@]}" | sort | jq -R -s -c 'split("\n") - [""]' > services.json
          echo "Detected services JSON: $(cat services.json)"
          echo "services=$(cat services.json)" >> "$GITHUB_OUTPUT"
          echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ END DETECT ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
          echo ""

  # 2) Build job ‚Äì ch·∫°y tr√™n runner ƒë√£ ch·ªçn (self-hosted n·∫øu online, otherwise ubuntu-latest)
  build:
    needs: [pick-runner, detect-services]
    if: ${{ needs.detect-services.outputs.services != '[]' }}
    runs-on: ${{ fromJson(needs.pick-runner.outputs.runs_on) }}
    strategy:
      fail-fast: false
      matrix:
        service: ${{ fromJson(needs.detect-services.outputs.services) }}
    steps:
      - name: Using which runner?
        run: echo "Using runs-on=${{ needs.pick-runner.outputs.runs_on }}; Service=${{ matrix.service }}"
      - uses: actions/checkout@v4

      - uses: docker/setup-buildx-action@v3

      - name: Login to GHCR (using your PAT secrets)
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ secrets.GIT_CONTAINER_REGISTRY_USERNAME }}
          password: ${{ secrets.GIT_CONTAINER_REGISTRY_PASSWORD }}

      - name: Resolve context & dockerfile
        id: meta
        shell: bash
        run: |
          set -euo pipefail
          SVC="${{ matrix.service }}"

          case "$SVC" in
            aimoderation.api) CANDS=( "Services/AIModeration/AIModeration.API/Dockerfile" "PsychologySupport/Services/AIModeration/AIModeration.API/Dockerfile" ) ;;
            alias.api)        CANDS=( "Services/Alias/Alias.API/Dockerfile" "PsychologySupport/Services/Alias/Alias.API/Dockerfile" ) ;;
            auth.api)         CANDS=( "Services/Auth/Auth.API/Dockerfile" "PsychologySupport/Services/Auth/Auth.API/Dockerfile" ) ;;
            chatbox.api)      CANDS=( "Services/ChatBox/ChatBox.API/Dockerfile" "PsychologySupport/Services/ChatBox/ChatBox.API/Dockerfile" ) ;;
            digitalgoods.api) CANDS=( "Services/DigitalGoods/DigitalGoods.API/Dockerfile" "PsychologySupport/Services/DigitalGoods/DigitalGoods.API/Dockerfile" ) ;;
            feed.api)         CANDS=( "Services/Feed/Feed.API/Dockerfile" "PsychologySupport/Services/Feed/Feed.API/Dockerfile" ) ;;
            media.api)        CANDS=( "Services/Media/Media.API/Dockerfile" "PsychologySupport/Services/Media/Media.API/Dockerfile" ) ;;
            realtimehub.api)  CANDS=( "Services/RealtimeHub/RealtimeHub.API/Dockerfile" "PsychologySupport/Services/RealtimeHub/RealtimeHub.API/Dockerfile" ) ;;
            payment.api)      CANDS=( "Services/Payment/Payment.API/Dockerfile" "PsychologySupport/Services/Payment/Payment.API/Dockerfile" ) ;;
            post.api)         CANDS=( "Services/Post/Post.API/Dockerfile" "PsychologySupport/Services/Post/Post.API/Dockerfile" ) ;;
            profile.api)      CANDS=( "Services/Profile/Profile.API/Dockerfile" "PsychologySupport/Services/Profile/Profile.API/Dockerfile" ) ;;
            promotion.grpc)   CANDS=( "Services/Promotion/Promotion.Grpc/Dockerfile" "PsychologySupport/Services/Promotion/Promotion.Grpc/Dockerfile" ) ;;
            subscription.api) CANDS=( "Services/Subscription/Subscription.API/Dockerfile" "PsychologySupport/Services/Subscription/Subscription.API/Dockerfile" ) ;;
            test.api)         CANDS=( "Services/Test/Test.API/Dockerfile" "PsychologySupport/Services/Test/Test.API/Dockerfile" ) ;;
            translation.api)  CANDS=( "Services/Translation/Translation.API/Dockerfile" "PsychologySupport/Services/Translation/Translation.API/Dockerfile" ) ;;
            wellness.api)     CANDS=( "Services/Wellness/Wellness.API/Dockerfile" "PsychologySupport/Services/Wellness/Wellness.API/Dockerfile" ) ;;
            yarpapigateway)   CANDS=( "ApiGateways/YarpApiGateway/Dockerfile" "PsychologySupport/ApiGateways/YarpApiGateway/Dockerfile" ) ;;
            *) echo "Unknown service $SVC"; exit 1 ;;
          esac

          DF=""
          for p in "${CANDS[@]}"; do
            if [[ -f "$p" ]]; then DF="$p"; break; fi
          done

          if [[ -z "$DF" ]]; then
            echo "‚ùå Dockerfile not found for $SVC"; printf 'Tried:\n- %s\n' "${CANDS[@]}"; exit 1
          fi

          if [[ "$DF" == PsychologySupport/* ]]; then
            CTX="PsychologySupport"
          else
            CTX="."
          fi

          echo "CTX=$CTX" >> $GITHUB_OUTPUT
          echo "DF=$DF" >> $GITHUB_OUTPUT
          echo "Resolved CTX=$CTX, DF=$DF"

          OWNER_LC=$(echo "${{ env.OWNER }}" | tr '[:upper:]' '[:lower:]')
          SVC_LC=$(echo "$SVC" | tr '[:upper:]' '[:lower:]')
          echo "IMG=ghcr.io/${OWNER_LC}/${SVC_LC}" >> $GITHUB_OUTPUT

      - name: Build & Push ${{ matrix.service }}
        uses: docker/build-push-action@v6
        with:
          context: ${{ steps.meta.outputs.CTX }}
          file: ${{ steps.meta.outputs.DF }}
          platforms: linux/amd64
          push: true
          provenance: false
          tags: |
            ${{ steps.meta.outputs.IMG }}:${{ github.sha }}
            ${{ steps.meta.outputs.IMG }}:latest
            ${{ steps.meta.outputs.IMG }}:main
