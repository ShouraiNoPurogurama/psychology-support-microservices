name: Build & Push Microservices (GHCR)

on:
  push:
    branches: [ main ]
  workflow_dispatch:

concurrency:
  group: build-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  packages: write
  id-token: write

env:
  REGISTRY: ghcr.io
  OWNER: ${{ github.repository_owner }}

jobs:
  # 0) Chọn runner ưu tiên (self-hosted nếu online; fallback ubuntu-latest)
  pick-runner:
    runs-on: ubuntu-latest
    outputs:
      runs_on: ${{ steps.decide.outputs.runs_on }}
    steps:
      - name: Decide runner (prefer self-hosted "NA Self Hosted Runner")
        id: decide
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.RUNNER_ADMIN_TOKEN }}
          script: |
            const res = await github.rest.actions.listSelfHostedRunnersForRepo({
              owner: context.repo.owner, repo: context.repo.repo, per_page: 100
            });
            const runners = res.data.runners ?? [];
            const target = 'na self hosted runner';
            const wanted = runners.find(r => {
              const labels = (r.labels || []).map(l => (l.name || '').toLowerCase());
              const nameLc = (r.name || '').toLowerCase();
              return (labels.includes(target) || nameLc === target) && r.status === 'online' && !r.busy;
            });
            if (wanted) {
              const names = (wanted.labels || []).map(l => l.name).filter(Boolean);
              if (!names.map(s => s.toLowerCase()).includes('self-hosted')) names.unshift('self-hosted');
              const preferred = names.includes('windows-prod') ? ['self-hosted','windows-prod'] : names;
              core.setOutput('runs_on', JSON.stringify(preferred));
            } else {
              core.setOutput('runs_on', JSON.stringify("ubuntu-latest"));
            }

  detect-services:
    runs-on: ubuntu-latest
    needs: pick-runner
    outputs:
      services: ${{ steps.out.outputs.services }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Compute smart diff & map to services
        id: out
        shell: bash
        env:
          BEFORE: ${{ github.event.before }}
          EVENT_NAME: ${{ github.event_name }}
        run: |
          set -euo pipefail

          ALL_SERVICES=(
            "alias.api" "auth.api" "chatbox.api" "digitalgoods.api" "feed.api" "media.api"
            "payment.api" "post.api" "profile.api" "promotion.grpc"
            "subscription.api" "test.api" "translation.api" "yarpapigateway"
          )

          git fetch --no-tags --prune origin main

          if [[ "${EVENT_NAME}" == "workflow_dispatch" ]]; then
            BUILD_ALL=1
          else
            BUILD_ALL=0
          fi

          if [[ -n "${BEFORE:-}" && "${BEFORE}" != "0000000000000000000000000000000000000000" ]]; then
            BASE="${BEFORE}"
          else
            if git rev-parse -q --verify HEAD~1 >/dev/null; then
              BASE="$(git rev-parse HEAD~1)"
            else
              BASE="$(git merge-base origin/main HEAD)"
            fi
          fi

          echo "Diff range: ${BASE}..HEAD"
          mapfile -t CHANGED_FILES < <(git diff --name-only --diff-filter=ACMR "${BASE}"..HEAD || true)

          if [[ ${#CHANGED_FILES[@]} -eq 0 ]]; then BUILD_ALL=1; fi

          if [[ $BUILD_ALL -eq 0 ]]; then
            for f in "${CHANGED_FILES[@]}"; do
              case "$f" in
                Directory.Packages.props|nuget.config|packages.lock.json|.dockerignore|docker-compose-apis.yml|\
                BuildingBlocks/*|BuildingBlocks.Messaging/*|\
                PsychologySupport/BuildingBlocks/*|PsychologySupport/BuildingBlocks.Messaging/*)
                  BUILD_ALL=1; break ;;
              esac
            done
          fi

          declare -A SVC_SET=()
          add_svc(){ SVC_SET["$1"]=1; }

          if [[ $BUILD_ALL -eq 1 ]]; then
            for s in "${ALL_SERVICES[@]}"; do add_svc "$s"; done
          else
            for f in "${CHANGED_FILES[@]}"; do
              case "$f" in
                Services/Alias/Alias.API/*|PsychologySupport/Services/Alias/Alias.API/*)                     add_svc "alias.api" ;;
                Services/Auth/Auth.API/*|PsychologySupport/Services/Auth/Auth.API/*)                         add_svc "auth.api" ;;
                Services/ChatBox/ChatBox.API/*|PsychologySupport/Services/ChatBox/ChatBox.API/*)             add_svc "chatbox.api" ;;
                Services/DigitalGoods/DigitalGoods.API/*|PsychologySupport/Services/DigitalGoods/DigitalGoods.API/*) add_svc "digitalgoods.api" ;;
                Services/Feed/Feed.API/*|PsychologySupport/Services/Feed/Feed.API/*)                         add_svc "feed.api" ;;
                Services/Media/Media.API/*|PsychologySupport/Services/Media/Media.API/*)                     add_svc "media.api" ;;
                Services/Payment/Payment.API/*|PsychologySupport/Services/Payment/Payment.API/*)             add_svc "payment.api" ;;
                Services/Post/Post.API/*|PsychologySupport/Services/Post/Post.API/*)                         add_svc "post.api" ;;
                Services/Profile/Profile.API/*|PsychologySupport/Services/Profile/Profile.API/*)             add_svc "profile.api" ;;
                Services/Promotion/Promotion.Grpc/*|PsychologySupport/Services/Promotion/Promotion.Grpc/*)   add_svc "promotion.grpc" ;;
                Services/Subscription/Subscription.API/*|PsychologySupport/Services/Subscription/Subscription.API/*) add_svc "subscription.api" ;;
                Services/Test/Test.API/*|PsychologySupport/Services/Test/Test.API/*)                         add_svc "test.api" ;;
                Services/Translation/Translation.API/*|PsychologySupport/Services/Translation/Translation.API/*) add_svc "translation.api" ;;
                ApiGateways/YarpApiGateway/*|PsychologySupport/ApiGateways/YarpApiGateway/*)                 add_svc "yarpapigateway" ;;
              esac
            done
          fi

          if [[ ${#SVC_SET[@]} -eq 0 ]]; then
            for s in "${ALL_SERVICES[@]}"; do add_svc "$s"; done
          fi

          if ! command -v jq >/dev/null 2>&1; then
            sudo apt-get update -y && sudo apt-get install -y jq
          fi
          printf '%s\n' "${!SVC_SET[@]}" | sort | jq -R -s -c 'split("\n") - [""]' > services.json
          echo "Detected services: $(cat services.json)"
          echo "services=$(cat services.json)" >> "$GITHUB_OUTPUT"

  # 2) Build & Push
  build:
    needs: [pick-runner, detect-services]
    if: ${{ needs.detect-services.outputs.services != '[]' }}
    runs-on: ${{ fromJson(needs.pick-runner.outputs.runs_on) }}
    env:
      SERVICES_JSON: ${{ needs.detect-services.outputs.services }}
    steps:
      - uses: actions/checkout@v4

      - uses: docker/setup-buildx-action@v3
        with:
          install: true
          driver-opts: |
            env.BUILDKIT_STEP_MAX_PARALLELISM=5

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ secrets.GIT_CONTAINER_REGISTRY_USERNAME }}
          password: ${{ secrets.GIT_CONTAINER_REGISTRY_PASSWORD }}

      # --- A) Export ENV_PROD vào GITHUB_ENV ---
      - name: Export ENV_PROD to GITHUB_ENV (Linux)
        if: ${{ runner.os == 'Linux' }}
        shell: bash
        run: |
          set -euo pipefail
          tmp="$RUNNER_TEMP/env_prod"
          printf "%s\n" "${{ secrets.ENV_PROD }}" > "$tmp"
          while IFS= read -r line; do
            [[ -z "$line" || "$line" =~ ^[[:space:]]*# ]] && continue
            printf '%s\n' "$line" >> "$GITHUB_ENV"
          done < "$tmp"

      - name: Export ENV_PROD to GITHUB_ENV (Windows)
        if: ${{ runner.os == 'Windows' }}
        shell: pwsh
        run: |
          $tmp = Join-Path $env:RUNNER_TEMP "env_prod.txt"
          @"
          ${{ secrets.ENV_PROD }}
          "@ | Set-Content -Path $tmp -Encoding UTF8
          Get-Content $tmp | ForEach-Object {
            if ($_ -match '^\s*#' -or -not $_.Trim()) { return }
            $kv = $_ -split '=', 2
            if ($kv.Length -eq 2) {
              "$($kv[0].Trim())=$($kv[1])" | Out-File -FilePath $env:GITHUB_ENV -Append -Encoding utf8
            }
          }

      # --- B) Sinh file ${COMPOSE_DIR}/.env ---
      - name: Write ${COMPOSE_DIR}/.env (Linux)
        if: ${{ runner.os == 'Linux' }}
        shell: bash
        run: |
          set -euo pipefail
          : "${COMPOSE_DIR:?COMPOSE_DIR is missing (must come from ENV_PROD)}"
          mkdir -p "${COMPOSE_DIR}"
          printf "%s\n" "${{ secrets.ENV_PROD }}" > "${COMPOSE_DIR}/.env"
          echo "IMAGE_TAG=${GITHUB_SHA}" >> "${COMPOSE_DIR}/.env"

      - name: Write ${env:COMPOSE_DIR}\.env (Windows)
        if: ${{ runner.os == 'Windows' }}
        shell: pwsh
        run: |
          if (-not $env:COMPOSE_DIR) { throw "COMPOSE_DIR is missing (must come from ENV_PROD)" }
          New-Item -ItemType Directory -Force -Path $env:COMPOSE_DIR | Out-Null
          @"
          ${{ secrets.ENV_PROD }}
          "@ | Set-Content -Path (Join-Path $env:COMPOSE_DIR ".env") -Encoding UTF8
          Add-Content -Path (Join-Path $env:COMPOSE_DIR ".env") -Value "IMAGE_TAG=${{ github.sha }}"

      # --- C) Build & Push ---
      - name: Build & push with buildx bake (Linux)
        if: ${{ runner.os == 'Linux' }}
        shell: bash
        run: |
          set -euo pipefail
          export DOCKER_DEFAULT_PLATFORM=linux/amd64
          export COMPOSE_DOCKER_CLI_BUILD=1
          export IMAGE_TAG="${GITHUB_SHA}"

          command -v jq >/dev/null || { sudo apt-get update -y && sudo apt-get install -y jq; }
          mapfile -t SVCS < <(echo "${SERVICES_JSON}" | jq -r '.[]')
          N=${#SVCS[@]}
          [[ $N -eq 0 ]] && exit 0

          BATCH_SIZE=5
          for ((i=0; i<N; i+=BATCH_SIZE)); do
            BATCH=( "${SVCS[@]:i:BATCH_SIZE}" )
            echo "Bake batch $((i/BATCH_SIZE+1)): ${BATCH[*]}"
            docker buildx bake -f "${COMPOSE_FILE}" --push "${BATCH[@]}"
          done
          
      - name: Build & push with buildx bake (Windows)
        if: ${{ runner.os == 'Windows' }}
        shell: pwsh
        run: |
          $env:DOCKER_DEFAULT_PLATFORM = "linux/amd64"
          $env:COMPOSE_DOCKER_CLI_BUILD = "1"
          $env:IMAGE_TAG = "${{ github.sha }}"

          $svcs = ($env:SERVICES_JSON | ConvertFrom-Json)
          if (-not $svcs -or $svcs.Count -eq 0) { exit 0 }

          $batchSize = 5
          for ($i = 0; $i -lt $svcs.Count; $i += $batchSize) {
            $end = [Math]::Min($i + $batchSize - 1, $svcs.Count - 1)
            $batch = if ($i -eq $end) { @($svcs[$i]) } else { $svcs[$i..$end] }
            Write-Host "Bake batch $([int]($i/$batchSize)+1): $($batch -join ', ')"
            docker buildx bake -f "$env:COMPOSE_FILE" --push $batch
          }
