name: Build & Push Microservices (GHCR)

on:
  push:
    branches: [ main ]
  workflow_dispatch:

concurrency:
  group: build-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  packages: write
  id-token: write

env:
  REGISTRY: ghcr.io
  OWNER: ${{ github.repository_owner }}

jobs:
  # 0) Chọn runner ưu tiên (self-hosted nếu online; fallback ubuntu-latest)
  pick-runner:
    runs-on: ubuntu-latest
    outputs:
      runs_on: ${{ steps.decide.outputs.runs_on }}
    steps:
      - name: Decide runner (prefer self-hosted "NA Self Hosted Runner")
        id: decide
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.RUNNER_ADMIN_TOKEN }}
          script: |
            const owner = context.repo.owner;
            const repo  = context.repo.repo;
            const res = await github.rest.actions.listSelfHostedRunnersForRepo({ owner, repo, per_page: 100 });
            const runners = res.data.runners ?? [];

            const target = 'na self hosted runner'; // match theo name hoặc label
            const wanted = runners.find(r => {
              const labels = (r.labels || []).map(l => (l.name || '').toLowerCase());
              const nameLc = (r.name || '').toLowerCase();
              return (labels.includes(target) || nameLc === target) && r.status === 'online' && !r.busy;
            });

            if (wanted) {
              const labelNames = (wanted.labels || []).map(l => l.name).filter(Boolean);
              if (!labelNames.map(s=>s.toLowerCase()).includes('self-hosted')) labelNames.unshift('self-hosted');
              const preferred = labelNames.includes('windows-prod')
                ? ['self-hosted','windows-prod']
                : labelNames;
              core.notice(`✅ Runner selected: ${wanted.name}`);
              core.setOutput('runs_on', JSON.stringify(preferred));
            } else {
              core.notice(`🌀 Fallback runner selected: ubuntu-latest`);
              core.setOutput('runs_on', JSON.stringify("ubuntu-latest"));
            }

      - name: Show decision output
        run: echo "runs_on=${{ steps.decide.outputs.runs_on }}"

  # 1) Detect services thay đổi (hoặc build all khi dispatch / diff rỗng)
  detect-services:
    runs-on: ubuntu-latest
    needs: pick-runner
    outputs:
      services: ${{ steps.out.outputs.services }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Compute smart diff & map to services
        id: out
        shell: bash
        env:
          BEFORE: ${{ github.event.before }}
          EVENT_NAME: ${{ github.event_name }}
        run: |
          set -euo pipefail

          ALL_SERVICES=(
            "aimoderation.api" "alias.api" "auth.api" "chatbox.api" "digitalgoods.api"
            "feed.api" "media.api" "payment.api" "post.api" "profile.api"
            "promotion.grpc" "realtimehub.api" "subscription.api" "test.api"
            "translation.api" "yarpapigateway"
          )

          git fetch --no-tags --prune origin main

          if [[ "${EVENT_NAME}" == "workflow_dispatch" ]]; then
            BUILD_ALL=1
          else
            BUILD_ALL=0
          fi

          if [[ -n "${BEFORE:-}" && "${BEFORE}" != "0000000000000000000000000000000000000000" ]]; then
            BASE="${BEFORE}"
          else
            if git rev-parse -q --verify HEAD~1 >/dev/null; then
              BASE="$(git rev-parse HEAD~1)"
            else
              BASE="$(git merge-base origin/main HEAD)"
            fi
          fi

          echo "Diff range: ${BASE}..HEAD"
          mapfile -t CHANGED_FILES < <(git diff --name-only --diff-filter=ACMR "${BASE}"..HEAD || true)

          if [[ ${#CHANGED_FILES[@]} -eq 0 ]]; then BUILD_ALL=1; fi

          if [[ $BUILD_ALL -eq 0 ]]; then
            for f in "${CHANGED_FILES[@]}"; do
              case "$f" in
                Directory.Packages.props|nuget.config|packages.lock.json|.dockerignore)
                  BUILD_ALL=1; break ;;
              esac
            done
          fi

          declare -A SVC_SET=()
          add_svc(){ SVC_SET["$1"]=1; }

          if [[ $BUILD_ALL -eq 1 ]]; then
            for s in "${ALL_SERVICES[@]}"; do add_svc "$s"; done
          else
            for f in "${CHANGED_FILES[@]}"; do
              case "$f" in
                Services/AIModeration/AIModeration.API/*|PsychologySupport/Services/AIModeration/AIModeration.API/*) add_svc "aimoderation.api" ;;
                Services/Alias/Alias.API/*|PsychologySupport/Services/Alias/Alias.API/*)                             add_svc "alias.api" ;;
                Services/Auth/Auth.API/*|PsychologySupport/Services/Auth/Auth.API/*)                                 add_svc "auth.api" ;;
                Services/ChatBox/ChatBox.API/*|PsychologySupport/Services/ChatBox/ChatBox.API/*)                     add_svc "chatbox.api" ;;
                Services/DigitalGoods/DigitalGoods.API/*|PsychologySupport/Services/DigitalGoods/DigitalGoods.API/*) add_svc "digitalgoods.api" ;;
                Services/Feed/Feed.API/*|PsychologySupport/Services/Feed/Feed.API/*)                                 add_svc "feed.api" ;;
                Services/Media/Media.API/*|PsychologySupport/Services/Media/Media.API/*)                             add_svc "media.api" ;;
                Services/Payment/Payment.API/*|PsychologySupport/Services/Payment/Payment.API/*)                     add_svc "payment.api" ;;
                Services/Post/Post.API/*|PsychologySupport/Services/Post/Post.API/*)                                 add_svc "post.api" ;;
                Services/Profile/Profile.API/*|PsychologySupport/Services/Profile/Profile.API/*)                     add_svc "profile.api" ;;
                Services/Promotion/Promotion.Grpc/*|PsychologySupport/Services/Promotion/Promotion.Grpc/*)           add_svc "promotion.grpc" ;;
                Services/RealtimeHub/RealtimeHub.API/*|PsychologySupport/Services/RealtimeHub/RealtimeHub.API/*)     add_svc "realtimehub.api" ;;
                Services/Subscription/Subscription.API/*|PsychologySupport/Services/Subscription/Subscription.API/*) add_svc "subscription.api" ;;
                Services/Test/Test.API/*|PsychologySupport/Services/Test/Test.API/*)                                 add_svc "test.api" ;;
                Services/Translation/Translation.API/*|PsychologySupport/Services/Translation/Translation.API/*)     add_svc "translation.api" ;;
                ApiGateways/YarpApiGateway/*|PsychologySupport/ApiGateways/YarpApiGateway/*)                         add_svc "yarpapigateway" ;;
              esac
            done
          fi

          if [[ ${#SVC_SET[@]} -eq 0 ]]; then
            for s in "${ALL_SERVICES[@]}"; do add_svc "$s"; done
          fi

          if ! command -v jq >/dev/null 2>&1; then
            sudo apt-get update -y && sudo apt-get install -y jq
          fi

          printf '%s\n' "${!SVC_SET[@]}" | sort | jq -R -s -c 'split("\n") - [""]' > services.json
          echo "Detected services: $(cat services.json)"
          echo "services=$(cat services.json)" >> "$GITHUB_OUTPUT"

  # 2) Build & Push bằng docker-compose.build.yml + .env (ghi .env từ secret, ép IMAGE_TAG=SHA)
  build:
    needs: [pick-runner, detect-services]
    if: ${{ needs.detect-services.outputs.services != '[]' }}
    runs-on: ${{ fromJson(needs.pick-runner.outputs.runs_on) }}
    env:
      SERVICES_JSON: ${{ needs.detect-services.outputs.services }}
    steps:
      - uses: actions/checkout@v4

      - uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ secrets.GIT_CONTAINER_REGISTRY_USERNAME }}
          password: ${{ secrets.GIT_CONTAINER_REGISTRY_PASSWORD }}

      # --- Write .env từ secret + chèn IMAGE_TAG=SHA (Linux)
      - name: Write .env from secret (Linux)
        if: ${{ runner.os == 'Linux' }}
        shell: bash
        run: |
          set -euo pipefail
          : "${{ secrets.ENV_PROD }}"  # ensure exists
          printf "%s\n" "${{ secrets.ENV_PROD }}" > .env
          echo "IMAGE_TAG=${{ github.sha }}" >> .env
          echo "✅ .env content:"
          cat .env

      # --- Write .env từ secret + chèn IMAGE_TAG=SHA (Windows)
      - name: Write .env from secret (Windows)
        if: ${{ runner.os == 'Windows' }}
        shell: pwsh
        run: |
          $content = @"
          ${{ secrets.ENV_PROD }}
          "@
          Set-Content -Path .env -Value $content -Encoding UTF8
          Add-Content -Path .env -Value "IMAGE_TAG=${{ github.sha }}"
          Write-Host "✅ .env content:"
          Get-Content .env

      # --- Compose build/push (Linux)
      - name: Compose build & push (Linux)
        if: ${{ runner.os == 'Linux' }}
        shell: bash
        run: |
          set -euo pipefail
          mapfile -t SVCS < <(echo "$SERVICES_JSON" | jq -r '.[]')
          if [[ ${#SVCS[@]} -eq 0 ]]; then echo "No services"; exit 0; fi
          echo "Services: ${SVCS[*]}"

          # ép linux/amd64 để chạy trên VPS Linux
          DOCKER_DEFAULT_PLATFORM=linux/amd64 \
          docker compose --env-file .env -f docker-compose.build.yml build --parallel "${SVCS[@]}"

          docker compose --env-file .env -f docker-compose.build.yml push "${SVCS[@]}"

      # --- Compose build/push (Windows)
      - name: Compose build & push (Windows)
        if: ${{ runner.os == 'Windows' }}
        shell: pwsh
        run: |
          $svcs = ($env:SERVICES_JSON | ConvertFrom-Json)
          if (-not $svcs -or $svcs.Count -eq 0) { Write-Host "No services"; exit 0 }
          Write-Host "Services: $($svcs -join ' ')"

          # ép linux/amd64 để build từ Windows
          $env:DOCKER_DEFAULT_PLATFORM = "linux/amd64"
          docker compose --env-file .env -f docker-compose.build.yml build --parallel $svcs
          docker compose --env-file .env -f docker-compose.build.yml push $svcs
