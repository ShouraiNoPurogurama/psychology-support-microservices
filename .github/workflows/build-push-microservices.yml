name: Build & Push Microservices (GHCR)

on:
  push:
    branches: [ main ]
  workflow_dispatch:

concurrency:
  group: build-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  packages: write
  id-token: write

env:
  REGISTRY: ghcr.io
  OWNER: ${{ github.repository_owner }}

jobs:
  detect-services:
    runs-on: ubuntu-latest
    outputs:
      services: ${{ steps.out.outputs.services }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Compute smart diff & map to services
        id: out
        shell: bash
        env:
          BEFORE: ${{ github.event.before }}
        run: |
          set -euo pipefail

          # Full list cho "build all" khi nền tảng thay đổi
          ALL_SERVICES=(
            "alias.api" "auth.api" "chatbox.api" "feed.api" "media.api"
            "payment.api" "post.api" "profile.api" "promotion.grpc"
            "subscription.api" "test.api" "translation.api" "yarpapigateway"
          )

          # Các file "nền" thay đổi => build all
          ROOT_IMPACT_FILES_REGEX='^(
            Directory\.Packages\.props|
            nuget\.config|
            packages\.lock\.json|
            \.dockerignore|
            docker-compose-apis\.yml|
            PsychologySupport/BuildingBlocks/|
            PsychologySupport/BuildingBlocks\.Messaging/
          )'

          git fetch --no-tags --prune origin main

          if [[ -n "${BEFORE:-}" && "${BEFORE}" != "0000000000000000000000000000000000000000" ]]; then
            BASE="$BEFORE"
          else
            BASE="$(git merge-base origin/main HEAD)"
          fi

          echo "Diff range: ${BASE}...HEAD"

          # name-status để bắt rename; diff-filter=ACMR (Add, Copy, Modify, Rename)
          mapfile -t CHANGED_FILES < <(git diff --name-only --diff-filter=ACMR "${BASE}"...HEAD || true)

          if [[ ${#CHANGED_FILES[@]} -eq 0 ]]; then
            echo "services=[]" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          BUILD_ALL=0
          for f in "${CHANGED_FILES[@]}"; do
            if [[ "$f" =~ $ROOT_IMPACT_FILES_REGEX ]]; then
              BUILD_ALL=1
              break
            fi
          done

          declare -A SVC_SET=()

          add_svc() { SVC_SET["$1"]=1; }

          if [[ $BUILD_ALL -eq 1 ]]; then
            for s in "${ALL_SERVICES[@]}"; do add_svc "$s"; done
          else
            for f in "${CHANGED_FILES[@]}"; do
              case "$f" in
                Services/Alias/Alias.API/*|PsychologySupport/Services/Alias/Alias.API/*)               add_svc "alias.api" ;;
                Services/Auth/Auth.API/*|PsychologySupport/Services/Auth/Auth.API/*)                   add_svc "auth.api" ;;
                Services/ChatBox/ChatBox.API/*|PsychologySupport/Services/ChatBox/ChatBox.API/*)       add_svc "chatbox.api" ;;
                Services/Feed/Feed.API/*|PsychologySupport/Services/Feed/Feed.API/*)                   add_svc "feed.api" ;;
                Services/Media/Media.API/*|PsychologySupport/Services/Media/Media.API/*)               add_svc "media.api" ;;
                Services/Payment/Payment.API/*|PsychologySupport/Services/Payment/Payment.API/*)       add_svc "payment.api" ;;
                Services/Post/Post.API/*|PsychologySupport/Services/Post/Post.API/*)                   add_svc "post.api" ;;
                Services/Profile/Profile.API/*|PsychologySupport/Services/Profile/Profile.API/*)       add_svc "profile.api" ;;
                Services/Promotion/Promotion.Grpc/*|PsychologySupport/Services/Promotion/Promotion.Grpc/*) add_svc "promotion.grpc" ;;
                Services/Subscription/Subscription.API/*|PsychologySupport/Services/Subscription/Subscription.API/*) add_svc "subscription.api" ;;
                Services/Test/Test.API/*|PsychologySupport/Services/Test/Test.API/*)                   add_svc "test.api" ;;
                Services/Translation/Translation.API/*|PsychologySupport/Services/Translation/Translation.API/*) add_svc "translation.api" ;;
                ApiGateways/YarpApiGateway/*|PsychologySupport/ApiGateways/YarpApiGateway/*)           add_svc "yarpapigateway" ;;
              esac
            done
          fi

          # Ra JSON ổn định (sort theo tên)
          if ! command -v jq >/dev/null 2>&1; then
            sudo apt-get update -y && sudo apt-get install -y jq
          fi

          printf '%s\n' "${!SVC_SET[@]}" | sort | jq -R -s -c 'split("\n") - [""]' > services.json
          echo "Detected services: $(cat services.json)"
          echo "services=$(cat services.json)" >> "$GITHUB_OUTPUT"

  build:
    needs: detect-services
    if: ${{ needs.detect-services.outputs.services != '[]' }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      # Có thể giới hạn parallel cho hợp lý, ví dụ:
      max-parallel: 3
      matrix:
        service: ${{ fromJson(needs.detect-services.outputs.services) }}
    steps:
      - uses: actions/checkout@v4

      - uses: docker/setup-buildx-action@v3

      - name: Login to GHCR (using your PAT secrets)
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ secrets.GIT_CONTAINER_REGISTRY_USERNAME }}
          password: ${{ secrets.GIT_CONTAINER_REGISTRY_PASSWORD }}

      - name: Resolve context & dockerfile
        id: meta
        shell: bash
        run: |
          SVC="${{ matrix.service }}"
          case "$SVC" in
            alias.api)        CTX=Services/Alias/Alias.API ;;
            auth.api)         CTX=Services/Auth/Auth.API ;;
            chatbox.api)      CTX=Services/ChatBox/ChatBox.API ;;
            feed.api)         CTX=Services/Feed/Feed.API ;;
            media.api)        CTX=Services/Media/Media.API ;;
            payment.api)      CTX=Services/Payment/Payment.API ;;
            post.api)         CTX=Services/Post/Post.API ;;
            profile.api)      CTX=Services/Profile/Profile.API ;;
            promotion.grpc)   CTX=Services/Promotion/Promotion.Grpc ;;
            subscription.api) CTX=Services/Subscription/Subscription.API ;;
            test.api)         CTX=Services/Test/Test.API ;;
            translation.api)  CTX=Services/Translation/Translation.API ;;
            yarpapigateway)   CTX=ApiGateways/YarpApiGateway ;;
            *) echo "Unknown service $SVC"; exit 1 ;;
          esac
          echo "CTX=$CTX" >> $GITHUB_OUTPUT
          echo "IMG=${{ env.REGISTRY }}/${{ env.OWNER }}/${SVC}" >> $GITHUB_OUTPUT

      - name: Build & Push ${{ matrix.service }}
        uses: docker/build-push-action@v6
        with:
          context: ./${{ steps.meta.outputs.CTX }}
          file: ./${{ steps.meta.outputs.CTX }}/Dockerfile
          platforms: linux/amd64
          push: true
          provenance: false
          tags: |
            ${{ steps.meta.outputs.IMG }}:${{ github.sha }}
            ${{ steps.meta.outputs.IMG }}:latest
            ${{ steps.meta.outputs.IMG }}:main
          cache-from: type=gha,scope=${{ matrix.service }}
          cache-to: type=gha,mode=max,scope=${{ matrix.service }}
